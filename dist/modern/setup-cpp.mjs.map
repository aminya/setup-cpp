{"version":3,"sources":["../../src/setup-cpp.ts"],"names":[],"mappings":"AAAA,OAAO,QAAS,KAAK,AACrB,QAAO,mBAAoB,wBAAwB,AACnD,QACE,cAAc,CAGd,KAAK,CACL,IAAI,CACJ,MAAM,CACN,aAAa,CACb,WAAW,CACX,QAAQ,CACR,OAAO,CACP,OAAO,KACF,UAAU,CAGjB,eAAe,KAAK,IAAc,EAChC,MAAM,mBAAqB,eAAiB,QAAQ,OAAO,GAAK,eAGhE,MAAM,KAAO,UAAU,MAGvB,GAAI,KAAK,IAAI,CAAE,CACb,YACA,OAAO,CACT,CAGA,GAAI,KAAK,OAAO,CAAE,CAChB,KAAK,CAAC,EAAE,YAAY,OAAO,CAAC,CAAC,EAC7B,OAAO,CACT,CAEA,KAAM,CAAE,eAAe,CAAE,aAAa,CAAE,CAAG,MAAM,SAAS,MAG1D,IAAK,MAAM,QAAQ,gBACjB,QAAQ,MAEV,IAAK,MAAM,QAAQ,cACjB,MAAM,MAGR,GAAI,gBAAgB,MAAM,GAAK,GAAK,cAAc,MAAM,GAAK,EAAG,CAC9D,KAAK,sBAEL,GAAI,CAAC,eACH,OAAQ,QAAQ,QAAQ,EACtB,IAAK,QACH,QAAQ,yEACR,KAEF,KAAK,QACL,IAAK,SACH,QAAQ,0EACR,KAEF,SAGF,CAEJ,CAEA,MAAM,mBAEN,OAAO,CACT,CAGA,eAAe,eACb,GAAI,CACF,MAAM,eAAe,CAAE,IAAK,WAAY,EAC1C,CAAE,MAAO,IAAK,CACZ,QAAQ,CAAC,6BAA6B,EAAE,eAAe,MAAQ,IAAI,OAAO,CAAG,IAAI,KAAK,CAAG,IAAI,CAAC,CAChG,CACF,CAUA,OAAO,SAAS,UAAU,IAAc,EACtC,MAAM,SAAW,OAAO,WAAW,CAAC,OAAO,GAAG,CAAC,AAAC,KAAQ,CAAC,IAAK,cAAc,KAAK,GACjF,OAAO,IAAoG,KAAM,CAC/G,OAAQ,IAAI,OAAQ,UAAW,uBAAuB,CACtD,QAAS,SACT,MAAO,CAAE,EAAG,OAAQ,EAAG,SAAU,EACjC,QAAS,CAAC,OAAQ,UAAW,YAAY,AAC3C,EACF,CAEA,SAAS,YACP,KAAK,CAAC;;;;;;;;;;;;;;;;AAgBR,CAAC,EAEC,QAAQ,KAAK,CACX,CACE,wBAAyB,CACvB,MAAO,mDACT,EACA,eAAgB,CACd,MAAO,oDACT,EACA,kBAAmB,CAAE,MAAO,+DAAgE,EAC5F,kBAAmB,CACjB,MACE,mIACJ,EACA,MAAO,CAAE,MAAO,qBAAsB,EACtC,cAAe,CAAE,MAAO,uBAAwB,EAChD,SAAU,CAAE,MAAO,oCAAqC,EACxD,MAAO,CAAE,MAAO,oCAAqC,CACvD,EACA,CAAC,QAAQ,CAEb,CAGA,GAAI,QAAQ,GAAG,CAAC,mBAAmB,GAAK,OACtC,KAAK,QAAQ,IAAI,EACd,IAAI,CAAC,AAAC,MACL,QAAQ,QAAQ,CAAG,GACrB,GACC,KAAK,CAAC,AAAC,MACN,MAAM,oBACN,MAAM,IACN,CAAA,QAAQ,QAAQ,CAAG,CACrB","file":"setup-cpp.mjs","sourcesContent":["import mri from \"mri\"\nimport updateNotifier from \"simple-update-notifier\"\nimport {\n  GITHUB_ACTIONS,\n  type Inputs,\n  type Opts,\n  error,\n  info,\n  inputs,\n  maybeGetInput,\n  packageJson,\n  setupCpp,\n  success,\n  warning,\n} from \"./lib.ts\"\n\n/** The main entry function */\nasync function main(args: string[]): Promise<number> {\n  const checkUpdatePromise = GITHUB_ACTIONS ? Promise.resolve() : checkUpdates()\n\n  // parse options using mri or github actions\n  const opts = parseArgs(args)\n\n  // print help\n  if (opts.help) {\n    printHelp()\n    return 0\n  }\n\n  // print version\n  if (opts.version) {\n    info(`${packageJson.version}`)\n    return 0\n  }\n\n  const { successMessages, errorMessages } = await setupCpp(opts)\n\n  // report the messages in the end\n  for (const tool of successMessages) {\n    success(tool)\n  }\n  for (const tool of errorMessages) {\n    error(tool)\n  }\n\n  if (successMessages.length !== 0 || errorMessages.length !== 0) {\n    info(\"setup-cpp finished\")\n\n    if (!GITHUB_ACTIONS) {\n      switch (process.platform) {\n        case \"win32\": {\n          warning(\"Run `RefreshEnv.cmd` or restart your shell to update the environment.\")\n          break\n        }\n        case \"linux\":\n        case \"darwin\": {\n          warning(\"Run `source ~/.cpprc` or restart your shell to update the environment.\")\n          break\n        }\n        default: {\n          // nothing\n        }\n      }\n    }\n  }\n\n  await checkUpdatePromise\n\n  return 0\n}\n\n// auto self update notifier\nasync function checkUpdates() {\n  try {\n    await updateNotifier({ pkg: packageJson })\n  } catch (err) {\n    warning(`Failed to check for updates: ${err instanceof Error ? err.message + err.stack : err}`)\n  }\n}\n\n/**\n * The options for the setup-cpp function\n */\ntype CliOpts = Opts & {\n  help: boolean\n  version: boolean\n}\n\nexport function parseArgs(args: string[]): CliOpts {\n  const defaults = Object.fromEntries(inputs.map((inp) => [inp, maybeGetInput(inp)]))\n  return mri<Record<Inputs, string | undefined> & { help: boolean; version: boolean; \"setup-cpp\": boolean }>(args, {\n    string: [...inputs, \"timeout\", \"node-package-manager\"],\n    default: defaults,\n    alias: { h: \"help\", v: \"version\" },\n    boolean: [\"help\", \"version\", \"setup-cpp\"],\n  })\n}\n\nfunction printHelp() {\n  info(`\nsetup-cpp [options]\nsetup-cpp --compiler llvm --cmake true --ninja true --ccache true --vcpkg true\n\nInstall all the tools required for building and testing C++/C projects.\n\n--architecture\\t the cpu architecture to install the tools for. By default it uses the current CPU architecture.\n--timeout\\t the timeout for the installation of each tool in minutes. By default it is 10 minutes.\n--compiler\\t the <compiler> to install.\n          \\t You can specify the version instead of specifying just the name e.g: --compiler 'llvm-13.0.0'\n--tool_name\\t pass \"true\" or pass the <version> you would like to install for this tool. e.g. --conan true or --conan \"1.42.1\"\n--nodePackageManager\\t the node package manager to use (npm/yarn/pnpm) when installing setup-cpp globally\n--help\\t show this help message\n--version\\t show the version of setup-cpp\n\nAll the available tools:\n`)\n\n  console.table(\n    {\n      \"compiler and analyzer\": {\n        tools: \"--llvm, --gcc, --msvc, --apple-clang, --vcvarsall\",\n      },\n      \"build system\": {\n        tools: \"--cmake, --ninja, --meson, --make, --task, --bazel\",\n      },\n      \"package manager\": { tools: \"--vcpkg, --conan, --choco, --brew, --nala, --git, --setup-cpp\" },\n      \"analyzer/linter\": {\n        tools:\n          \"--clang-tidy, --clang-format, --cppcheck, --cpplint, --flawfinder, --lizard, --infer, , --cmakelang, --cmake-lint, --cmake-format\",\n      },\n      cache: { tools: \"--ccache, --sccache\" },\n      documentation: { tools: \"--doxygen, --graphviz\" },\n      coverage: { tools: \"--gcovr, --opencppcoverage, --kcov\" },\n      other: { tools: \"--python, --powershell, --sevenzip\" },\n    },\n    [\"tools\"],\n  )\n}\n\n// Run main\nif (process.env.SETUP_CPP_SKIP_MAIN !== \"true\") {\n  main(process.argv)\n    .then((ret) => {\n      process.exitCode = ret\n    })\n    .catch((err) => {\n      error(\"main() panicked!\")\n      error(err as string | Error)\n      process.exitCode = 1\n    })\n}\n"]}