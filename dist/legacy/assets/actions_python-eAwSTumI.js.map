{"version":3,"file":"actions_python-eAwSTumI.js","sources":["../../../node_modules/.pnpm/@actions+http-client@1.0.11/node_modules/@actions/http-client/proxy.js","../../../node_modules/.pnpm/@actions+tool-cache@1.7.2/node_modules/@actions/tool-cache/lib/tool-cache.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-glob-options-helper.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-path-helper.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-pattern-helper.js","../../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js","../../../node_modules/.pnpm/brace-expansion@1.1.11/node_modules/brace-expansion/index.js","../../../node_modules/.pnpm/minimatch@3.1.2/node_modules/minimatch/minimatch.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/glob.js","../../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/v1.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/internal/cacheUtils.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js","../../../node_modules/.pnpm/@azure+logger@1.1.4/node_modules/@azure/logger/dist/esm/log.js","../../../node_modules/.pnpm/@azure+logger@1.1.4/node_modules/@azure/logger/dist/esm/debug.js","../../../node_modules/.pnpm/@azure+logger@1.1.4/node_modules/@azure/logger/dist/esm/index.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/createAbortablePromise.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/random.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/delay.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/object.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/error.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/uuidUtils.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/bytesEncoding.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js","../../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js","../../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js","../../../node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/common.js","../../../node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/browser.js","../../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js","../../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js","../../../node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/node.js","../../../node_modules/.pnpm/agent-base@7.1.1/node_modules/agent-base/dist/helpers.js","../../../node_modules/.pnpm/https-proxy-agent@7.0.5/node_modules/https-proxy-agent/dist/parse-proxy-response.js","../../../node_modules/.pnpm/https-proxy-agent@7.0.5/node_modules/https-proxy-agent/dist/index.js","../../../node_modules/.pnpm/http-proxy-agent@7.0.2/node_modules/http-proxy-agent/dist/index.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js","../../../node_modules/.pnpm/@azure+core-tracing@1.1.2/node_modules/@azure/core-tracing/dist/esm/tracingContext.js","../../../node_modules/.pnpm/@azure+core-tracing@1.1.2/node_modules/@azure/core-tracing/dist/esm/instrumenter.js","../../../node_modules/.pnpm/@azure+core-tracing@1.1.2/node_modules/@azure/core-tracing/dist/esm/tracingClient.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/restError.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js","../../../node_modules/.pnpm/@azure+core-auth@1.8.0/node_modules/@azure/core-auth/dist/esm/tokenCredential.js","../../../node_modules/.pnpm/@azure+core-http-compat@2.1.2/node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/base64.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/utils.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/serializer.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/operationHelpers.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/deserializationPolicy.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/interfaceHelpers.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/serializationPolicy.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/pipeline.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/httpClientCache.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/urlHelpers.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/serviceClient.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js","../../../node_modules/.pnpm/@azure+core-http-compat@2.1.2/node_modules/@azure/core-http-compat/dist/esm/util.js","../../../node_modules/.pnpm/@azure+core-http-compat@2.1.2/node_modules/@azure/core-http-compat/dist/esm/response.js","../../../node_modules/.pnpm/@azure+core-http-compat@2.1.2/node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js","../../../node_modules/.pnpm/@azure+core-http-compat@2.1.2/node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/validator.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/ignoreAttributes.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../../node_modules/.pnpm/@azure+core-xml@1.4.3/node_modules/@azure/core-xml/dist/esm/xml.js","../../../node_modules/.pnpm/@azure+abort-controller@1.1.0/node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/internal/requestUtils.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/internal/downloadUtils.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/options.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/internal/cacheHttpClient.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/internal/tar.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/cache.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/toml-parser.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/parse-pretty-error.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/parse-string.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/parse-async.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/parse-stream.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/stringify.js","../../../node_modules/.pnpm/setup-python@https+++codeload.github.com+aminya+setup-python+tar.gz+65d7f2d534ac1bc67fcd62888_yd2rbg6boibkbeobox7abjmugu/node_modules/setup-python/src/utils.ts","../../../node_modules/.pnpm/setup-python@https+++codeload.github.com+aminya+setup-python+tar.gz+65d7f2d534ac1bc67fcd62888_yd2rbg6boibkbeobox7abjmugu/node_modules/setup-python/src/install-pypy.ts","../../../node_modules/.pnpm/setup-python@https+++codeload.github.com+aminya+setup-python+tar.gz+65d7f2d534ac1bc67fcd62888_yd2rbg6boibkbeobox7abjmugu/node_modules/setup-python/src/find-pypy.ts","../../../node_modules/.pnpm/setup-python@https+++codeload.github.com+aminya+setup-python+tar.gz+65d7f2d534ac1bc67fcd62888_yd2rbg6boibkbeobox7abjmugu/node_modules/setup-python/src/install-python.ts","../../../node_modules/.pnpm/setup-python@https+++codeload.github.com+aminya+setup-python+tar.gz+65d7f2d534ac1bc67fcd62888_yd2rbg6boibkbeobox7abjmugu/node_modules/setup-python/src/find-python.ts","../../../src/python/actions_python.ts","../../../node_modules/.pnpm/@actions+tool-cache@1.7.2/node_modules/@actions/tool-cache/lib/manifest.js","../../../node_modules/.pnpm/@actions+http-client@1.0.11/node_modules/@actions/http-client/index.js","../../../node_modules/.pnpm/@actions+tool-cache@1.7.2/node_modules/@actions/tool-cache/lib/retry-helper.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-match-kind.js","../../../node_modules/.pnpm/concat-map@0.0.1/node_modules/concat-map/index.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-path.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-pattern.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-search-state.js","../../../node_modules/.pnpm/@actions+glob@0.1.2/node_modules/@actions/glob/lib/internal-globber.js","../../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/index.js","../../../node_modules/.pnpm/@actions+cache@3.2.4_encoding@0.1.13/node_modules/@actions/cache/lib/internal/constants.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/log.js","../../../node_modules/.pnpm/@azure+abort-controller@2.1.2/node_modules/@azure/abort-controller/dist/esm/AbortError.js","../../../node_modules/.pnpm/@azure+core-util@1.10.0/node_modules/@azure/core-util/dist/esm/checkEnvironment.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/constants.js","../../../node_modules/.pnpm/debug@4.3.7/node_modules/debug/src/index.js","../../../node_modules/.pnpm/agent-base@7.1.1/node_modules/agent-base/dist/index.js","../../../node_modules/.pnpm/@azure+core-tracing@1.1.2/node_modules/@azure/core-tracing/dist/commonjs/state.js","../../../node_modules/.pnpm/@azure+core-tracing@1.1.2/node_modules/@azure/core-tracing/dist/esm/state.js","../../../node_modules/.pnpm/@azure+core-rest-pipeline@1.17.0/node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/interfaces.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/commonjs/state.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/state.js","../../../node_modules/.pnpm/@azure+core-client@1.9.2/node_modules/@azure/core-client/dist/esm/log.js","../../../node_modules/.pnpm/@azure+core-http-compat@2.1.2/node_modules/@azure/core-http-compat/dist/esm/extendedClient.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/util.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../../node_modules/.pnpm/fast-xml-parser@4.5.0/node_modules/fast-xml-parser/src/fxp.js","../../../node_modules/.pnpm/@azure+core-xml@1.4.3/node_modules/@azure/core-xml/dist/esm/xml.common.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js","../../../node_modules/.pnpm/@azure+abort-controller@1.1.0/node_modules/@azure/abort-controller/dist-esm/src/AbortController.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js","../../../node_modules/.pnpm/@azure+core-lro@2.7.2/node_modules/@azure/core-lro/dist/esm/legacy/poller.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js","../../../node_modules/.pnpm/@azure+storage-blob@12.24.0/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/parser.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/create-datetime.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/format-num.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/create-datetime-float.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/create-date.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/lib/create-time.js","../../../node_modules/.pnpm/@iarna+toml@2.2.5/node_modules/@iarna/toml/parse.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProxyUrl(reqUrl) {\n    let usingSsl = reqUrl.protocol === 'https:';\n    let proxyUrl;\n    if (checkBypass(reqUrl)) {\n        return proxyUrl;\n    }\n    let proxyVar;\n    if (usingSsl) {\n        proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n    }\n    else {\n        proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];\n    }\n    if (proxyVar) {\n        proxyUrl = new URL(proxyVar);\n    }\n    return proxyUrl;\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    let noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    let upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (let upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.evaluateVersions = exports.isExplicitVersion = exports.findFromManifest = exports.getManifestFromRepo = exports.findAllVersions = exports.find = exports.cacheFile = exports.cacheDir = exports.extractZip = exports.extractXar = exports.extractTar = exports.extract7z = exports.downloadTool = exports.HTTPError = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst io = __importStar(require(\"@actions/io\"));\nconst fs = __importStar(require(\"fs\"));\nconst mm = __importStar(require(\"./manifest\"));\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst httpm = __importStar(require(\"@actions/http-client\"));\nconst semver = __importStar(require(\"semver\"));\nconst stream = __importStar(require(\"stream\"));\nconst util = __importStar(require(\"util\"));\nconst v4_1 = __importDefault(require(\"uuid/v4\"));\nconst exec_1 = require(\"@actions/exec/lib/exec\");\nconst assert_1 = require(\"assert\");\nconst retry_helper_1 = require(\"./retry-helper\");\nclass HTTPError extends Error {\n    constructor(httpStatusCode) {\n        super(`Unexpected HTTP response: ${httpStatusCode}`);\n        this.httpStatusCode = httpStatusCode;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.HTTPError = HTTPError;\nconst IS_WINDOWS = process.platform === 'win32';\nconst IS_MAC = process.platform === 'darwin';\nconst userAgent = 'actions/tool-cache';\n/**\n * Download a tool from an url and stream it into a file\n *\n * @param url       url of tool to download\n * @param dest      path to download tool\n * @param auth      authorization header\n * @param headers   other headers\n * @returns         path to downloaded tool\n */\nfunction downloadTool(url, dest, auth, headers) {\n    return __awaiter(this, void 0, void 0, function* () {\n        dest = dest || path.join(_getTempDirectory(), v4_1.default());\n        yield io.mkdirP(path.dirname(dest));\n        core.debug(`Downloading ${url}`);\n        core.debug(`Destination ${dest}`);\n        const maxAttempts = 3;\n        const minSeconds = _getGlobal('TEST_DOWNLOAD_TOOL_RETRY_MIN_SECONDS', 10);\n        const maxSeconds = _getGlobal('TEST_DOWNLOAD_TOOL_RETRY_MAX_SECONDS', 20);\n        const retryHelper = new retry_helper_1.RetryHelper(maxAttempts, minSeconds, maxSeconds);\n        return yield retryHelper.execute(() => __awaiter(this, void 0, void 0, function* () {\n            return yield downloadToolAttempt(url, dest || '', auth, headers);\n        }), (err) => {\n            if (err instanceof HTTPError && err.httpStatusCode) {\n                // Don't retry anything less than 500, except 408 Request Timeout and 429 Too Many Requests\n                if (err.httpStatusCode < 500 &&\n                    err.httpStatusCode !== 408 &&\n                    err.httpStatusCode !== 429) {\n                    return false;\n                }\n            }\n            // Otherwise retry\n            return true;\n        });\n    });\n}\nexports.downloadTool = downloadTool;\nfunction downloadToolAttempt(url, dest, auth, headers) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (fs.existsSync(dest)) {\n            throw new Error(`Destination file path ${dest} already exists`);\n        }\n        // Get the response headers\n        const http = new httpm.HttpClient(userAgent, [], {\n            allowRetries: false\n        });\n        if (auth) {\n            core.debug('set auth');\n            if (headers === undefined) {\n                headers = {};\n            }\n            headers.authorization = auth;\n        }\n        const response = yield http.get(url, headers);\n        if (response.message.statusCode !== 200) {\n            const err = new HTTPError(response.message.statusCode);\n            core.debug(`Failed to download from \"${url}\". Code(${response.message.statusCode}) Message(${response.message.statusMessage})`);\n            throw err;\n        }\n        // Download the response body\n        const pipeline = util.promisify(stream.pipeline);\n        const responseMessageFactory = _getGlobal('TEST_DOWNLOAD_TOOL_RESPONSE_MESSAGE_FACTORY', () => response.message);\n        const readStream = responseMessageFactory();\n        let succeeded = false;\n        try {\n            yield pipeline(readStream, fs.createWriteStream(dest));\n            core.debug('download complete');\n            succeeded = true;\n            return dest;\n        }\n        finally {\n            // Error, delete dest before retry\n            if (!succeeded) {\n                core.debug('download failed');\n                try {\n                    yield io.rmRF(dest);\n                }\n                catch (err) {\n                    core.debug(`Failed to delete '${dest}'. ${err.message}`);\n                }\n            }\n        }\n    });\n}\n/**\n * Extract a .7z file\n *\n * @param file     path to the .7z file\n * @param dest     destination directory. Optional.\n * @param _7zPath  path to 7zr.exe. Optional, for long path support. Most .7z archives do not have this\n * problem. If your .7z archive contains very long paths, you can pass the path to 7zr.exe which will\n * gracefully handle long paths. By default 7zdec.exe is used because it is a very small program and is\n * bundled with the tool lib. However it does not support long paths. 7zr.exe is the reduced command line\n * interface, it is smaller than the full command line interface, and it does support long paths. At the\n * time of this writing, it is freely available from the LZMA SDK that is available on the 7zip website.\n * Be sure to check the current license agreement. If 7zr.exe is bundled with your action, then the path\n * to 7zr.exe can be pass to this function.\n * @returns        path to the destination directory\n */\nfunction extract7z(file, dest, _7zPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        assert_1.ok(IS_WINDOWS, 'extract7z() not supported on current OS');\n        assert_1.ok(file, 'parameter \"file\" is required');\n        dest = yield _createExtractFolder(dest);\n        const originalCwd = process.cwd();\n        process.chdir(dest);\n        if (_7zPath) {\n            try {\n                const logLevel = core.isDebug() ? '-bb1' : '-bb0';\n                const args = [\n                    'x',\n                    logLevel,\n                    '-bd',\n                    '-sccUTF-8',\n                    file\n                ];\n                const options = {\n                    silent: true\n                };\n                yield exec_1.exec(`\"${_7zPath}\"`, args, options);\n            }\n            finally {\n                process.chdir(originalCwd);\n            }\n        }\n        else {\n            const escapedScript = path\n                .join(__dirname, '..', 'scripts', 'Invoke-7zdec.ps1')\n                .replace(/'/g, \"''\")\n                .replace(/\"|\\n|\\r/g, ''); // double-up single quotes, remove double quotes and newlines\n            const escapedFile = file.replace(/'/g, \"''\").replace(/\"|\\n|\\r/g, '');\n            const escapedTarget = dest.replace(/'/g, \"''\").replace(/\"|\\n|\\r/g, '');\n            const command = `& '${escapedScript}' -Source '${escapedFile}' -Target '${escapedTarget}'`;\n            const args = [\n                '-NoLogo',\n                '-Sta',\n                '-NoProfile',\n                '-NonInteractive',\n                '-ExecutionPolicy',\n                'Unrestricted',\n                '-Command',\n                command\n            ];\n            const options = {\n                silent: true\n            };\n            try {\n                const powershellPath = yield io.which('powershell', true);\n                yield exec_1.exec(`\"${powershellPath}\"`, args, options);\n            }\n            finally {\n                process.chdir(originalCwd);\n            }\n        }\n        return dest;\n    });\n}\nexports.extract7z = extract7z;\n/**\n * Extract a compressed tar archive\n *\n * @param file     path to the tar\n * @param dest     destination directory. Optional.\n * @param flags    flags for the tar command to use for extraction. Defaults to 'xz' (extracting gzipped tars). Optional.\n * @returns        path to the destination directory\n */\nfunction extractTar(file, dest, flags = 'xz') {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!file) {\n            throw new Error(\"parameter 'file' is required\");\n        }\n        // Create dest\n        dest = yield _createExtractFolder(dest);\n        // Determine whether GNU tar\n        core.debug('Checking tar --version');\n        let versionOutput = '';\n        yield exec_1.exec('tar --version', [], {\n            ignoreReturnCode: true,\n            silent: true,\n            listeners: {\n                stdout: (data) => (versionOutput += data.toString()),\n                stderr: (data) => (versionOutput += data.toString())\n            }\n        });\n        core.debug(versionOutput.trim());\n        const isGnuTar = versionOutput.toUpperCase().includes('GNU TAR');\n        // Initialize args\n        let args;\n        if (flags instanceof Array) {\n            args = flags;\n        }\n        else {\n            args = [flags];\n        }\n        if (core.isDebug() && !flags.includes('v')) {\n            args.push('-v');\n        }\n        let destArg = dest;\n        let fileArg = file;\n        if (IS_WINDOWS && isGnuTar) {\n            args.push('--force-local');\n            destArg = dest.replace(/\\\\/g, '/');\n            // Technically only the dest needs to have `/` but for aesthetic consistency\n            // convert slashes in the file arg too.\n            fileArg = file.replace(/\\\\/g, '/');\n        }\n        if (isGnuTar) {\n            // Suppress warnings when using GNU tar to extract archives created by BSD tar\n            args.push('--warning=no-unknown-keyword');\n            args.push('--overwrite');\n        }\n        args.push('-C', destArg, '-f', fileArg);\n        yield exec_1.exec(`tar`, args);\n        return dest;\n    });\n}\nexports.extractTar = extractTar;\n/**\n * Extract a xar compatible archive\n *\n * @param file     path to the archive\n * @param dest     destination directory. Optional.\n * @param flags    flags for the xar. Optional.\n * @returns        path to the destination directory\n */\nfunction extractXar(file, dest, flags = []) {\n    return __awaiter(this, void 0, void 0, function* () {\n        assert_1.ok(IS_MAC, 'extractXar() not supported on current OS');\n        assert_1.ok(file, 'parameter \"file\" is required');\n        dest = yield _createExtractFolder(dest);\n        let args;\n        if (flags instanceof Array) {\n            args = flags;\n        }\n        else {\n            args = [flags];\n        }\n        args.push('-x', '-C', dest, '-f', file);\n        if (core.isDebug()) {\n            args.push('-v');\n        }\n        const xarPath = yield io.which('xar', true);\n        yield exec_1.exec(`\"${xarPath}\"`, _unique(args));\n        return dest;\n    });\n}\nexports.extractXar = extractXar;\n/**\n * Extract a zip\n *\n * @param file     path to the zip\n * @param dest     destination directory. Optional.\n * @returns        path to the destination directory\n */\nfunction extractZip(file, dest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!file) {\n            throw new Error(\"parameter 'file' is required\");\n        }\n        dest = yield _createExtractFolder(dest);\n        if (IS_WINDOWS) {\n            yield extractZipWin(file, dest);\n        }\n        else {\n            yield extractZipNix(file, dest);\n        }\n        return dest;\n    });\n}\nexports.extractZip = extractZip;\nfunction extractZipWin(file, dest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // build the powershell command\n        const escapedFile = file.replace(/'/g, \"''\").replace(/\"|\\n|\\r/g, ''); // double-up single quotes, remove double quotes and newlines\n        const escapedDest = dest.replace(/'/g, \"''\").replace(/\"|\\n|\\r/g, '');\n        const pwshPath = yield io.which('pwsh', false);\n        //To match the file overwrite behavior on nix systems, we use the overwrite = true flag for ExtractToDirectory\n        //and the -Force flag for Expand-Archive as a fallback\n        if (pwshPath) {\n            //attempt to use pwsh with ExtractToDirectory, if this fails attempt Expand-Archive\n            const pwshCommand = [\n                `$ErrorActionPreference = 'Stop' ;`,\n                `try { Add-Type -AssemblyName System.IO.Compression.ZipFile } catch { } ;`,\n                `try { [System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}', $true) }`,\n                `catch { if (($_.Exception.GetType().FullName -eq 'System.Management.Automation.MethodException') -or ($_.Exception.GetType().FullName -eq 'System.Management.Automation.RuntimeException') ){ Expand-Archive -LiteralPath '${escapedFile}' -DestinationPath '${escapedDest}' -Force } else { throw $_ } } ;`\n            ].join(' ');\n            const args = [\n                '-NoLogo',\n                '-NoProfile',\n                '-NonInteractive',\n                '-ExecutionPolicy',\n                'Unrestricted',\n                '-Command',\n                pwshCommand\n            ];\n            core.debug(`Using pwsh at path: ${pwshPath}`);\n            yield exec_1.exec(`\"${pwshPath}\"`, args);\n        }\n        else {\n            const powershellCommand = [\n                `$ErrorActionPreference = 'Stop' ;`,\n                `try { Add-Type -AssemblyName System.IO.Compression.FileSystem } catch { } ;`,\n                `if ((Get-Command -Name Expand-Archive -Module Microsoft.PowerShell.Archive -ErrorAction Ignore)) { Expand-Archive -LiteralPath '${escapedFile}' -DestinationPath '${escapedDest}' -Force }`,\n                `else {[System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}', $true) }`\n            ].join(' ');\n            const args = [\n                '-NoLogo',\n                '-Sta',\n                '-NoProfile',\n                '-NonInteractive',\n                '-ExecutionPolicy',\n                'Unrestricted',\n                '-Command',\n                powershellCommand\n            ];\n            const powershellPath = yield io.which('powershell', true);\n            core.debug(`Using powershell at path: ${powershellPath}`);\n            yield exec_1.exec(`\"${powershellPath}\"`, args);\n        }\n    });\n}\nfunction extractZipNix(file, dest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const unzipPath = yield io.which('unzip', true);\n        const args = [file];\n        if (!core.isDebug()) {\n            args.unshift('-q');\n        }\n        args.unshift('-o'); //overwrite with -o, otherwise a prompt is shown which freezes the run\n        yield exec_1.exec(`\"${unzipPath}\"`, args, { cwd: dest });\n    });\n}\n/**\n * Caches a directory and installs it into the tool cacheDir\n *\n * @param sourceDir    the directory to cache into tools\n * @param tool          tool name\n * @param version       version of the tool.  semver format\n * @param arch          architecture of the tool.  Optional.  Defaults to machine architecture\n */\nfunction cacheDir(sourceDir, tool, version, arch) {\n    return __awaiter(this, void 0, void 0, function* () {\n        version = semver.clean(version) || version;\n        arch = arch || os.arch();\n        core.debug(`Caching tool ${tool} ${version} ${arch}`);\n        core.debug(`source dir: ${sourceDir}`);\n        if (!fs.statSync(sourceDir).isDirectory()) {\n            throw new Error('sourceDir is not a directory');\n        }\n        // Create the tool dir\n        const destPath = yield _createToolPath(tool, version, arch);\n        // copy each child item. do not move. move can fail on Windows\n        // due to anti-virus software having an open handle on a file.\n        for (const itemName of fs.readdirSync(sourceDir)) {\n            const s = path.join(sourceDir, itemName);\n            yield io.cp(s, destPath, { recursive: true });\n        }\n        // write .complete\n        _completeToolPath(tool, version, arch);\n        return destPath;\n    });\n}\nexports.cacheDir = cacheDir;\n/**\n * Caches a downloaded file (GUID) and installs it\n * into the tool cache with a given targetName\n *\n * @param sourceFile    the file to cache into tools.  Typically a result of downloadTool which is a guid.\n * @param targetFile    the name of the file name in the tools directory\n * @param tool          tool name\n * @param version       version of the tool.  semver format\n * @param arch          architecture of the tool.  Optional.  Defaults to machine architecture\n */\nfunction cacheFile(sourceFile, targetFile, tool, version, arch) {\n    return __awaiter(this, void 0, void 0, function* () {\n        version = semver.clean(version) || version;\n        arch = arch || os.arch();\n        core.debug(`Caching tool ${tool} ${version} ${arch}`);\n        core.debug(`source file: ${sourceFile}`);\n        if (!fs.statSync(sourceFile).isFile()) {\n            throw new Error('sourceFile is not a file');\n        }\n        // create the tool dir\n        const destFolder = yield _createToolPath(tool, version, arch);\n        // copy instead of move. move can fail on Windows due to\n        // anti-virus software having an open handle on a file.\n        const destPath = path.join(destFolder, targetFile);\n        core.debug(`destination file ${destPath}`);\n        yield io.cp(sourceFile, destPath);\n        // write .complete\n        _completeToolPath(tool, version, arch);\n        return destFolder;\n    });\n}\nexports.cacheFile = cacheFile;\n/**\n * Finds the path to a tool version in the local installed tool cache\n *\n * @param toolName      name of the tool\n * @param versionSpec   version of the tool\n * @param arch          optional arch.  defaults to arch of computer\n */\nfunction find(toolName, versionSpec, arch) {\n    if (!toolName) {\n        throw new Error('toolName parameter is required');\n    }\n    if (!versionSpec) {\n        throw new Error('versionSpec parameter is required');\n    }\n    arch = arch || os.arch();\n    // attempt to resolve an explicit version\n    if (!isExplicitVersion(versionSpec)) {\n        const localVersions = findAllVersions(toolName, arch);\n        const match = evaluateVersions(localVersions, versionSpec);\n        versionSpec = match;\n    }\n    // check for the explicit version in the cache\n    let toolPath = '';\n    if (versionSpec) {\n        versionSpec = semver.clean(versionSpec) || '';\n        const cachePath = path.join(_getCacheDirectory(), toolName, versionSpec, arch);\n        core.debug(`checking cache: ${cachePath}`);\n        if (fs.existsSync(cachePath) && fs.existsSync(`${cachePath}.complete`)) {\n            core.debug(`Found tool in cache ${toolName} ${versionSpec} ${arch}`);\n            toolPath = cachePath;\n        }\n        else {\n            core.debug('not found');\n        }\n    }\n    return toolPath;\n}\nexports.find = find;\n/**\n * Finds the paths to all versions of a tool that are installed in the local tool cache\n *\n * @param toolName  name of the tool\n * @param arch      optional arch.  defaults to arch of computer\n */\nfunction findAllVersions(toolName, arch) {\n    const versions = [];\n    arch = arch || os.arch();\n    const toolPath = path.join(_getCacheDirectory(), toolName);\n    if (fs.existsSync(toolPath)) {\n        const children = fs.readdirSync(toolPath);\n        for (const child of children) {\n            if (isExplicitVersion(child)) {\n                const fullPath = path.join(toolPath, child, arch || '');\n                if (fs.existsSync(fullPath) && fs.existsSync(`${fullPath}.complete`)) {\n                    versions.push(child);\n                }\n            }\n        }\n    }\n    return versions;\n}\nexports.findAllVersions = findAllVersions;\nfunction getManifestFromRepo(owner, repo, auth, branch = 'master') {\n    return __awaiter(this, void 0, void 0, function* () {\n        let releases = [];\n        const treeUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}`;\n        const http = new httpm.HttpClient('tool-cache');\n        const headers = {};\n        if (auth) {\n            core.debug('set auth');\n            headers.authorization = auth;\n        }\n        const response = yield http.getJson(treeUrl, headers);\n        if (!response.result) {\n            return releases;\n        }\n        let manifestUrl = '';\n        for (const item of response.result.tree) {\n            if (item.path === 'versions-manifest.json') {\n                manifestUrl = item.url;\n                break;\n            }\n        }\n        headers['accept'] = 'application/vnd.github.VERSION.raw';\n        let versionsRaw = yield (yield http.get(manifestUrl, headers)).readBody();\n        if (versionsRaw) {\n            // shouldn't be needed but protects against invalid json saved with BOM\n            versionsRaw = versionsRaw.replace(/^\\uFEFF/, '');\n            try {\n                releases = JSON.parse(versionsRaw);\n            }\n            catch (_a) {\n                core.debug('Invalid json');\n            }\n        }\n        return releases;\n    });\n}\nexports.getManifestFromRepo = getManifestFromRepo;\nfunction findFromManifest(versionSpec, stable, manifest, archFilter = os.arch()) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // wrap the internal impl\n        const match = yield mm._findMatch(versionSpec, stable, manifest, archFilter);\n        return match;\n    });\n}\nexports.findFromManifest = findFromManifest;\nfunction _createExtractFolder(dest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!dest) {\n            // create a temp dir\n            dest = path.join(_getTempDirectory(), v4_1.default());\n        }\n        yield io.mkdirP(dest);\n        return dest;\n    });\n}\nfunction _createToolPath(tool, version, arch) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const folderPath = path.join(_getCacheDirectory(), tool, semver.clean(version) || version, arch || '');\n        core.debug(`destination ${folderPath}`);\n        const markerPath = `${folderPath}.complete`;\n        yield io.rmRF(folderPath);\n        yield io.rmRF(markerPath);\n        yield io.mkdirP(folderPath);\n        return folderPath;\n    });\n}\nfunction _completeToolPath(tool, version, arch) {\n    const folderPath = path.join(_getCacheDirectory(), tool, semver.clean(version) || version, arch || '');\n    const markerPath = `${folderPath}.complete`;\n    fs.writeFileSync(markerPath, '');\n    core.debug('finished caching tool');\n}\n/**\n * Check if version string is explicit\n *\n * @param versionSpec      version string to check\n */\nfunction isExplicitVersion(versionSpec) {\n    const c = semver.clean(versionSpec) || '';\n    core.debug(`isExplicit: ${c}`);\n    const valid = semver.valid(c) != null;\n    core.debug(`explicit? ${valid}`);\n    return valid;\n}\nexports.isExplicitVersion = isExplicitVersion;\n/**\n * Get the highest satisfiying semantic version in `versions` which satisfies `versionSpec`\n *\n * @param versions        array of versions to evaluate\n * @param versionSpec     semantic version spec to satisfy\n */\nfunction evaluateVersions(versions, versionSpec) {\n    let version = '';\n    core.debug(`evaluating ${versions.length} versions`);\n    versions = versions.sort((a, b) => {\n        if (semver.gt(a, b)) {\n            return 1;\n        }\n        return -1;\n    });\n    for (let i = versions.length - 1; i >= 0; i--) {\n        const potential = versions[i];\n        const satisfied = semver.satisfies(potential, versionSpec);\n        if (satisfied) {\n            version = potential;\n            break;\n        }\n    }\n    if (version) {\n        core.debug(`matched: ${version}`);\n    }\n    else {\n        core.debug('match not found');\n    }\n    return version;\n}\nexports.evaluateVersions = evaluateVersions;\n/**\n * Gets RUNNER_TOOL_CACHE\n */\nfunction _getCacheDirectory() {\n    const cacheDirectory = process.env['RUNNER_TOOL_CACHE'] || '';\n    assert_1.ok(cacheDirectory, 'Expected RUNNER_TOOL_CACHE to be defined');\n    return cacheDirectory;\n}\n/**\n * Gets RUNNER_TEMP\n */\nfunction _getTempDirectory() {\n    const tempDirectory = process.env['RUNNER_TEMP'] || '';\n    assert_1.ok(tempDirectory, 'Expected RUNNER_TEMP to be defined');\n    return tempDirectory;\n}\n/**\n * Gets a global variable\n */\nfunction _getGlobal(key, defaultValue) {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    const value = global[key];\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    return value !== undefined ? value : defaultValue;\n}\n/**\n * Returns an array of unique values.\n * @param values Values to make unique.\n */\nfunction _unique(values) {\n    return Array.from(new Set(values));\n}\n//# sourceMappingURL=tool-cache.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOptions = void 0;\nconst core = __importStar(require(\"@actions/core\"));\n/**\n * Returns a copy with defaults filled in.\n */\nfunction getOptions(copy) {\n    const result = {\n        followSymbolicLinks: true,\n        implicitDescendants: true,\n        omitBrokenSymbolicLinks: true\n    };\n    if (copy) {\n        if (typeof copy.followSymbolicLinks === 'boolean') {\n            result.followSymbolicLinks = copy.followSymbolicLinks;\n            core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);\n        }\n        if (typeof copy.implicitDescendants === 'boolean') {\n            result.implicitDescendants = copy.implicitDescendants;\n            core.debug(`implicitDescendants '${result.implicitDescendants}'`);\n        }\n        if (typeof copy.omitBrokenSymbolicLinks === 'boolean') {\n            result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks;\n            core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);\n        }\n    }\n    return result;\n}\nexports.getOptions = getOptions;\n//# sourceMappingURL=internal-glob-options-helper.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;\nconst path = __importStar(require(\"path\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst IS_WINDOWS = process.platform === 'win32';\n/**\n * Similar to path.dirname except normalizes the path separators and slightly better handling for Windows UNC paths.\n *\n * For example, on Linux/macOS:\n * - `/               => /`\n * - `/hello          => /`\n *\n * For example, on Windows:\n * - `C:\\             => C:\\`\n * - `C:\\hello        => C:\\`\n * - `C:              => C:`\n * - `C:hello         => C:`\n * - `\\               => \\`\n * - `\\hello          => \\`\n * - `\\\\hello         => \\\\hello`\n * - `\\\\hello\\world   => \\\\hello\\world`\n */\nfunction dirname(p) {\n    // Normalize slashes and trim unnecessary trailing slash\n    p = safeTrimTrailingSeparator(p);\n    // Windows UNC root, e.g. \\\\hello or \\\\hello\\world\n    if (IS_WINDOWS && /^\\\\\\\\[^\\\\]+(\\\\[^\\\\]+)?$/.test(p)) {\n        return p;\n    }\n    // Get dirname\n    let result = path.dirname(p);\n    // Trim trailing slash for Windows UNC root, e.g. \\\\hello\\world\\\n    if (IS_WINDOWS && /^\\\\\\\\[^\\\\]+\\\\[^\\\\]+\\\\$/.test(result)) {\n        result = safeTrimTrailingSeparator(result);\n    }\n    return result;\n}\nexports.dirname = dirname;\n/**\n * Roots the path if not already rooted. On Windows, relative roots like `\\`\n * or `C:` are expanded based on the current working directory.\n */\nfunction ensureAbsoluteRoot(root, itemPath) {\n    assert_1.default(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);\n    assert_1.default(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);\n    // Already rooted\n    if (hasAbsoluteRoot(itemPath)) {\n        return itemPath;\n    }\n    // Windows\n    if (IS_WINDOWS) {\n        // Check for itemPath like C: or C:foo\n        if (itemPath.match(/^[A-Z]:[^\\\\/]|^[A-Z]:$/i)) {\n            let cwd = process.cwd();\n            assert_1.default(cwd.match(/^[A-Z]:\\\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);\n            // Drive letter matches cwd? Expand to cwd\n            if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {\n                // Drive only, e.g. C:\n                if (itemPath.length === 2) {\n                    // Preserve specified drive letter case (upper or lower)\n                    return `${itemPath[0]}:\\\\${cwd.substr(3)}`;\n                }\n                // Drive + path, e.g. C:foo\n                else {\n                    if (!cwd.endsWith('\\\\')) {\n                        cwd += '\\\\';\n                    }\n                    // Preserve specified drive letter case (upper or lower)\n                    return `${itemPath[0]}:\\\\${cwd.substr(3)}${itemPath.substr(2)}`;\n                }\n            }\n            // Different drive\n            else {\n                return `${itemPath[0]}:\\\\${itemPath.substr(2)}`;\n            }\n        }\n        // Check for itemPath like \\ or \\foo\n        else if (normalizeSeparators(itemPath).match(/^\\\\$|^\\\\[^\\\\]/)) {\n            const cwd = process.cwd();\n            assert_1.default(cwd.match(/^[A-Z]:\\\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);\n            return `${cwd[0]}:\\\\${itemPath.substr(1)}`;\n        }\n    }\n    assert_1.default(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);\n    // Otherwise ensure root ends with a separator\n    if (root.endsWith('/') || (IS_WINDOWS && root.endsWith('\\\\'))) {\n        // Intentionally empty\n    }\n    else {\n        // Append separator\n        root += path.sep;\n    }\n    return root + itemPath;\n}\nexports.ensureAbsoluteRoot = ensureAbsoluteRoot;\n/**\n * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:\n * `\\\\hello\\share` and `C:\\hello` (and using alternate separator).\n */\nfunction hasAbsoluteRoot(itemPath) {\n    assert_1.default(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);\n    // Normalize separators\n    itemPath = normalizeSeparators(itemPath);\n    // Windows\n    if (IS_WINDOWS) {\n        // E.g. \\\\hello\\share or C:\\hello\n        return itemPath.startsWith('\\\\\\\\') || /^[A-Z]:\\\\/i.test(itemPath);\n    }\n    // E.g. /hello\n    return itemPath.startsWith('/');\n}\nexports.hasAbsoluteRoot = hasAbsoluteRoot;\n/**\n * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:\n * `\\`, `\\hello`, `\\\\hello\\share`, `C:`, and `C:\\hello` (and using alternate separator).\n */\nfunction hasRoot(itemPath) {\n    assert_1.default(itemPath, `isRooted parameter 'itemPath' must not be empty`);\n    // Normalize separators\n    itemPath = normalizeSeparators(itemPath);\n    // Windows\n    if (IS_WINDOWS) {\n        // E.g. \\ or \\hello or \\\\hello\n        // E.g. C: or C:\\hello\n        return itemPath.startsWith('\\\\') || /^[A-Z]:/i.test(itemPath);\n    }\n    // E.g. /hello\n    return itemPath.startsWith('/');\n}\nexports.hasRoot = hasRoot;\n/**\n * Removes redundant slashes and converts `/` to `\\` on Windows\n */\nfunction normalizeSeparators(p) {\n    p = p || '';\n    // Windows\n    if (IS_WINDOWS) {\n        // Convert slashes on Windows\n        p = p.replace(/\\//g, '\\\\');\n        // Remove redundant slashes\n        const isUnc = /^\\\\\\\\+[^\\\\]/.test(p); // e.g. \\\\hello\n        return (isUnc ? '\\\\' : '') + p.replace(/\\\\\\\\+/g, '\\\\'); // preserve leading \\\\ for UNC\n    }\n    // Remove redundant slashes\n    return p.replace(/\\/\\/+/g, '/');\n}\nexports.normalizeSeparators = normalizeSeparators;\n/**\n * Normalizes the path separators and trims the trailing separator (when safe).\n * For example, `/foo/ => /foo` but `/ => /`\n */\nfunction safeTrimTrailingSeparator(p) {\n    // Short-circuit if empty\n    if (!p) {\n        return '';\n    }\n    // Normalize separators\n    p = normalizeSeparators(p);\n    // No trailing slash\n    if (!p.endsWith(path.sep)) {\n        return p;\n    }\n    // Check '/' on Linux/macOS and '\\' on Windows\n    if (p === path.sep) {\n        return p;\n    }\n    // On Windows check if drive root. E.g. C:\\\n    if (IS_WINDOWS && /^[A-Z]:\\\\$/i.test(p)) {\n        return p;\n    }\n    // Otherwise trim trailing slash\n    return p.substr(0, p.length - 1);\n}\nexports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;\n//# sourceMappingURL=internal-path-helper.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.partialMatch = exports.match = exports.getSearchPaths = void 0;\nconst pathHelper = __importStar(require(\"./internal-path-helper\"));\nconst internal_match_kind_1 = require(\"./internal-match-kind\");\nconst IS_WINDOWS = process.platform === 'win32';\n/**\n * Given an array of patterns, returns an array of paths to search.\n * Duplicates and paths under other included paths are filtered out.\n */\nfunction getSearchPaths(patterns) {\n    // Ignore negate patterns\n    patterns = patterns.filter(x => !x.negate);\n    // Create a map of all search paths\n    const searchPathMap = {};\n    for (const pattern of patterns) {\n        const key = IS_WINDOWS\n            ? pattern.searchPath.toUpperCase()\n            : pattern.searchPath;\n        searchPathMap[key] = 'candidate';\n    }\n    const result = [];\n    for (const pattern of patterns) {\n        // Check if already included\n        const key = IS_WINDOWS\n            ? pattern.searchPath.toUpperCase()\n            : pattern.searchPath;\n        if (searchPathMap[key] === 'included') {\n            continue;\n        }\n        // Check for an ancestor search path\n        let foundAncestor = false;\n        let tempKey = key;\n        let parent = pathHelper.dirname(tempKey);\n        while (parent !== tempKey) {\n            if (searchPathMap[parent]) {\n                foundAncestor = true;\n                break;\n            }\n            tempKey = parent;\n            parent = pathHelper.dirname(tempKey);\n        }\n        // Include the search pattern in the result\n        if (!foundAncestor) {\n            result.push(pattern.searchPath);\n            searchPathMap[key] = 'included';\n        }\n    }\n    return result;\n}\nexports.getSearchPaths = getSearchPaths;\n/**\n * Matches the patterns against the path\n */\nfunction match(patterns, itemPath) {\n    let result = internal_match_kind_1.MatchKind.None;\n    for (const pattern of patterns) {\n        if (pattern.negate) {\n            result &= ~pattern.match(itemPath);\n        }\n        else {\n            result |= pattern.match(itemPath);\n        }\n    }\n    return result;\n}\nexports.match = match;\n/**\n * Checks whether to descend further into the directory\n */\nfunction partialMatch(patterns, itemPath) {\n    return patterns.some(x => !x.negate && x.partialMatch(itemPath));\n}\nexports.partialMatch = partialMatch;\n//# sourceMappingURL=internal-pattern-helper.js.map","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = (function () { try { return require('path') } catch (e) {}}()) || {\n  sep: '/'\n}\nminimatch.sep = path.sep\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  b = b || {}\n  var t = {}\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n  m.Minimatch.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options)).Minimatch\n  }\n\n  m.filter = function filter (pattern, options) {\n    return orig.filter(pattern, ext(def, options))\n  }\n\n  m.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options))\n  }\n\n  m.makeRe = function makeRe (pattern, options) {\n    return orig.makeRe(pattern, ext(def, options))\n  }\n\n  m.braceExpand = function braceExpand (pattern, options) {\n    return orig.braceExpand(pattern, ext(def, options))\n  }\n\n  m.match = function (list, pattern, options) {\n    return orig.match(list, pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (!options.allowWindowsEscape && path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n  this.partial = !!options.partial\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\nvar MAX_PATTERN_LENGTH = 1024 * 64\nvar assertValidPattern = function (pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  assertValidPattern(pattern)\n\n  var options = this.options\n\n  // shortcuts\n  if (pattern === '**') {\n    if (!options.noglobstar)\n      return GLOBSTAR\n    else\n      pattern = '*'\n  }\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      /* istanbul ignore next */\n      case '/': {\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n      }\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        // split where the last [ was, make sure we don't have\n        // an invalid re. if so, re-walk the contents of the\n        // would-be class to re-translate any characters that\n        // were passed through as-is\n        // TODO: It would probably be faster to determine this\n        // without a try/catch and a new RegExp, but it's tricky\n        // to do safely.  For now, this is safe and works.\n        var cs = pattern.substring(classStart + 1, i)\n        try {\n          RegExp('[' + cs + ']')\n        } catch (er) {\n          // not a valid class!\n          var sp = this.parse(cs, SUBPARSE)\n          re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n          hasMagic = hasMagic || sp[1]\n          inClass = false\n          continue\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '[': case '.': case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) /* istanbul ignore next - should be impossible */ {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) /* istanbul ignore next - should be impossible */ {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = function match (f, partial) {\n  if (typeof partial === 'undefined') partial = this.partial\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    /* istanbul ignore if */\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      /* istanbul ignore if */\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      hit = f === p\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else /* istanbul ignore else */ if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    return (fi === fl - 1) && (file[fi] === '')\n  }\n\n  // should be unreachable.\n  /* istanbul ignore next */\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.create = void 0;\nconst internal_globber_1 = require(\"./internal-globber\");\n/**\n * Constructs a globber\n *\n * @param patterns  Patterns separated by newlines\n * @param options   Glob options\n */\nfunction create(patterns, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield internal_globber_1.DefaultGlobber.create(patterns, options);\n    });\n}\nexports.create = create;\n//# sourceMappingURL=glob.js.map","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isGhes = exports.assertDefined = exports.getGnuTarPathOnWindows = exports.getCacheFileName = exports.getCompressionMethod = exports.unlinkFile = exports.resolvePaths = exports.getArchiveFileSizeInBytes = exports.createTempDirectory = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst exec = __importStar(require(\"@actions/exec\"));\nconst glob = __importStar(require(\"@actions/glob\"));\nconst io = __importStar(require(\"@actions/io\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst semver = __importStar(require(\"semver\"));\nconst util = __importStar(require(\"util\"));\nconst uuid_1 = require(\"uuid\");\nconst constants_1 = require(\"./constants\");\n// From https://github.com/actions/toolkit/blob/main/packages/tool-cache/src/tool-cache.ts#L23\nfunction createTempDirectory() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const IS_WINDOWS = process.platform === 'win32';\n        let tempDirectory = process.env['RUNNER_TEMP'] || '';\n        if (!tempDirectory) {\n            let baseLocation;\n            if (IS_WINDOWS) {\n                // On Windows use the USERPROFILE env variable\n                baseLocation = process.env['USERPROFILE'] || 'C:\\\\';\n            }\n            else {\n                if (process.platform === 'darwin') {\n                    baseLocation = '/Users';\n                }\n                else {\n                    baseLocation = '/home';\n                }\n            }\n            tempDirectory = path.join(baseLocation, 'actions', 'temp');\n        }\n        const dest = path.join(tempDirectory, (0, uuid_1.v4)());\n        yield io.mkdirP(dest);\n        return dest;\n    });\n}\nexports.createTempDirectory = createTempDirectory;\nfunction getArchiveFileSizeInBytes(filePath) {\n    return fs.statSync(filePath).size;\n}\nexports.getArchiveFileSizeInBytes = getArchiveFileSizeInBytes;\nfunction resolvePaths(patterns) {\n    var _a, e_1, _b, _c;\n    var _d;\n    return __awaiter(this, void 0, void 0, function* () {\n        const paths = [];\n        const workspace = (_d = process.env['GITHUB_WORKSPACE']) !== null && _d !== void 0 ? _d : process.cwd();\n        const globber = yield glob.create(patterns.join('\\n'), {\n            implicitDescendants: false\n        });\n        try {\n            for (var _e = true, _f = __asyncValues(globber.globGenerator()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {\n                _c = _g.value;\n                _e = false;\n                const file = _c;\n                const relativeFile = path\n                    .relative(workspace, file)\n                    .replace(new RegExp(`\\\\${path.sep}`, 'g'), '/');\n                core.debug(`Matched: ${relativeFile}`);\n                // Paths are made relative so the tar entries are all relative to the root of the workspace.\n                if (relativeFile === '') {\n                    // path.relative returns empty string if workspace and file are equal\n                    paths.push('.');\n                }\n                else {\n                    paths.push(`${relativeFile}`);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return paths;\n    });\n}\nexports.resolvePaths = resolvePaths;\nfunction unlinkFile(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return util.promisify(fs.unlink)(filePath);\n    });\n}\nexports.unlinkFile = unlinkFile;\nfunction getVersion(app, additionalArgs = []) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let versionOutput = '';\n        additionalArgs.push('--version');\n        core.debug(`Checking ${app} ${additionalArgs.join(' ')}`);\n        try {\n            yield exec.exec(`${app}`, additionalArgs, {\n                ignoreReturnCode: true,\n                silent: true,\n                listeners: {\n                    stdout: (data) => (versionOutput += data.toString()),\n                    stderr: (data) => (versionOutput += data.toString())\n                }\n            });\n        }\n        catch (err) {\n            core.debug(err.message);\n        }\n        versionOutput = versionOutput.trim();\n        core.debug(versionOutput);\n        return versionOutput;\n    });\n}\n// Use zstandard if possible to maximize cache performance\nfunction getCompressionMethod() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const versionOutput = yield getVersion('zstd', ['--quiet']);\n        const version = semver.clean(versionOutput);\n        core.debug(`zstd version: ${version}`);\n        if (versionOutput === '') {\n            return constants_1.CompressionMethod.Gzip;\n        }\n        else {\n            return constants_1.CompressionMethod.ZstdWithoutLong;\n        }\n    });\n}\nexports.getCompressionMethod = getCompressionMethod;\nfunction getCacheFileName(compressionMethod) {\n    return compressionMethod === constants_1.CompressionMethod.Gzip\n        ? constants_1.CacheFilename.Gzip\n        : constants_1.CacheFilename.Zstd;\n}\nexports.getCacheFileName = getCacheFileName;\nfunction getGnuTarPathOnWindows() {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (fs.existsSync(constants_1.GnuTarPathOnWindows)) {\n            return constants_1.GnuTarPathOnWindows;\n        }\n        const versionOutput = yield getVersion('tar');\n        return versionOutput.toLowerCase().includes('gnu tar') ? io.which('tar') : '';\n    });\n}\nexports.getGnuTarPathOnWindows = getGnuTarPathOnWindows;\nfunction assertDefined(name, value) {\n    if (value === undefined) {\n        throw Error(`Expected ${name} but value was undefiend`);\n    }\n    return value;\n}\nexports.assertDefined = assertDefined;\nfunction isGhes() {\n    const ghUrl = new URL(process.env['GITHUB_SERVER_URL'] || 'https://github.com');\n    const hostname = ghUrl.hostname.trimEnd().toUpperCase();\n    const isGitHubHost = hostname === 'GITHUB.COM';\n    const isGheHost = hostname.endsWith('.GHE.COM') || hostname.endsWith('.GHE.LOCALHOST');\n    return !isGitHubHost && !isGheHost;\n}\nexports.isGhes = isGhes;\n//# sourceMappingURL=cacheUtils.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies) {\n        var _a;\n        this._policies = [];\n        this._policies = (_a = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a !== void 0 ? _a : [];\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options,\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         * 5. Sign Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        function createPhase(name) {\n            return {\n                name,\n                policies: new Set(),\n                hasRun: false,\n                hasAfterPolicies: false,\n            };\n        }\n        // Track policies for each phase.\n        const serializePhase = createPhase(\"Serialize\");\n        const noPhase = createPhase(\"None\");\n        const deserializePhase = createPhase(\"Deserialize\");\n        const retryPhase = createPhase(\"Retry\");\n        const signPhase = createPhase(\"Sign\");\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n        // Small helper function to map phase name to each Phase\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else if (phase === \"Sign\") {\n                return signPhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set(),\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n                node.afterPhase.hasAfterPolicies = true;\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.policies.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            phase.hasRun = true;\n            // Sets iterate in insertion order\n            for (const node of phase.policies) {\n                if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    // Even if the phase is empty, we should wait for it\n                    // to be walked to avoid re-ordering policies.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.policies.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                // if the phase isn't complete\n                if (phase.policies.size > 0 && phase !== noPhase) {\n                    if (!noPhase.hasRun) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n                if (phase.hasAfterPolicies) {\n                    // Run any policies unblocked by this phase\n                    walkPhase(noPhase);\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        let iteration = 0;\n        while (policyMap.size > 0) {\n            iteration++;\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time\n            // after the first full pass.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength && iteration > 1) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nexport function createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n//# sourceMappingURL=pipeline.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { EOL } from \"node:os\";\nimport util from \"node:util\";\nimport * as process from \"node:process\";\nexport function log(message, ...args) {\n    process.stderr.write(`${util.format(message, ...args)}${EOL}`);\n}\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log.js\";\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\nexport default debugObj;\n//# sourceMappingURL=debug.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debug from \"./debug.js\";\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n    debug.log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = debug.disable();\n        debug.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nexport function createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject) => {\n        function rejectOnAbort() {\n            reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x) => {\n                removeListeners();\n                resolve(x);\n            }, (x) => {\n                removeListeners();\n                reject(x);\n            });\n        }\n        catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n}\n//# sourceMappingURL=createAbortablePromise.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n//# sourceMappingURL=random.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\nimport { getRandomIntegerInclusive } from \"./random.js\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return createAbortablePromise((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n//# sourceMappingURL=delay.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n//# sourceMappingURL=object.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObject } from \"./object.js\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n    if (isObject(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n//# sourceMappingURL=error.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a;\nimport { randomUUID as v4RandomUUID } from \"crypto\";\n// NOTE: This is a workaround until we can use `globalThis.crypto.randomUUID` in Node.js 19+.\nconst uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : v4RandomUUID;\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n    return uuidFunction();\n}\n//# sourceMappingURL=uuidUtils.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n    return Buffer.from(bytes).toString(format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n    return Buffer.from(value, format);\n}\n//# sourceMappingURL=bytesEncoding.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger as coreLogger } from \"../log.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n//# sourceMappingURL=logPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n//# sourceMappingURL=redirectPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as os from \"node:os\";\nimport * as process from \"node:process\";\n/**\n * @internal\n */\nexport function getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nexport async function setPlatformSpecificData(map) {\n    if (process && process.versions) {\n        const versions = process.versions;\n        if (versions.bun) {\n            map.set(\"Bun\", versions.bun);\n        }\n        else if (versions.deno) {\n            map.set(\"Deno\", versions.deno);\n        }\n        else if (versions.node) {\n            map.set(\"Node\", versions.node);\n        }\n    }\n    map.set(\"OS\", `(${os.arch()}-${os.type()}-${os.release()})`);\n}\n//# sourceMappingURL=userAgentPlatform.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform.js\";\nimport { SDK_VERSION } from \"../constants.js\";\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nexport function getUserAgentHeaderName() {\n    return getHeaderName();\n}\n/**\n * @internal\n */\nexport async function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n    await setPlatformSpecificData(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n//# sourceMappingURL=userAgent.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent.js\";\nconst UserAgentHeaderName = getUserAgentHeaderName();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options = {}) {\n    const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=userAgentPolicy.js.map","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport function isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nexport function isWebReadableStream(x) {\n    return Boolean(x &&\n        typeof x.getReader === \"function\" &&\n        typeof x.tee === \"function\");\n}\nexport function isReadableStream(x) {\n    return isNodeReadableStream(x) || isWebReadableStream(x);\n}\nexport function isBlob(x) {\n    return typeof x.stream === \"function\";\n}\n//# sourceMappingURL=typeGuards.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNodeLike } from \"@azure/core-util\";\nimport { isNodeReadableStream } from \"./typeGuards.js\";\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\nfunction hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nexport function getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob.stream();\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if (isNodeReadableStream(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n//# sourceMappingURL=file.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { Readable } from \"node:stream\";\nimport { isBlob } from \"./typeGuards.js\";\nimport { getRawContent } from \"./file.js\";\nfunction streamAsyncIterator() {\n    return __asyncGenerator(this, arguments, function* streamAsyncIterator_1() {\n        const reader = this.getReader();\n        try {\n            while (true) {\n                const { done, value } = yield __await(reader.read());\n                if (done) {\n                    return yield __await(void 0);\n                }\n                yield yield __await(value);\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    });\n}\nfunction makeAsyncIterable(webStream) {\n    if (!webStream[Symbol.asyncIterator]) {\n        webStream[Symbol.asyncIterator] = streamAsyncIterator.bind(webStream);\n    }\n    if (!webStream.values) {\n        webStream.values = streamAsyncIterator.bind(webStream);\n    }\n}\nfunction ensureNodeStream(stream) {\n    if (stream instanceof ReadableStream) {\n        makeAsyncIterable(stream);\n        return Readable.fromWeb(stream);\n    }\n    else {\n        return stream;\n    }\n}\nfunction toStream(source) {\n    if (source instanceof Uint8Array) {\n        return Readable.from(Buffer.from(source));\n    }\n    else if (isBlob(source)) {\n        return toStream(getRawContent(source));\n    }\n    else {\n        return ensureNodeStream(source);\n    }\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(sources) {\n    return function () {\n        const streams = sources.map((x) => (typeof x === \"function\" ? x() : x)).map(toStream);\n        return Readable.from((function () {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_1, _b, _c;\n                for (const stream of streams) {\n                    try {\n                        for (var _d = true, stream_1 = (e_1 = void 0, __asyncValues(stream)), stream_1_1; stream_1_1 = yield __await(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {\n                            _c = stream_1_1.value;\n                            _d = false;\n                            const chunk = _c;\n                            yield yield __await(chunk);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (!_d && !_a && (_b = stream_1.return)) yield __await(_b.call(stream_1));\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n            });\n        })());\n    };\n}\n//# sourceMappingURL=concat.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { randomUUID, stringToUint8Array } from \"@azure/core-util\";\nimport { concat } from \"../util/concat.js\";\nimport { isBlob } from \"../util/typeGuards.js\";\nfunction generateBoundary() {\n    return `----AzSDKFormBoundary${randomUUID()}`;\n}\nfunction encodeHeaders(headers) {\n    let result = \"\";\n    for (const [key, value] of headers) {\n        result += `${key}: ${value}\\r\\n`;\n    }\n    return result;\n}\nfunction getLength(source) {\n    if (source instanceof Uint8Array) {\n        return source.byteLength;\n    }\n    else if (isBlob(source)) {\n        // if was created using createFile then -1 means we have an unknown size\n        return source.size === -1 ? undefined : source.size;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction getTotalLength(sources) {\n    let total = 0;\n    for (const source of sources) {\n        const partLength = getLength(source);\n        if (partLength === undefined) {\n            return undefined;\n        }\n        else {\n            total += partLength;\n        }\n    }\n    return total;\n}\nasync function buildRequestBody(request, parts, boundary) {\n    const sources = [\n        stringToUint8Array(`--${boundary}`, \"utf-8\"),\n        ...parts.flatMap((part) => [\n            stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n            stringToUint8Array(encodeHeaders(part.headers), \"utf-8\"),\n            stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n            part.body,\n            stringToUint8Array(`\\r\\n--${boundary}`, \"utf-8\"),\n        ]),\n        stringToUint8Array(\"--\\r\\n\\r\\n\", \"utf-8\"),\n    ];\n    const contentLength = getTotalLength(sources);\n    if (contentLength) {\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    request.body = await concat(sources);\n}\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = \"multipartPolicy\";\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);\nfunction assertValidBoundary(boundary) {\n    if (boundary.length > maxBoundaryLength) {\n        throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n    }\n    if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n        throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n    }\n}\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy() {\n    return {\n        name: multipartPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.multipartBody) {\n                return next(request);\n            }\n            if (request.body) {\n                throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n            }\n            let boundary = request.multipartBody.boundary;\n            const contentTypeHeader = (_a = request.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"multipart/mixed\";\n            const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n            if (!parsedHeader) {\n                throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);\n            }\n            const [, contentType, parsedBoundary] = parsedHeader;\n            if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n                throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);\n            }\n            boundary !== null && boundary !== void 0 ? boundary : (boundary = parsedBoundary);\n            if (boundary) {\n                assertValidBoundary(boundary);\n            }\n            else {\n                boundary = generateBoundary();\n            }\n            request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n            await buildRequestBody(request, request.multipartBody.parts, boundary);\n            request.multipartBody = undefined;\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=multipartPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nexport const decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nexport function decompressResponsePolicy() {\n    return {\n        name: decompressResponsePolicyName,\n        async sendRequest(request, next) {\n            // HEAD requests have no body\n            if (request.method !== \"HEAD\") {\n                request.headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=decompressResponsePolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AbortError } from \"@azure/abort-controller\";\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nexport function delay(delayInMs, value, options) {\n    return new Promise((resolve, reject) => {\n        let timer = undefined;\n        let onAborted = undefined;\n        const rejectOnAbort = () => {\n            return reject(new AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));\n        };\n        const removeListeners = () => {\n            if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n                options.abortSignal.removeEventListener(\"abort\", onAborted);\n            }\n        };\n        onAborted = () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            removeListeners();\n            return rejectOnAbort();\n        };\n        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        timer = setTimeout(() => {\n            removeListeners();\n            resolve(value);\n        }, delayInMs);\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", onAborted);\n        }\n    });\n}\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nexport function parseHeaderValueAsNumber(response, headerName) {\n    const value = response.headers.get(headerName);\n    if (!value)\n        return;\n    const valueAsNum = Number(value);\n    if (Number.isNaN(valueAsNum))\n        return;\n    return valueAsNum;\n}\n//# sourceMappingURL=helpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { parseHeaderValueAsNumber } from \"../util/helpers.js\";\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = parseHeaderValueAsNumber(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n//# sourceMappingURL=throttlingRetryStrategy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy.js\";\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    let retryAfterInMs = retryInterval;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError && !isExponential) {\n                return { errorToThrow: responseError };\n            }\n            // Exponentially increase the delay each time\n            const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n            // Don't let the delay exceed the maximum\n            const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n            // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n            // that retries across multiple clients don't occur simultaneously.\n            retryAfterInMs =\n                clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n            return { retryAfterInMs };\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\" ||\n        err.code === \"ENOTFOUND\");\n}\n//# sourceMappingURL=exponentialRetryStrategy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"../util/helpers.js\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(strategies, options = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }) {\n    const logger = options.logger || retryPolicyLogger;\n    return {\n        name: retryPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            let response;\n            let responseError;\n            let retryCount = -1;\n            // eslint-disable-next-line no-constant-condition\n            retryRequest: while (true) {\n                retryCount += 1;\n                response = undefined;\n                responseError = undefined;\n                try {\n                    logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n                    response = await next(request);\n                    logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n                }\n                catch (e) {\n                    logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n                    // RestErrors are valid targets for the retry strategies.\n                    // If none of the retry strategies can work with them, they will be thrown later in this policy.\n                    // If the received error is not a RestError, it is immediately thrown.\n                    responseError = e;\n                    if (!e || responseError.name !== \"RestError\") {\n                        throw e;\n                    }\n                    response = responseError.response;\n                }\n                if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    logger.error(`Retry ${retryCount}: Request aborted.`);\n                    const abortError = new AbortError();\n                    throw abortError;\n                }\n                if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_POLICY_COUNT)) {\n                    logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);\n                    if (responseError) {\n                        throw responseError;\n                    }\n                    else if (response) {\n                        return response;\n                    }\n                    else {\n                        throw new Error(\"Maximum retries reached with no response or error to throw\");\n                    }\n                }\n                logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n                strategiesLoop: for (const strategy of strategies) {\n                    const strategyLogger = strategy.logger || retryPolicyLogger;\n                    strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n                    const modifiers = strategy.retry({\n                        retryCount,\n                        response,\n                        responseError,\n                    });\n                    if (modifiers.skipStrategy) {\n                        strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n                        continue strategiesLoop;\n                    }\n                    const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n                    if (errorToThrow) {\n                        strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);\n                        throw errorToThrow;\n                    }\n                    if (retryAfterInMs || retryAfterInMs === 0) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);\n                        await delay(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n                        continue retryRequest;\n                    }\n                    if (redirectTo) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);\n                        request.url = redirectTo;\n                        continue retryRequest;\n                    }\n                }\n                if (responseError) {\n                    logger.info(`None of the retry strategies could work with the received error. Throwing it.`);\n                    throw responseError;\n                }\n                if (response) {\n                    logger.info(`None of the retry strategies could work with the received response. Returning it.`);\n                    return response;\n                }\n                // If all the retries skip and there's no response,\n                // we're still in the retry loop, so a new request will be sent\n                // until `maxRetries` is reached.\n            }\n        },\n    };\n}\n//# sourceMappingURL=retryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nexport function defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=defaultRetryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n//# sourceMappingURL=httpHeaders.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isNodeLike, stringToUint8Array } from \"@azure/core-util\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\nfunction formDataToFormDataMap(formData) {\n    var _a;\n    const formDataMap = {};\n    for (const [key, value] of formData.entries()) {\n        (_a = formDataMap[key]) !== null && _a !== void 0 ? _a : (formDataMap[key] = []);\n        formDataMap[key].push(value);\n    }\n    return formDataMap;\n}\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n                request.formData = formDataToFormDataMap(request.body);\n                request.body = undefined;\n            }\n            if (request.formData) {\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = wwwFormUrlEncode(request.formData);\n                }\n                else {\n                    await prepareFormData(request.formData, request);\n                }\n                request.formData = undefined;\n            }\n            return next(request);\n        },\n    };\n}\nfunction wwwFormUrlEncode(formData) {\n    const urlSearchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(formData)) {\n        if (Array.isArray(value)) {\n            for (const subValue of value) {\n                urlSearchParams.append(key, subValue.toString());\n            }\n        }\n        else {\n            urlSearchParams.append(key, value.toString());\n        }\n    }\n    return urlSearchParams.toString();\n}\nasync function prepareFormData(formData, request) {\n    // validate content type (multipart/form-data)\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n        // content type is specified and is not multipart/form-data. Exit.\n        return;\n    }\n    request.headers.set(\"Content-Type\", contentType !== null && contentType !== void 0 ? contentType : \"multipart/form-data\");\n    // set body to MultipartRequestBody using content from FormDataMap\n    const parts = [];\n    for (const [fieldName, values] of Object.entries(formData)) {\n        for (const value of Array.isArray(values) ? values : [values]) {\n            if (typeof value === \"string\") {\n                parts.push({\n                    headers: createHttpHeaders({\n                        \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n                    }),\n                    body: stringToUint8Array(value, \"utf-8\"),\n                });\n            }\n            else if (value === undefined || value === null || typeof value !== \"object\") {\n                throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);\n            }\n            else {\n                // using || instead of ?? here since if value.name is empty we should create a file name\n                const fileName = value.name || \"blob\";\n                const headers = createHttpHeaders();\n                headers.set(\"Content-Disposition\", `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`);\n                // again, || is used since an empty value.type means the content type is unset\n                headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n                parts.push({\n                    headers,\n                    body: value,\n                });\n            }\n        }\n    }\n    request.multipartBody = { parts };\n}\n//# sourceMappingURL=formDataPolicy.js.map","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.req = exports.json = exports.toBuffer = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nasync function toBuffer(stream) {\n    let length = 0;\n    const chunks = [];\n    for await (const chunk of stream) {\n        length += chunk.length;\n        chunks.push(chunk);\n    }\n    return Buffer.concat(chunks, length);\n}\nexports.toBuffer = toBuffer;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function json(stream) {\n    const buf = await toBuffer(stream);\n    const str = buf.toString('utf8');\n    try {\n        return JSON.parse(str);\n    }\n    catch (_err) {\n        const err = _err;\n        err.message += ` (input: ${str})`;\n        throw err;\n    }\n}\nexports.json = json;\nfunction req(url, opts = {}) {\n    const href = typeof url === 'string' ? url : url.href;\n    const req = (href.startsWith('https:') ? https : http).request(url, opts);\n    const promise = new Promise((resolve, reject) => {\n        req\n            .once('response', resolve)\n            .once('error', reject)\n            .end();\n    });\n    req.then = promise.then.bind(promise);\n    return req;\n}\nexports.req = req;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseProxyResponse = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)('https-proxy-agent:parse-proxy-response');\nfunction parseProxyResponse(socket) {\n    return new Promise((resolve, reject) => {\n        // we need to buffer any HTTP traffic that happens with the proxy before we get\n        // the CONNECT response, so that if the response is anything other than an \"200\"\n        // response code, then we can re-play the \"data\" events on the socket once the\n        // HTTP parser is hooked up...\n        let buffersLength = 0;\n        const buffers = [];\n        function read() {\n            const b = socket.read();\n            if (b)\n                ondata(b);\n            else\n                socket.once('readable', read);\n        }\n        function cleanup() {\n            socket.removeListener('end', onend);\n            socket.removeListener('error', onerror);\n            socket.removeListener('readable', read);\n        }\n        function onend() {\n            cleanup();\n            debug('onend');\n            reject(new Error('Proxy connection ended before receiving CONNECT response'));\n        }\n        function onerror(err) {\n            cleanup();\n            debug('onerror %o', err);\n            reject(err);\n        }\n        function ondata(b) {\n            buffers.push(b);\n            buffersLength += b.length;\n            const buffered = Buffer.concat(buffers, buffersLength);\n            const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n            if (endOfHeaders === -1) {\n                // keep buffering\n                debug('have not received end of HTTP headers yet...');\n                read();\n                return;\n            }\n            const headerParts = buffered\n                .slice(0, endOfHeaders)\n                .toString('ascii')\n                .split('\\r\\n');\n            const firstLine = headerParts.shift();\n            if (!firstLine) {\n                socket.destroy();\n                return reject(new Error('No header received from proxy CONNECT response'));\n            }\n            const firstLineParts = firstLine.split(' ');\n            const statusCode = +firstLineParts[1];\n            const statusText = firstLineParts.slice(2).join(' ');\n            const headers = {};\n            for (const header of headerParts) {\n                if (!header)\n                    continue;\n                const firstColon = header.indexOf(':');\n                if (firstColon === -1) {\n                    socket.destroy();\n                    return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n                }\n                const key = header.slice(0, firstColon).toLowerCase();\n                const value = header.slice(firstColon + 1).trimStart();\n                const current = headers[key];\n                if (typeof current === 'string') {\n                    headers[key] = [current, value];\n                }\n                else if (Array.isArray(current)) {\n                    current.push(value);\n                }\n                else {\n                    headers[key] = value;\n                }\n            }\n            debug('got proxy server response: %o %o', firstLine, headers);\n            cleanup();\n            resolve({\n                connect: {\n                    statusCode,\n                    statusText,\n                    headers,\n                },\n                buffered,\n            });\n        }\n        socket.on('error', onerror);\n        socket.on('end', onend);\n        read();\n    });\n}\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpsProxyAgent = void 0;\nconst net = __importStar(require(\"net\"));\nconst tls = __importStar(require(\"tls\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst url_1 = require(\"url\");\nconst parse_proxy_response_1 = require(\"./parse-proxy-response\");\nconst debug = (0, debug_1.default)('https-proxy-agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n    constructor(proxy, opts) {\n        super(opts);\n        this.options = { path: undefined };\n        this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy;\n        this.proxyHeaders = opts?.headers ?? {};\n        debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n        // Trim off the brackets from IPv6 addresses\n        const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n        const port = this.proxy.port\n            ? parseInt(this.proxy.port, 10)\n            : this.proxy.protocol === 'https:'\n                ? 443\n                : 80;\n        this.connectOpts = {\n            // Attempt to negotiate http/1.1 for proxy servers that support http/2\n            ALPNProtocols: ['http/1.1'],\n            ...(opts ? omit(opts, 'headers') : null),\n            host,\n            port,\n        };\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     */\n    async connect(req, opts) {\n        const { proxy } = this;\n        if (!opts.host) {\n            throw new TypeError('No \"host\" provided');\n        }\n        // Create a socket connection to the proxy server.\n        let socket;\n        if (proxy.protocol === 'https:') {\n            debug('Creating `tls.Socket`: %o', this.connectOpts);\n            const servername = this.connectOpts.servername || this.connectOpts.host;\n            socket = tls.connect({\n                ...this.connectOpts,\n                servername,\n            });\n        }\n        else {\n            debug('Creating `net.Socket`: %o', this.connectOpts);\n            socket = net.connect(this.connectOpts);\n        }\n        const headers = typeof this.proxyHeaders === 'function'\n            ? this.proxyHeaders()\n            : { ...this.proxyHeaders };\n        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n        // Inject the `Proxy-Authorization` header if necessary.\n        if (proxy.username || proxy.password) {\n            const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n            headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n        }\n        headers.Host = `${host}:${opts.port}`;\n        if (!headers['Proxy-Connection']) {\n            headers['Proxy-Connection'] = this.keepAlive\n                ? 'Keep-Alive'\n                : 'close';\n        }\n        for (const name of Object.keys(headers)) {\n            payload += `${name}: ${headers[name]}\\r\\n`;\n        }\n        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);\n        socket.write(`${payload}\\r\\n`);\n        const { connect, buffered } = await proxyResponsePromise;\n        req.emit('proxyConnect', connect);\n        this.emit('proxyConnect', connect, req);\n        if (connect.statusCode === 200) {\n            req.once('socket', resume);\n            if (opts.secureEndpoint) {\n                // The proxy is connecting to a TLS server, so upgrade\n                // this socket connection to a TLS connection.\n                debug('Upgrading socket connection to TLS');\n                const servername = opts.servername || opts.host;\n                return tls.connect({\n                    ...omit(opts, 'host', 'path', 'port'),\n                    socket,\n                    servername,\n                });\n            }\n            return socket;\n        }\n        // Some other status code that's not 200... need to re-play the HTTP\n        // header \"data\" events onto the socket once the HTTP machinery is\n        // attached so that the node core `http` can parse and handle the\n        // error status code.\n        // Close the original socket, and a new \"fake\" socket is returned\n        // instead, so that the proxy doesn't get the HTTP request\n        // written to it (which may contain `Authorization` headers or other\n        // sensitive data).\n        //\n        // See: https://hackerone.com/reports/541502\n        socket.destroy();\n        const fakeSocket = new net.Socket({ writable: false });\n        fakeSocket.readable = true;\n        // Need to wait for the \"socket\" event to re-play the \"data\" events.\n        req.once('socket', (s) => {\n            debug('Replaying proxy buffer for failed request');\n            (0, assert_1.default)(s.listenerCount('data') > 0);\n            // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n            // this point the HTTP module machinery has been hooked up for\n            // the user.\n            s.push(buffered);\n            s.push(null);\n        });\n        return fakeSocket;\n    }\n}\nHttpsProxyAgent.protocols = ['http', 'https'];\nexports.HttpsProxyAgent = HttpsProxyAgent;\nfunction resume(socket) {\n    socket.resume();\n}\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpProxyAgent = void 0;\nconst net = __importStar(require(\"net\"));\nconst tls = __importStar(require(\"tls\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst events_1 = require(\"events\");\nconst agent_base_1 = require(\"agent-base\");\nconst url_1 = require(\"url\");\nconst debug = (0, debug_1.default)('http-proxy-agent');\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects\n * to the specified \"HTTP proxy server\" in order to proxy HTTP requests.\n */\nclass HttpProxyAgent extends agent_base_1.Agent {\n    constructor(proxy, opts) {\n        super(opts);\n        this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy;\n        this.proxyHeaders = opts?.headers ?? {};\n        debug('Creating new HttpProxyAgent instance: %o', this.proxy.href);\n        // Trim off the brackets from IPv6 addresses\n        const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n        const port = this.proxy.port\n            ? parseInt(this.proxy.port, 10)\n            : this.proxy.protocol === 'https:'\n                ? 443\n                : 80;\n        this.connectOpts = {\n            ...(opts ? omit(opts, 'headers') : null),\n            host,\n            port,\n        };\n    }\n    addRequest(req, opts) {\n        req._header = null;\n        this.setRequestProps(req, opts);\n        // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n        super.addRequest(req, opts);\n    }\n    setRequestProps(req, opts) {\n        const { proxy } = this;\n        const protocol = opts.secureEndpoint ? 'https:' : 'http:';\n        const hostname = req.getHeader('host') || 'localhost';\n        const base = `${protocol}//${hostname}`;\n        const url = new url_1.URL(req.path, base);\n        if (opts.port !== 80) {\n            url.port = String(opts.port);\n        }\n        // Change the `http.ClientRequest` instance's \"path\" field\n        // to the absolute path of the URL that will be requested.\n        req.path = String(url);\n        // Inject the `Proxy-Authorization` header if necessary.\n        const headers = typeof this.proxyHeaders === 'function'\n            ? this.proxyHeaders()\n            : { ...this.proxyHeaders };\n        if (proxy.username || proxy.password) {\n            const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n            headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n        }\n        if (!headers['Proxy-Connection']) {\n            headers['Proxy-Connection'] = this.keepAlive\n                ? 'Keep-Alive'\n                : 'close';\n        }\n        for (const name of Object.keys(headers)) {\n            const value = headers[name];\n            if (value) {\n                req.setHeader(name, value);\n            }\n        }\n    }\n    async connect(req, opts) {\n        req._header = null;\n        if (!req.path.includes('://')) {\n            this.setRequestProps(req, opts);\n        }\n        // At this point, the http ClientRequest's internal `_header` field\n        // might have already been set. If this is the case then we'll need\n        // to re-generate the string since we just changed the `req.path`.\n        let first;\n        let endOfHeaders;\n        debug('Regenerating stored HTTP header string for request');\n        req._implicitHeader();\n        if (req.outputData && req.outputData.length > 0) {\n            debug('Patching connection write() output buffer with updated header');\n            first = req.outputData[0].data;\n            endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n            req.outputData[0].data =\n                req._header + first.substring(endOfHeaders);\n            debug('Output buffer: %o', req.outputData[0].data);\n        }\n        // Create a socket connection to the proxy server.\n        let socket;\n        if (this.proxy.protocol === 'https:') {\n            debug('Creating `tls.Socket`: %o', this.connectOpts);\n            socket = tls.connect(this.connectOpts);\n        }\n        else {\n            debug('Creating `net.Socket`: %o', this.connectOpts);\n            socket = net.connect(this.connectOpts);\n        }\n        // Wait for the socket's `connect` event, so that this `callback()`\n        // function throws instead of the `http` request machinery. This is\n        // important for i.e. `PacProxyAgent` which determines a failed proxy\n        // connection via the `callback()` function throwing.\n        await (0, events_1.once)(socket, 'connect');\n        return socket;\n    }\n}\nHttpProxyAgent.protocols = ['http', 'https'];\nexports.HttpProxyAgent = HttpProxyAgent;\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=index.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\nimport { HttpProxyAgent } from \"http-proxy-agent\";\nimport { logger } from \"../log.js\";\nconst HTTPS_PROXY = \"HTTPS_PROXY\";\nconst HTTP_PROXY = \"HTTP_PROXY\";\nconst ALL_PROXY = \"ALL_PROXY\";\nconst NO_PROXY = \"NO_PROXY\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nexport const proxyPolicyName = \"proxyPolicy\";\n/**\n * Stores the patterns specified in NO_PROXY environment variable.\n * @internal\n */\nexport const globalNoProxyList = [];\nlet noProxyListLoaded = false;\n/** A cache of whether a host should bypass the proxy. */\nconst globalBypassedMap = new Map();\nfunction getEnvironmentValue(name) {\n    if (process.env[name]) {\n        return process.env[name];\n    }\n    else if (process.env[name.toLowerCase()]) {\n        return process.env[name.toLowerCase()];\n    }\n    return undefined;\n}\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    const httpsProxy = getEnvironmentValue(HTTPS_PROXY);\n    const allProxy = getEnvironmentValue(ALL_PROXY);\n    const httpProxy = getEnvironmentValue(HTTP_PROXY);\n    return httpsProxy || allProxy || httpProxy;\n}\n/**\n * Check whether the host of a given `uri` matches any pattern in the no proxy list.\n * If there's a match, any request sent to the same host shouldn't have the proxy settings set.\n * This implementation is a port of https://github.com/Azure/azure-sdk-for-net/blob/8cca811371159e527159c7eb65602477898683e2/sdk/core/Azure.Core/src/Pipeline/Internal/HttpEnvironmentProxy.cs#L210\n */\nfunction isBypassed(uri, noProxyList, bypassedMap) {\n    if (noProxyList.length === 0) {\n        return false;\n    }\n    const host = new URL(uri).hostname;\n    if (bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.has(host)) {\n        return bypassedMap.get(host);\n    }\n    let isBypassedFlag = false;\n    for (const pattern of noProxyList) {\n        if (pattern[0] === \".\") {\n            // This should match either domain it self or any subdomain or host\n            // .foo.com will match foo.com it self or *.foo.com\n            if (host.endsWith(pattern)) {\n                isBypassedFlag = true;\n            }\n            else {\n                if (host.length === pattern.length - 1 && host === pattern.slice(1)) {\n                    isBypassedFlag = true;\n                }\n            }\n        }\n        else {\n            if (host === pattern) {\n                isBypassedFlag = true;\n            }\n        }\n    }\n    bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.set(host, isBypassedFlag);\n    return isBypassedFlag;\n}\nexport function loadNoProxy() {\n    const noProxy = getEnvironmentValue(NO_PROXY);\n    noProxyListLoaded = true;\n    if (noProxy) {\n        return noProxy\n            .split(\",\")\n            .map((item) => item.trim())\n            .filter((item) => item.length);\n    }\n    return [];\n}\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */\nexport function getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    const parsedUrl = new URL(proxyUrl);\n    const schema = parsedUrl.protocol ? parsedUrl.protocol + \"//\" : \"\";\n    return {\n        host: schema + parsedUrl.hostname,\n        port: Number.parseInt(parsedUrl.port || \"80\"),\n        username: parsedUrl.username,\n        password: parsedUrl.password,\n    };\n}\n/**\n * This method attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n */\nfunction getDefaultProxySettingsInternal() {\n    const envProxy = loadEnvironmentProxyValue();\n    return envProxy ? new URL(envProxy) : undefined;\n}\nfunction getUrlFromProxySettings(settings) {\n    let parsedProxyUrl;\n    try {\n        parsedProxyUrl = new URL(settings.host);\n    }\n    catch (_a) {\n        throw new Error(`Expecting a valid host string in proxy settings, but found \"${settings.host}\".`);\n    }\n    parsedProxyUrl.port = String(settings.port);\n    if (settings.username) {\n        parsedProxyUrl.username = settings.username;\n    }\n    if (settings.password) {\n        parsedProxyUrl.password = settings.password;\n    }\n    return parsedProxyUrl;\n}\nfunction setProxyAgentOnRequest(request, cachedAgents, proxyUrl) {\n    // Custom Agent should take precedence so if one is present\n    // we should skip to avoid overwriting it.\n    if (request.agent) {\n        return;\n    }\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n    if (request.tlsSettings) {\n        logger.warning(\"TLS settings are not supported in combination with custom Proxy, certificates provided to the client will be ignored.\");\n    }\n    const headers = request.headers.toJSON();\n    if (isInsecure) {\n        if (!cachedAgents.httpProxyAgent) {\n            cachedAgents.httpProxyAgent = new HttpProxyAgent(proxyUrl, { headers });\n        }\n        request.agent = cachedAgents.httpProxyAgent;\n    }\n    else {\n        if (!cachedAgents.httpsProxyAgent) {\n            cachedAgents.httpsProxyAgent = new HttpsProxyAgent(proxyUrl, { headers });\n        }\n        request.agent = cachedAgents.httpsProxyAgent;\n    }\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nexport function proxyPolicy(proxySettings, options) {\n    if (!noProxyListLoaded) {\n        globalNoProxyList.push(...loadNoProxy());\n    }\n    const defaultProxy = proxySettings\n        ? getUrlFromProxySettings(proxySettings)\n        : getDefaultProxySettingsInternal();\n    const cachedAgents = {};\n    return {\n        name: proxyPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.proxySettings &&\n                defaultProxy &&\n                !isBypassed(request.url, (_a = options === null || options === void 0 ? void 0 : options.customNoProxyList) !== null && _a !== void 0 ? _a : globalNoProxyList, (options === null || options === void 0 ? void 0 : options.customNoProxyList) ? undefined : globalBypassedMap)) {\n                setProxyAgentOnRequest(request, cachedAgents, defaultProxy);\n            }\n            else if (request.proxySettings) {\n                setProxyAgentOnRequest(request, cachedAgents, getUrlFromProxySettings(request.proxySettings));\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=proxyPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=setClientRequestIdPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Name of the TLS Policy\n */\nexport const tlsPolicyName = \"tlsPolicy\";\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings) {\n    return {\n        name: tlsPolicyName,\n        sendRequest: async (req, next) => {\n            // Users may define a request tlsSettings, honor those over the client level one\n            if (!req.tlsSettings) {\n                req.tlsSettings = tlsSettings;\n            }\n            return next(req);\n        },\n    };\n}\n//# sourceMappingURL=tlsPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** @internal */\nexport const knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */\nexport class TracingContextImpl {\n    constructor(initialContext) {\n        this._contextMap =\n            initialContext instanceof TracingContextImpl\n                ? new Map(initialContext._contextMap)\n                : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n}\n//# sourceMappingURL=tracingContext.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\nexport function createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n    };\n}\nexport function createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n    state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n    if (!state.instrumenterImplementation) {\n        state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getInstrumenter } from \"./instrumenter.js\";\nimport { knownContextKeys } from \"./tracingContext.js\";\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return getInstrumenter().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return getInstrumenter().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n//# sourceMappingURL=tracingClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"@azure/core-util\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        // The request and response may contain sensitive information in the headers or body.\n        // To help prevent this sensitive information being accidentally logged, the request and response\n        // properties are marked as non-enumerable here. This prevents them showing up in the output of\n        // JSON.stringify and console.log.\n        Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n        Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [custom]() {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return isError(e) && e.name === \"RestError\";\n}\n//# sourceMappingURL=restError.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTracingClient, } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n    const userAgentPromise = getUserAgentValue(options.userAgentPrefix);\n    const sanitizer = new Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return createTracingClient({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: SDK_VERSION,\n        });\n    }\n    catch (e) {\n        logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: isError(error) ? error : undefined,\n        });\n        if (isRestError(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n            status: \"success\",\n        });\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\n//# sourceMappingURL=tracingPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = createEmptyPipeline();\n    if (isNodeLike) {\n        if (options.tlsOptions) {\n            pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n        }\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n//# sourceMappingURL=createPipelineFromOptions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as http from \"node:http\";\nimport * as https from \"node:https\";\nimport * as zlib from \"node:zlib\";\nimport { Transform } from \"node:stream\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { RestError } from \"./restError.js\";\nimport { logger } from \"./log.js\";\nconst DEFAULT_TLS_SETTINGS = {};\nfunction isReadableStream(body) {\n    return body && typeof body.pipe === \"function\";\n}\nfunction isStreamComplete(stream) {\n    return new Promise((resolve) => {\n        const handler = () => {\n            resolve();\n            stream.removeListener(\"close\", handler);\n            stream.removeListener(\"end\", handler);\n            stream.removeListener(\"error\", handler);\n        };\n        stream.on(\"close\", handler);\n        stream.on(\"end\", handler);\n        stream.on(\"error\", handler);\n    });\n}\nfunction isArrayBuffer(body) {\n    return body && typeof body.byteLength === \"number\";\n}\nclass ReportTransform extends Transform {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    _transform(chunk, _encoding, callback) {\n        this.push(chunk);\n        this.loadedBytes += chunk.length;\n        try {\n            this.progressCallback({ loadedBytes: this.loadedBytes });\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    constructor(progressCallback) {\n        super();\n        this.loadedBytes = 0;\n        this.progressCallback = progressCallback;\n    }\n}\n/**\n * A HttpClient implementation that uses Node's \"https\" module to send HTTPS requests.\n * @internal\n */\nclass NodeHttpClient {\n    constructor() {\n        this.cachedHttpsAgents = new WeakMap();\n    }\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        var _a, _b, _c;\n        const abortController = new AbortController();\n        let abortListener;\n        if (request.abortSignal) {\n            if (request.abortSignal.aborted) {\n                throw new AbortError(\"The operation was aborted.\");\n            }\n            abortListener = (event) => {\n                if (event.type === \"abort\") {\n                    abortController.abort();\n                }\n            };\n            request.abortSignal.addEventListener(\"abort\", abortListener);\n        }\n        if (request.timeout > 0) {\n            setTimeout(() => {\n                abortController.abort();\n            }, request.timeout);\n        }\n        const acceptEncoding = request.headers.get(\"Accept-Encoding\");\n        const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"gzip\")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"deflate\"));\n        let body = typeof request.body === \"function\" ? request.body() : request.body;\n        if (body && !request.headers.has(\"Content-Length\")) {\n            const bodyLength = getBodyLength(body);\n            if (bodyLength !== null) {\n                request.headers.set(\"Content-Length\", bodyLength);\n            }\n        }\n        let responseStream;\n        try {\n            if (body && request.onUploadProgress) {\n                const onUploadProgress = request.onUploadProgress;\n                const uploadReportStream = new ReportTransform(onUploadProgress);\n                uploadReportStream.on(\"error\", (e) => {\n                    logger.error(\"Error in upload progress\", e);\n                });\n                if (isReadableStream(body)) {\n                    body.pipe(uploadReportStream);\n                }\n                else {\n                    uploadReportStream.end(body);\n                }\n                body = uploadReportStream;\n            }\n            const res = await this.makeRequest(request, abortController, body);\n            const headers = getResponseHeaders(res);\n            const status = (_a = res.statusCode) !== null && _a !== void 0 ? _a : 0;\n            const response = {\n                status,\n                headers,\n                request,\n            };\n            // Responses to HEAD must not have a body.\n            // If they do return a body, that body must be ignored.\n            if (request.method === \"HEAD\") {\n                // call resume() and not destroy() to avoid closing the socket\n                // and losing keep alive\n                res.resume();\n                return response;\n            }\n            responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;\n            const onDownloadProgress = request.onDownloadProgress;\n            if (onDownloadProgress) {\n                const downloadReportStream = new ReportTransform(onDownloadProgress);\n                downloadReportStream.on(\"error\", (e) => {\n                    logger.error(\"Error in download progress\", e);\n                });\n                responseStream.pipe(downloadReportStream);\n                responseStream = downloadReportStream;\n            }\n            if (\n            // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n            ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(Number.POSITIVE_INFINITY)) ||\n                ((_c = request.streamResponseStatusCodes) === null || _c === void 0 ? void 0 : _c.has(response.status))) {\n                response.readableStreamBody = responseStream;\n            }\n            else {\n                response.bodyAsText = await streamToText(responseStream);\n            }\n            return response;\n        }\n        finally {\n            // clean up event listener\n            if (request.abortSignal && abortListener) {\n                let uploadStreamDone = Promise.resolve();\n                if (isReadableStream(body)) {\n                    uploadStreamDone = isStreamComplete(body);\n                }\n                let downloadStreamDone = Promise.resolve();\n                if (isReadableStream(responseStream)) {\n                    downloadStreamDone = isStreamComplete(responseStream);\n                }\n                Promise.all([uploadStreamDone, downloadStreamDone])\n                    .then(() => {\n                    var _a;\n                    // eslint-disable-next-line promise/always-return\n                    if (abortListener) {\n                        (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n                    }\n                })\n                    .catch((e) => {\n                    logger.warning(\"Error when cleaning up abortListener on httpRequest\", e);\n                });\n            }\n        }\n    }\n    makeRequest(request, abortController, body) {\n        var _a;\n        const url = new URL(request.url);\n        const isInsecure = url.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        const agent = (_a = request.agent) !== null && _a !== void 0 ? _a : this.getOrCreateAgent(request, isInsecure);\n        const options = {\n            agent,\n            hostname: url.hostname,\n            path: `${url.pathname}${url.search}`,\n            port: url.port,\n            method: request.method,\n            headers: request.headers.toJSON({ preserveCase: true }),\n        };\n        return new Promise((resolve, reject) => {\n            const req = isInsecure ? http.request(options, resolve) : https.request(options, resolve);\n            req.once(\"error\", (err) => {\n                var _a;\n                reject(new RestError(err.message, { code: (_a = err.code) !== null && _a !== void 0 ? _a : RestError.REQUEST_SEND_ERROR, request }));\n            });\n            abortController.signal.addEventListener(\"abort\", () => {\n                const abortError = new AbortError(\"The operation was aborted.\");\n                req.destroy(abortError);\n                reject(abortError);\n            });\n            if (body && isReadableStream(body)) {\n                body.pipe(req);\n            }\n            else if (body) {\n                if (typeof body === \"string\" || Buffer.isBuffer(body)) {\n                    req.end(body);\n                }\n                else if (isArrayBuffer(body)) {\n                    req.end(ArrayBuffer.isView(body) ? Buffer.from(body.buffer) : Buffer.from(body));\n                }\n                else {\n                    logger.error(\"Unrecognized body type\", body);\n                    reject(new RestError(\"Unrecognized body type\"));\n                }\n            }\n            else {\n                // streams don't like \"undefined\" being passed as data\n                req.end();\n            }\n        });\n    }\n    getOrCreateAgent(request, isInsecure) {\n        var _a;\n        const disableKeepAlive = request.disableKeepAlive;\n        // Handle Insecure requests first\n        if (isInsecure) {\n            if (disableKeepAlive) {\n                // keepAlive:false is the default so we don't need a custom Agent\n                return http.globalAgent;\n            }\n            if (!this.cachedHttpAgent) {\n                // If there is no cached agent create a new one and cache it.\n                this.cachedHttpAgent = new http.Agent({ keepAlive: true });\n            }\n            return this.cachedHttpAgent;\n        }\n        else {\n            if (disableKeepAlive && !request.tlsSettings) {\n                // When there are no tlsSettings and keepAlive is false\n                // we don't need a custom agent\n                return https.globalAgent;\n            }\n            // We use the tlsSettings to index cached clients\n            const tlsSettings = (_a = request.tlsSettings) !== null && _a !== void 0 ? _a : DEFAULT_TLS_SETTINGS;\n            // Get the cached agent or create a new one with the\n            // provided values for keepAlive and tlsSettings\n            let agent = this.cachedHttpsAgents.get(tlsSettings);\n            if (agent && agent.options.keepAlive === !disableKeepAlive) {\n                return agent;\n            }\n            logger.info(\"No cached TLS Agent exist, creating a new Agent\");\n            agent = new https.Agent(Object.assign({ \n                // keepAlive is true if disableKeepAlive is false.\n                keepAlive: !disableKeepAlive }, tlsSettings));\n            this.cachedHttpsAgents.set(tlsSettings, agent);\n            return agent;\n        }\n    }\n}\nfunction getResponseHeaders(res) {\n    const headers = createHttpHeaders();\n    for (const header of Object.keys(res.headers)) {\n        const value = res.headers[header];\n        if (Array.isArray(value)) {\n            if (value.length > 0) {\n                headers.set(header, value[0]);\n            }\n        }\n        else if (value) {\n            headers.set(header, value);\n        }\n    }\n    return headers;\n}\nfunction getDecodedResponseStream(stream, headers) {\n    const contentEncoding = headers.get(\"Content-Encoding\");\n    if (contentEncoding === \"gzip\") {\n        const unzip = zlib.createGunzip();\n        stream.pipe(unzip);\n        return unzip;\n    }\n    else if (contentEncoding === \"deflate\") {\n        const inflate = zlib.createInflate();\n        stream.pipe(inflate);\n        return inflate;\n    }\n    return stream;\n}\nfunction streamToText(stream) {\n    return new Promise((resolve, reject) => {\n        const buffer = [];\n        stream.on(\"data\", (chunk) => {\n            if (Buffer.isBuffer(chunk)) {\n                buffer.push(chunk);\n            }\n            else {\n                buffer.push(Buffer.from(chunk));\n            }\n        });\n        stream.on(\"end\", () => {\n            resolve(Buffer.concat(buffer).toString(\"utf8\"));\n        });\n        stream.on(\"error\", (e) => {\n            if (e && (e === null || e === void 0 ? void 0 : e.name) === \"AbortError\") {\n                reject(e);\n            }\n            else {\n                reject(new RestError(`Error reading response as text: ${e.message}`, {\n                    code: RestError.PARSE_ERROR,\n                }));\n            }\n        });\n    });\n}\n/** @internal */\nexport function getBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    else if (Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    else if (isReadableStream(body)) {\n        return null;\n    }\n    else if (isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    else if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Create a new HttpClient instance for the NodeJS environment.\n * @internal\n */\nexport function createNodeHttpClient() {\n    return new NodeHttpClient();\n}\n//# sourceMappingURL=nodeHttpClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createNodeHttpClient } from \"./nodeHttpClient.js\";\n/**\n * Create the correct HttpClient for the current environment.\n */\nexport function createDefaultHttpClient() {\n    return createNodeHttpClient();\n}\n//# sourceMappingURL=defaultHttpClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { randomUUID } from \"@azure/core-util\";\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : createHttpHeaders();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.multipartBody = options.multipartBody;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || randomUUID();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n//# sourceMappingURL=pipelineRequest.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"./helpers.js\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n//# sourceMappingURL=tokenCycler.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createTokenCycler } from \"../util/tokenCycler.js\";\nimport { logger as coreLogger } from \"../log.js\";\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nexport function bearerTokenAuthenticationPolicy(options) {\n    var _a;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || coreLogger;\n    const callbacks = Object.assign({ authorizeRequest: (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) !== null && _a !== void 0 ? _a : defaultAuthorizeRequest, authorizeRequestOnChallenge: challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge }, challengeCallbacks);\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? createTokenCycler(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            try {\n                response = await next(request);\n            }\n            catch (err) {\n                error = err;\n                response = err.response;\n            }\n            if (callbacks.authorizeRequestOnChallenge &&\n                (response === null || response === void 0 ? void 0 : response.status) === 401 &&\n                getChallenge(response)) {\n                // processes challenge\n                const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    response,\n                    getAccessToken,\n                    logger,\n                });\n                if (shouldSendRequest) {\n                    return next(request);\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n//# sourceMappingURL=tokenCredential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport const disableKeepAlivePolicyName = \"DisableKeepAlivePolicy\";\nexport function createDisableKeepAlivePolicy() {\n    return {\n        name: disableKeepAlivePolicyName,\n        async sendRequest(request, next) {\n            request.disableKeepAlive = true;\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nexport function pipelineContainsDisableKeepAlivePolicy(pipeline) {\n    return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);\n}\n//# sourceMappingURL=disableKeepAlivePolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nexport function encodeString(value) {\n    return Buffer.from(value).toString(\"base64\");\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nexport function encodeByteArray(value) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeStringToString(value) {\n    return Buffer.from(value, \"base64\").toString();\n}\n//# sourceMappingURL=base64.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nexport function isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nexport function isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nexport function isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nexport function flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n//# sourceMappingURL=utils.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as base64 from \"./base64.js\";\nimport { XML_ATTRKEY, XML_CHARKEY, } from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = base64.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = base64.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = base64.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!isDuration(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n                        parentObject[XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n//# sourceMappingURL=serializer.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { state } from \"./state.js\";\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nexport function getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n//# sourceMappingURL=operationHelpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XML_CHARKEY, } from \"./interfaces.js\";\nimport { RestError, } from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY,\n        },\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = getOperationRequestInfo(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            }\n            catch (deserializeError) {\n                const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", { xml: {}, ignoreUnknownProperties: true });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || RestError.PARSE_ERROR;\n            const e = new RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n//# sourceMappingURL=deserializationPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { MapperTypeNames } from \"./serializer.js\";\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n//# sourceMappingURL=interfaceHelpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XML_ATTRKEY, XML_CHARKEY, } from \"./interfaces.js\";\nimport { getOperationArgumentValueFromParameter, getOperationRequestInfo, } from \"./operationHelpers.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = getOperationRequestInfo(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nexport function serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nexport function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n//# sourceMappingURL=serializationPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { deserializationPolicy } from \"./deserializationPolicy.js\";\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions, } from \"@azure/core-rest-pipeline\";\nimport { serializationPolicy } from \"./serializationPolicy.js\";\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options = {}) {\n    const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy(bearerTokenAuthenticationPolicy({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n//# sourceMappingURL=pipeline.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\nlet cachedHttpClient;\nexport function getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = createDefaultHttpClient();\n    }\n    return cachedHttpClient;\n}\n//# sourceMappingURL=httpClientCache.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getOperationArgumentValueFromParameter } from \"./operationHelpers.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nexport function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = getPathStringFromParameter(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nexport function appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n//# sourceMappingURL=urlHelpers.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createPipelineRequest, } from \"@azure/core-rest-pipeline\";\nimport { createClientPipeline } from \"./pipeline.js\";\nimport { flattenResponse } from \"./utils.js\";\nimport { getCachedDefaultHttpClient } from \"./httpClientCache.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nimport { getRequestUrl } from \"./urlHelpers.js\";\nimport { getStreamingResponseStatusCodes } from \"./interfaceHelpers.js\";\nimport { logger } from \"./log.js\";\n/**\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param credential - The credentials used for authentication with the service.\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = getRequestUrl(endpoint, operationSpec, operationArguments, this);\n        const request = createPipelineRequest({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = getOperationRequestInfo(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=serviceClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://docs.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nexport const authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n//# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest, } from \"@azure/core-rest-pipeline\";\n// We use a custom symbol to cache a reference to the original request without\n// exposing it on the public interface.\nconst originalRequestSymbol = Symbol(\"Original PipelineRequest\");\n// Symbol.for() will return the same symbol if it's already been created\n// This particular one is used in core-client to handle the case of when a request is\n// cloned but we need to retrieve the OperationSpec and OperationArguments from the\n// original request.\nconst originalClientRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nexport function toPipelineRequest(webResource, options = {}) {\n    const compatWebResource = webResource;\n    const request = compatWebResource[originalRequestSymbol];\n    const headers = createHttpHeaders(webResource.headers.toJson({ preserveCase: true }));\n    if (request) {\n        request.headers = headers;\n        return request;\n    }\n    else {\n        const newRequest = createPipelineRequest({\n            url: webResource.url,\n            method: webResource.method,\n            headers,\n            withCredentials: webResource.withCredentials,\n            timeout: webResource.timeout,\n            requestId: webResource.requestId,\n            abortSignal: webResource.abortSignal,\n            body: webResource.body,\n            formData: webResource.formData,\n            disableKeepAlive: !!webResource.keepAlive,\n            onDownloadProgress: webResource.onDownloadProgress,\n            onUploadProgress: webResource.onUploadProgress,\n            proxySettings: webResource.proxySettings,\n            streamResponseStatusCodes: webResource.streamResponseStatusCodes,\n        });\n        if (options.originalRequest) {\n            newRequest[originalClientRequestSymbol] =\n                options.originalRequest;\n        }\n        return newRequest;\n    }\n}\nexport function toWebResourceLike(request, options) {\n    var _a;\n    const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;\n    const webResource = {\n        url: request.url,\n        method: request.method,\n        headers: toHttpHeadersLike(request.headers),\n        withCredentials: request.withCredentials,\n        timeout: request.timeout,\n        requestId: request.headers.get(\"x-ms-client-request-id\") || request.requestId,\n        abortSignal: request.abortSignal,\n        body: request.body,\n        formData: request.formData,\n        keepAlive: !!request.disableKeepAlive,\n        onDownloadProgress: request.onDownloadProgress,\n        onUploadProgress: request.onUploadProgress,\n        proxySettings: request.proxySettings,\n        streamResponseStatusCodes: request.streamResponseStatusCodes,\n        clone() {\n            throw new Error(\"Cannot clone a non-proxied WebResourceLike\");\n        },\n        prepare() {\n            throw new Error(\"WebResourceLike.prepare() is not supported by @azure/core-http-compat\");\n        },\n        validateRequestProperties() {\n            /** do nothing */\n        },\n    };\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(webResource, {\n            get(target, prop, receiver) {\n                if (prop === originalRequestSymbol) {\n                    return request;\n                }\n                else if (prop === \"clone\") {\n                    return () => {\n                        return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {\n                            createProxy: true,\n                            originalRequest,\n                        });\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"keepAlive\") {\n                    request.disableKeepAlive = !value;\n                }\n                const passThroughProps = [\n                    \"url\",\n                    \"method\",\n                    \"withCredentials\",\n                    \"timeout\",\n                    \"requestId\",\n                    \"abortSignal\",\n                    \"body\",\n                    \"formData\",\n                    \"onDownloadProgress\",\n                    \"onUploadProgress\",\n                    \"proxySettings\",\n                    \"streamResponseStatusCodes\",\n                ];\n                if (typeof prop === \"string\" && passThroughProps.includes(prop)) {\n                    request[prop] = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return webResource;\n    }\n}\n/**\n * Converts HttpHeaders from core-rest-pipeline to look like\n * HttpHeaders from core-http.\n * @param headers - HttpHeaders from core-rest-pipeline\n * @returns HttpHeaders as they looked in core-http\n */\nexport function toHttpHeadersLike(headers) {\n    return new HttpHeaders(headers.toJSON({ preserveCase: true }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n    constructor(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (const headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName - The name of the header to set. This value is case-insensitive.\n     * @param headerValue - The value of the header to set.\n     */\n    set(headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = {\n            name: headerName,\n            value: headerValue.toString(),\n        };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n    get(headerName) {\n        const header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    contains(headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n    remove(headerName) {\n        const result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    rawHeaders() {\n        return this.toJson({ preserveCase: true });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    headersArray() {\n        const headers = [];\n        for (const headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    headerNames() {\n        const headerNames = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n    headerValues() {\n        const headerValues = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJson(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[header.name] = header.value;\n            }\n        }\n        else {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[getHeaderKey(header.name)] = header.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJson({ preserveCase: true }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    clone() {\n        const resultPreservingCasing = {};\n        for (const headerKey in this._headersMap) {\n            const header = this._headersMap[headerKey];\n            resultPreservingCasing[header.name] = header.value;\n        }\n        return new HttpHeaders(resultPreservingCasing);\n    }\n}\n//# sourceMappingURL=util.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { toHttpHeadersLike, toPipelineRequest, toWebResourceLike, } from \"./util.js\";\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toCompatResponse(response, options) {\n    let request = toWebResourceLike(response.request);\n    let headers = toHttpHeadersLike(response.headers);\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(response, {\n            get(target, prop, receiver) {\n                if (prop === \"headers\") {\n                    return headers;\n                }\n                else if (prop === \"request\") {\n                    return request;\n                }\n                else if (prop === originalResponse) {\n                    return response;\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"headers\") {\n                    headers = value;\n                }\n                else if (prop === \"request\") {\n                    request = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return Object.assign(Object.assign({}, response), { request,\n            headers });\n    }\n}\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toPipelineResponse(compatResponse) {\n    const extendedCompatResponse = compatResponse;\n    const response = extendedCompatResponse[originalResponse];\n    const headers = createHttpHeaders(compatResponse.headers.toJson({ preserveCase: true }));\n    if (response) {\n        response.headers = headers;\n        return response;\n    }\n    else {\n        return Object.assign(Object.assign({}, compatResponse), { headers, request: toPipelineRequest(compatResponse.request) });\n    }\n}\n//# sourceMappingURL=response.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { toPipelineRequest, toWebResourceLike } from \"../util.js\";\nimport { toCompatResponse, toPipelineResponse } from \"../response.js\";\n/**\n * An enum for compatibility with RequestPolicy\n */\nexport var HttpPipelineLogLevel;\n(function (HttpPipelineLogLevel) {\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"INFO\"] = 3] = \"INFO\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"OFF\"] = 0] = \"OFF\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"WARNING\"] = 2] = \"WARNING\";\n})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));\nconst mockRequestPolicyOptions = {\n    log(_logLevel, _message) {\n        /* do nothing */\n    },\n    shouldLog(_logLevel) {\n        return false;\n    },\n};\n/**\n * The name of the RequestPolicyFactoryPolicy\n */\nexport const requestPolicyFactoryPolicyName = \"RequestPolicyFactoryPolicy\";\n/**\n * A policy that wraps policies written for core-http.\n * @param factories - An array of `RequestPolicyFactory` objects from a core-http pipeline\n */\nexport function createRequestPolicyFactoryPolicy(factories) {\n    const orderedFactories = factories.slice().reverse();\n    return {\n        name: requestPolicyFactoryPolicyName,\n        async sendRequest(request, next) {\n            let httpPipeline = {\n                async sendRequest(httpRequest) {\n                    const response = await next(toPipelineRequest(httpRequest));\n                    return toCompatResponse(response, { createProxy: true });\n                },\n            };\n            for (const factory of orderedFactories) {\n                httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);\n            }\n            const webResourceLike = toWebResourceLike(request, { createProxy: true });\n            const response = await httpPipeline.sendRequest(webResourceLike);\n            return toPipelineResponse(response);\n        },\n    };\n}\n//# sourceMappingURL=requestPolicyFactoryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { toPipelineResponse } from \"./response.js\";\nimport { toWebResourceLike } from \"./util.js\";\n/**\n * Converts a RequestPolicy based HttpClient to a PipelineRequest based HttpClient.\n * @param requestPolicyClient - A HttpClient compatible with core-http\n * @returns A HttpClient compatible with core-rest-pipeline\n */\nexport function convertHttpClient(requestPolicyClient) {\n    return {\n        sendRequest: async (request) => {\n            const response = await requestPolicyClient.sendRequest(toWebResourceLike(request, { createProxy: true }));\n            return toPipelineResponse(response);\n        },\n    };\n}\n//# sourceMappingURL=httpClientAdapter.js.map","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XMLBuilder, XMLParser, XMLValidator } from \"fast-xml-parser\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./xml.common.js\";\nfunction getCommonOptions(options) {\n    var _a;\n    return {\n        attributesGroupName: XML_ATTRKEY,\n        textNodeName: (_a = options.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY,\n        ignoreAttributes: false,\n        suppressBooleanAttributes: false,\n    };\n}\nfunction getSerializerOptions(options = {}) {\n    var _a, _b;\n    return Object.assign(Object.assign({}, getCommonOptions(options)), { attributeNamePrefix: \"@_\", format: true, suppressEmptyNode: true, indentBy: \"\", rootNodeName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"root\", cdataPropName: (_b = options.cdataPropName) !== null && _b !== void 0 ? _b : \"__cdata\" });\n}\nfunction getParserOptions(options = {}) {\n    return Object.assign(Object.assign({}, getCommonOptions(options)), { parseAttributeValue: false, parseTagValue: false, attributeNamePrefix: \"\", stopNodes: options.stopNodes, processEntities: true });\n}\n/**\n * Converts given JSON object to XML string\n * @param obj - JSON object to be converted into XML string\n * @param opts - Options that govern the XML building of given JSON object\n * `rootName` indicates the name of the root element in the resulting XML\n */\nexport function stringifyXML(obj, opts = {}) {\n    const parserOptions = getSerializerOptions(opts);\n    const j2x = new XMLBuilder(parserOptions);\n    const node = { [parserOptions.rootNodeName]: obj };\n    const xmlData = j2x.build(node);\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>${xmlData}`.replace(/\\n/g, \"\");\n}\n/**\n * Converts given XML string into JSON\n * @param str - String containing the XML content to be parsed into JSON\n * @param opts - Options that govern the parsing of given xml string\n * `includeRoot` indicates whether the root element is to be included or not in the output\n */\nexport async function parseXML(str, opts = {}) {\n    if (!str) {\n        throw new Error(\"Document is empty\");\n    }\n    const validation = XMLValidator.validate(str);\n    if (validation !== true) {\n        throw validation;\n    }\n    const parser = new XMLParser(getParserOptions(opts));\n    const parsedXml = parser.parse(str);\n    // Remove the <?xml version=\"...\" ?> node.\n    // This is a change in behavior on fxp v4. Issue #424\n    if (parsedXml[\"?xml\"]) {\n        delete parsedXml[\"?xml\"];\n    }\n    if (!opts.includeRoot) {\n        for (const key of Object.keys(parsedXml)) {\n            const value = parsedXml[key];\n            return typeof value === \"object\" ? Object.assign({}, value) : value;\n        }\n    }\n    return parsedXml;\n}\n//# sourceMappingURL=xml.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal {\n    constructor() {\n        /**\n         * onabort event listener.\n         */\n        this.onabort = null;\n        listenersMap.set(this, []);\n        abortedMap.set(this, false);\n    }\n    /**\n     * Status of whether aborted or not.\n     *\n     * @readonly\n     */\n    get aborted() {\n        if (!abortedMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        return abortedMap.get(this);\n    }\n    /**\n     * Creates a new AbortSignal instance that will never be aborted.\n     *\n     * @readonly\n     */\n    static get none() {\n        return new AbortSignal();\n    }\n    /**\n     * Added new \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be added\n     */\n    addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        listeners.push(listener);\n    }\n    /**\n     * Remove \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be removed\n     */\n    removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n    }\n    /**\n     * Dispatches a synthetic event to the AbortSignal.\n     */\n    dispatchEvent(_event) {\n        throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n    }\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal) {\n    if (signal.aborted) {\n        return;\n    }\n    if (signal.onabort) {\n        signal.onabort.call(signal);\n    }\n    const listeners = listenersMap.get(signal);\n    if (listeners) {\n        // Create a copy of listeners so mutations to the array\n        // (e.g. via removeListener calls) don't affect the listeners\n        // we invoke.\n        listeners.slice().forEach((listener) => {\n            listener.call(signal, { type: \"abort\" });\n        });\n    }\n    abortedMap.set(signal, true);\n}\n//# sourceMappingURL=AbortSignal.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { isNode } from \"@azure/core-util\";\nimport { DevelopmentConnectionString, HeaderConstants, PathStylePorts, URLConstants, } from \"./constants\";\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path || \"/\";\n    path = escape(path);\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n    // Development Connection String\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n    let proxyUri = \"\";\n    if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n        const matchCredentials = connectionString.split(\";\");\n        for (const element of matchCredentials) {\n            if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n                proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n            }\n        }\n    }\n    return proxyUri;\n}\nexport function getValueInConnString(connectionString, argument) {\n    const elements = connectionString.split(\";\");\n    for (const element of elements) {\n        if (element.trim().startsWith(argument)) {\n            return element.trim().match(argument + \"=(.*)\")[1];\n        }\n    }\n    return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString) {\n    let proxyUri = \"\";\n    if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n        // Development connection string\n        proxyUri = getProxyUriFromDevConnString(connectionString);\n        connectionString = DevelopmentConnectionString;\n    }\n    // Matching BlobEndpoint in the Account connection string\n    let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n    // Slicing off '/' at the end if exists\n    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n    blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n    if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n        connectionString.search(\"AccountKey=\") !== -1) {\n        // Account connection string\n        let defaultEndpointsProtocol = \"\";\n        let accountName = \"\";\n        let accountKey = Buffer.from(\"accountKey\", \"base64\");\n        let endpointSuffix = \"\";\n        // Get account name and key\n        accountName = getValueInConnString(connectionString, \"AccountName\");\n        accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n        if (!blobEndpoint) {\n            // BlobEndpoint is not present in the Account connection string\n            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n            defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n            const protocol = defaultEndpointsProtocol.toLowerCase();\n            if (protocol !== \"https\" && protocol !== \"http\") {\n                throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n            }\n            endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n            if (!endpointSuffix) {\n                throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n            }\n            blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n        }\n        if (!accountName) {\n            throw new Error(\"Invalid AccountName in the provided Connection String\");\n        }\n        else if (accountKey.length === 0) {\n            throw new Error(\"Invalid AccountKey in the provided Connection String\");\n        }\n        return {\n            kind: \"AccountConnString\",\n            url: blobEndpoint,\n            accountName,\n            accountKey,\n            proxyUri,\n        };\n    }\n    else {\n        // SAS connection string\n        let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n        let accountName = getValueInConnString(connectionString, \"AccountName\");\n        // if accountName is empty, try to read it from BlobEndpoint\n        if (!accountName) {\n            accountName = getAccountNameFromUrl(blobEndpoint);\n        }\n        if (!blobEndpoint) {\n            throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n        }\n        else if (!accountSas) {\n            throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n        }\n        // client constructors assume accountSas does *not* start with ?\n        if (accountSas.startsWith(\"?\")) {\n            accountSas = accountSas.substring(1);\n        }\n        return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n    }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n    return encodeURIComponent(text)\n        .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n        .replace(/'/g, \"%27\") // Escape for \"'\"\n        .replace(/\\+/g, \"%20\")\n        .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url, name) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url, name, value) {\n    const urlParsed = new URL(url);\n    const encodedName = encodeURIComponent(name);\n    const encodedValue = value ? encodeURIComponent(value) : undefined;\n    // mutating searchParams will change the encoding, so we have to do this ourselves\n    const searchString = urlParsed.search === \"\" ? \"?\" : urlParsed.search;\n    const searchPieces = [];\n    for (const pair of searchString.slice(1).split(\"&\")) {\n        if (pair) {\n            const [key] = pair.split(\"=\", 2);\n            if (key !== encodedName) {\n                searchPieces.push(pair);\n            }\n        }\n    }\n    if (encodedValue) {\n        searchPieces.push(`${encodedName}=${encodedValue}`);\n    }\n    urlParsed.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url, name) {\n    var _a;\n    const urlParsed = new URL(url);\n    return (_a = urlParsed.searchParams.get(name)) !== null && _a !== void 0 ? _a : undefined;\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url, host) {\n    const urlParsed = new URL(url);\n    urlParsed.hostname = host;\n    return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.pathname;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.protocol.endsWith(\":\") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url) {\n    const urlParsed = new URL(url);\n    const pathString = urlParsed.pathname;\n    if (!pathString) {\n        throw new RangeError(\"Invalid url without valid path.\");\n    }\n    let queryString = urlParsed.search || \"\";\n    queryString = queryString.trim();\n    if (queryString !== \"\") {\n        queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n    }\n    return `${pathString}${queryString}`;\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url) {\n    let queryString = new URL(url).search;\n    if (!queryString) {\n        return {};\n    }\n    queryString = queryString.trim();\n    queryString = queryString.startsWith(\"?\") ? queryString.substring(1) : queryString;\n    let querySubStrings = queryString.split(\"&\");\n    querySubStrings = querySubStrings.filter((value) => {\n        const indexOfEqual = value.indexOf(\"=\");\n        const lastIndexOfEqual = value.lastIndexOf(\"=\");\n        return (indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1);\n    });\n    const queries = {};\n    for (const querySubString of querySubStrings) {\n        const splitResults = querySubString.split(\"=\");\n        const key = splitResults[0];\n        const value = splitResults[1];\n        queries[key] = value;\n    }\n    return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url, queryParts) {\n    const urlParsed = new URL(url);\n    let query = urlParsed.search;\n    if (query) {\n        query += \"&\" + queryParts;\n    }\n    else {\n        query = queryParts;\n    }\n    urlParsed.search = query;\n    return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date, withMilliseconds = true) {\n    // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n    const dateString = date.toISOString();\n    return withMilliseconds\n        ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n        : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content) {\n    return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString) {\n    return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix, blockIndex) {\n    // To generate a 64 bytes base64 string, source string should be 48\n    const maxSourceStringLength = 48;\n    // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n    const maxBlockIndexLength = 6;\n    const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n    }\n    const res = blockIDPrefix +\n        padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n    return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(timeInMs, aborter, abortError) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable-next-line prefer-const */\n        let timeout;\n        const abortHandler = () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            reject(abortError);\n        };\n        const resolveHandler = () => {\n            if (aborter !== undefined) {\n                aborter.removeEventListener(\"abort\", abortHandler);\n            }\n            resolve();\n        };\n        timeout = setTimeout(resolveHandler, timeInMs);\n        if (aborter !== undefined) {\n            aborter.addEventListener(\"abort\", abortHandler);\n        }\n    });\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nexport function padStart(currentString, targetLength, padString = \" \") {\n    // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n    if (String.prototype.padStart) {\n        return currentString.padStart(targetLength, padString);\n    }\n    padString = padString || \" \";\n    if (currentString.length > targetLength) {\n        return currentString;\n    }\n    else {\n        targetLength = targetLength - currentString.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + currentString;\n    }\n}\nexport function sanitizeURL(url) {\n    let safeURL = url;\n    if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n        safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n    }\n    return safeURL;\n}\nexport function sanitizeHeaders(originalHeader) {\n    const headers = createHttpHeaders();\n    for (const [name, value] of originalHeader) {\n        if (name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n            headers.set(name, \"*****\");\n        }\n        else if (name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n            headers.set(name, sanitizeURL(value));\n        }\n        else {\n            headers.set(name, value);\n        }\n    }\n    return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1, str2) {\n    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url) {\n    const parsedUrl = new URL(url);\n    let accountName;\n    try {\n        if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n            // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n            accountName = parsedUrl.hostname.split(\".\")[0];\n        }\n        else if (isIpEndpointStyle(parsedUrl)) {\n            // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n            // .getPath() -> /devstoreaccount1/\n            accountName = parsedUrl.pathname.split(\"/\")[1];\n        }\n        else {\n            // Custom domain case: \"https://customdomain.com/containername/blob\".\n            accountName = \"\";\n        }\n        return accountName;\n    }\n    catch (error) {\n        throw new Error(\"Unable to extract accountName with provided information.\");\n    }\n}\nexport function isIpEndpointStyle(parsedUrl) {\n    const host = parsedUrl.host;\n    // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n    // Case 2: localhost(:port) or host.docker.internal, use broad regex to match port part.\n    // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n    // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n    return (/^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) ||\n        (Boolean(parsedUrl.port) && PathStylePorts.includes(parsedUrl.port)));\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const tagPairs = [];\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {\n        blobTagSet: [],\n    };\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            res.blobTagSet.push({\n                key,\n                value,\n            });\n        }\n    }\n    return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {};\n    for (const blobTag of tags.blobTagSet) {\n        res[blobTag.key] = blobTag.value;\n    }\n    return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(textConfiguration) {\n    if (textConfiguration === undefined) {\n        return undefined;\n    }\n    switch (textConfiguration.kind) {\n        case \"csv\":\n            return {\n                format: {\n                    type: \"delimited\",\n                    delimitedTextConfiguration: {\n                        columnSeparator: textConfiguration.columnSeparator || \",\",\n                        fieldQuote: textConfiguration.fieldQuote || \"\",\n                        recordSeparator: textConfiguration.recordSeparator,\n                        escapeChar: textConfiguration.escapeCharacter || \"\",\n                        headersPresent: textConfiguration.hasHeaders || false,\n                    },\n                },\n            };\n        case \"json\":\n            return {\n                format: {\n                    type: \"json\",\n                    jsonTextConfiguration: {\n                        recordSeparator: textConfiguration.recordSeparator,\n                    },\n                },\n            };\n        case \"arrow\":\n            return {\n                format: {\n                    type: \"arrow\",\n                    arrowConfiguration: {\n                        schema: textConfiguration.schema,\n                    },\n                },\n            };\n        case \"parquet\":\n            return {\n                format: {\n                    type: \"parquet\",\n                },\n            };\n        default:\n            throw Error(\"Invalid BlobQueryTextConfiguration.\");\n    }\n}\nexport function parseObjectReplicationRecord(objectReplicationRecord) {\n    if (!objectReplicationRecord) {\n        return undefined;\n    }\n    if (\"policy-id\" in objectReplicationRecord) {\n        // If the dictionary contains a key with policy id, we are not required to do any parsing since\n        // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n        return undefined;\n    }\n    const orProperties = [];\n    for (const key in objectReplicationRecord) {\n        const ids = key.split(\"_\");\n        const policyPrefix = \"or-\";\n        if (ids[0].startsWith(policyPrefix)) {\n            ids[0] = ids[0].substring(policyPrefix.length);\n        }\n        const rule = {\n            ruleId: ids[1],\n            replicationStatus: objectReplicationRecord[key],\n        };\n        const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n        if (policyIndex > -1) {\n            orProperties[policyIndex].rules.push(rule);\n        }\n        else {\n            orProperties.push({\n                policyId: ids[0],\n                rules: [rule],\n            });\n        }\n    }\n    return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential(thing, credential) {\n    thing.credential = credential;\n    return thing;\n}\nexport function httpAuthorizationToString(httpAuthorization) {\n    return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nexport function BlobNameToString(name) {\n    if (name.encoded) {\n        return decodeURIComponent(name.content);\n    }\n    else {\n        return name.content;\n    }\n}\nexport function ConvertInternalResponseOfListBlobFlat(internalResponse) {\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nexport function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n    var _a;\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });\n                return blobPrefix;\n            }),\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nexport function* ExtractPageRangeInfoItems(getPageRangesSegment) {\n    let pageRange = [];\n    let clearRange = [];\n    if (getPageRangesSegment.pageRange)\n        pageRange = getPageRangesSegment.pageRange;\n    if (getPageRangesSegment.clearRange)\n        clearRange = getPageRangesSegment.clearRange;\n    let pageRangeIndex = 0;\n    let clearRangeIndex = 0;\n    while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n        if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n            yield {\n                start: pageRange[pageRangeIndex].start,\n                end: pageRange[pageRangeIndex].end,\n                isClear: false,\n            };\n            ++pageRangeIndex;\n        }\n        else {\n            yield {\n                start: clearRange[clearRangeIndex].start,\n                end: clearRange[clearRangeIndex].end,\n                isClear: true,\n            };\n            ++clearRangeIndex;\n        }\n    }\n    for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n        yield {\n            start: pageRange[pageRangeIndex].start,\n            end: pageRange[pageRangeIndex].end,\n            isClear: false,\n        };\n    }\n    for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n        yield {\n            start: clearRange[clearRangeIndex].start,\n            end: clearRange[clearRangeIndex].end,\n            isClear: true,\n        };\n    }\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nexport function EscapePath(blobName) {\n    const split = blobName.split(\"/\");\n    for (let i = 0; i < split.length; i++) {\n        split[i] = encodeURIComponent(split[i]);\n    }\n    return split.join(\"/\");\n}\n/**\n * A typesafe helper for ensuring that a given response object has\n * the original _response attached.\n * @param response - A response object from calling a client operation\n * @returns The same object, but with known _response property\n */\nexport function assertResponse(response) {\n    if (`_response` in response) {\n        return response;\n    }\n    throw new TypeError(`Unexpected response object ${response}`);\n}\n//# sourceMappingURL=utils.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/*\n * We need to imitate .Net culture-aware sorting, which is used in storage service.\n * Below tables contain sort-keys for en-US culture.\n */\nconst table_lv0 = new Uint32Array([\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71c, 0x0, 0x71f, 0x721,\n    0x723, 0x725, 0x0, 0x0, 0x0, 0x72d, 0x803, 0x0, 0x0, 0x733, 0x0, 0xd03, 0xd1a, 0xd1c, 0xd1e,\n    0xd20, 0xd22, 0xd24, 0xd26, 0xd28, 0xd2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe02, 0xe09, 0xe0a,\n    0xe1a, 0xe21, 0xe23, 0xe25, 0xe2c, 0xe32, 0xe35, 0xe36, 0xe48, 0xe51, 0xe70, 0xe7c, 0xe7e, 0xe89,\n    0xe8a, 0xe91, 0xe99, 0xe9f, 0xea2, 0xea4, 0xea6, 0xea7, 0xea9, 0x0, 0x0, 0x0, 0x743, 0x744, 0x748,\n    0xe02, 0xe09, 0xe0a, 0xe1a, 0xe21, 0xe23, 0xe25, 0xe2c, 0xe32, 0xe35, 0xe36, 0xe48, 0xe51, 0xe70,\n    0xe7c, 0xe7e, 0xe89, 0xe8a, 0xe91, 0xe99, 0xe9f, 0xea2, 0xea4, 0xea6, 0xea7, 0xea9, 0x0, 0x74c,\n    0x0, 0x750, 0x0,\n]);\nconst table_lv2 = new Uint32Array([\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,\n    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,\n    0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n]);\nconst table_lv4 = new Uint32Array([\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x8012, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8212, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n]);\nexport function compareHeader(lhs, rhs) {\n    if (isLessThan(lhs, rhs))\n        return -1;\n    return 1;\n}\nfunction isLessThan(lhs, rhs) {\n    const tables = [table_lv0, table_lv2, table_lv4];\n    let curr_level = 0;\n    let i = 0;\n    let j = 0;\n    while (curr_level < tables.length) {\n        if (curr_level === tables.length - 1 && i !== j) {\n            return i > j;\n        }\n        const weight1 = i < lhs.length ? tables[curr_level][lhs[i].charCodeAt(0)] : 0x1;\n        const weight2 = j < rhs.length ? tables[curr_level][rhs[j].charCodeAt(0)] : 0x1;\n        if (weight1 === 0x1 && weight2 === 0x1) {\n            i = 0;\n            j = 0;\n            ++curr_level;\n        }\n        else if (weight1 === weight2) {\n            ++i;\n            ++j;\n        }\n        else if (weight1 === 0) {\n            ++i;\n        }\n        else if (weight2 === 0) {\n            ++j;\n        }\n        else {\n            return weight1 < weight2;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=SharedKeyComparator.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\nlet _defaultHttpClient;\nexport function getCachedDefaultHttpClient() {\n    if (!_defaultHttpClient) {\n        _defaultHttpClient = createDefaultHttpClient();\n    }\n    return _defaultHttpClient;\n}\n//# sourceMappingURL=cache.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode } from \"@azure/core-util\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * The programmatic identifier of the StorageBrowserPolicy.\n */\nexport const storageBrowserPolicyName = \"storageBrowserPolicy\";\n/**\n * storageBrowserPolicy is a policy used to prevent browsers from caching requests\n * and to remove cookies and explicit content-length headers.\n */\nexport function storageBrowserPolicy() {\n    return {\n        name: storageBrowserPolicyName,\n        async sendRequest(request, next) {\n            if (isNode) {\n                return next(request);\n            }\n            if (request.method === \"GET\" || request.method === \"HEAD\") {\n                request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n            }\n            request.headers.delete(HeaderConstants.COOKIE);\n            // According to XHR standards, content-length should be fully controlled by browsers\n            request.headers.delete(HeaderConstants.CONTENT_LENGTH);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageBrowserPolicyV2.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { isRestError, RestError, } from \"@azure/core-rest-pipeline\";\nimport { getErrorMessage } from \"@azure/core-util\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * Name of the {@link storageRetryPolicy}\n */\nexport const storageRetryPolicyName = \"storageRetryPolicy\";\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst retriableErrors = [\n    \"ETIMEDOUT\",\n    \"ESOCKETTIMEDOUT\",\n    \"ECONNREFUSED\",\n    \"ECONNRESET\",\n    \"ENOENT\",\n    \"ENOTFOUND\",\n    \"TIMEOUT\",\n    \"EPIPE\",\n    \"REQUEST_SEND_ERROR\",\n];\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport function storageRetryPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    const retryPolicyType = (_a = options.retryPolicyType) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_OPTIONS.retryPolicyType;\n    const maxTries = (_b = options.maxTries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_OPTIONS.maxTries;\n    const retryDelayInMs = (_c = options.retryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_OPTIONS.retryDelayInMs;\n    const maxRetryDelayInMs = (_d = options.maxRetryDelayInMs) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;\n    const secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;\n    const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;\n    function shouldRetry({ isPrimaryRetry, attempt, response, error, }) {\n        var _a, _b;\n        if (attempt >= maxTries) {\n            logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);\n            return false;\n        }\n        if (error) {\n            for (const retriableError of retriableErrors) {\n                if (error.name.toUpperCase().includes(retriableError) ||\n                    error.message.toUpperCase().includes(retriableError) ||\n                    (error.code && error.code.toString().toUpperCase() === retriableError)) {\n                    logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n            if ((error === null || error === void 0 ? void 0 : error.code) === \"PARSE_ERROR\" &&\n                (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n                logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n                return true;\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || error) {\n            const statusCode = (_b = (_a = response === null || response === void 0 ? void 0 : response.status) !== null && _a !== void 0 ? _a : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b !== void 0 ? _b : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        return false;\n    }\n    function calculateDelay(isPrimaryRetry, attempt) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delayTimeInMs;\n    }\n    return {\n        name: storageRetryPolicyName,\n        async sendRequest(request, next) {\n            // Set the server-side timeout query parameter \"timeout=[seconds]\"\n            if (tryTimeoutInMs) {\n                request.url = setURLParameter(request.url, URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1000)));\n            }\n            const primaryUrl = request.url;\n            const secondaryUrl = secondaryHost ? setURLHost(request.url, secondaryHost) : undefined;\n            let secondaryHas404 = false;\n            let attempt = 1;\n            let retryAgain = true;\n            let response;\n            let error;\n            while (retryAgain) {\n                const isPrimaryRetry = secondaryHas404 ||\n                    !secondaryUrl ||\n                    ![\"GET\", \"HEAD\", \"OPTIONS\"].includes(request.method) ||\n                    attempt % 2 === 1;\n                request.url = isPrimaryRetry ? primaryUrl : secondaryUrl;\n                response = undefined;\n                error = undefined;\n                try {\n                    logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n                    response = await next(request);\n                    secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n                }\n                catch (e) {\n                    if (isRestError(e)) {\n                        logger.error(`RetryPolicy: Caught error, message: ${e.message}, code: ${e.code}`);\n                        error = e;\n                    }\n                    else {\n                        logger.error(`RetryPolicy: Caught error, message: ${getErrorMessage(e)}`);\n                        throw e;\n                    }\n                }\n                retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });\n                if (retryAgain) {\n                    await delay(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, RETRY_ABORT_ERROR);\n                }\n                attempt++;\n            }\n            if (response) {\n                return response;\n            }\n            throw error !== null && error !== void 0 ? error : new RestError(\"RetryPolicy failed without known error.\");\n        },\n    };\n}\n//# sourceMappingURL=StorageRetryPolicyV2.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHmac } from \"crypto\";\nimport { HeaderConstants } from \"../utils/constants\";\nimport { getURLPath, getURLQueries } from \"../utils/utils.common\";\nimport { compareHeader } from \"../utils/SharedKeyComparator\";\n/**\n * The programmatic identifier of the storageSharedKeyCredentialPolicy.\n */\nexport const storageSharedKeyCredentialPolicyName = \"storageSharedKeyCredentialPolicy\";\n/**\n * storageSharedKeyCredentialPolicy handles signing requests using storage account keys.\n */\nexport function storageSharedKeyCredentialPolicy(options) {\n    function signRequest(request) {\n        request.headers.set(HeaderConstants.X_MS_DATE, new Date().toUTCString());\n        if (request.body &&\n            (typeof request.body === \"string\" || Buffer.isBuffer(request.body)) &&\n            request.body.length > 0) {\n            request.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n        const stringToSign = [\n            request.method.toUpperCase(),\n            getHeaderValueToSign(request, HeaderConstants.CONTENT_LANGUAGE),\n            getHeaderValueToSign(request, HeaderConstants.CONTENT_ENCODING),\n            getHeaderValueToSign(request, HeaderConstants.CONTENT_LENGTH),\n            getHeaderValueToSign(request, HeaderConstants.CONTENT_MD5),\n            getHeaderValueToSign(request, HeaderConstants.CONTENT_TYPE),\n            getHeaderValueToSign(request, HeaderConstants.DATE),\n            getHeaderValueToSign(request, HeaderConstants.IF_MODIFIED_SINCE),\n            getHeaderValueToSign(request, HeaderConstants.IF_MATCH),\n            getHeaderValueToSign(request, HeaderConstants.IF_NONE_MATCH),\n            getHeaderValueToSign(request, HeaderConstants.IF_UNMODIFIED_SINCE),\n            getHeaderValueToSign(request, HeaderConstants.RANGE),\n        ].join(\"\\n\") +\n            \"\\n\" +\n            getCanonicalizedHeadersString(request) +\n            getCanonicalizedResourceString(request);\n        const signature = createHmac(\"sha256\", options.accountKey)\n            .update(stringToSign, \"utf8\")\n            .digest(\"base64\");\n        request.headers.set(HeaderConstants.AUTHORIZATION, `SharedKey ${options.accountName}:${signature}`);\n        // console.log(`[URL]:${request.url}`);\n        // console.log(`[HEADERS]:${request.headers.toString()}`);\n        // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n        // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n    }\n    /**\n     * Retrieve header value according to shared key sign rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n     */\n    function getHeaderValueToSign(request, headerName) {\n        const value = request.headers.get(headerName);\n        if (!value) {\n            return \"\";\n        }\n        // When using version 2015-02-21 or later, if Content-Length is zero, then\n        // set the Content-Length part of the StringToSign to an empty string.\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n        if (headerName === HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n            return \"\";\n        }\n        return value;\n    }\n    /**\n     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n     * 2. Convert each HTTP header name to lowercase.\n     * 3. Sort the headers lexicographically by header name, in ascending order.\n     *    Each header may appear only once in the string.\n     * 4. Replace any linear whitespace in the header value with a single space.\n     * 5. Trim any whitespace around the colon in the header.\n     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n     *\n     */\n    function getCanonicalizedHeadersString(request) {\n        let headersArray = [];\n        for (const [name, value] of request.headers) {\n            if (name.toLowerCase().startsWith(HeaderConstants.PREFIX_FOR_STORAGE)) {\n                headersArray.push({ name, value });\n            }\n        }\n        headersArray.sort((a, b) => {\n            return compareHeader(a.name.toLowerCase(), b.name.toLowerCase());\n        });\n        // Remove duplicate headers\n        headersArray = headersArray.filter((value, index, array) => {\n            if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        let canonicalizedHeadersStringToSign = \"\";\n        headersArray.forEach((header) => {\n            canonicalizedHeadersStringToSign += `${header.name\n                .toLowerCase()\n                .trimRight()}:${header.value.trimLeft()}\\n`;\n        });\n        return canonicalizedHeadersStringToSign;\n    }\n    function getCanonicalizedResourceString(request) {\n        const path = getURLPath(request.url) || \"/\";\n        let canonicalizedResourceString = \"\";\n        canonicalizedResourceString += `/${options.accountName}${path}`;\n        const queries = getURLQueries(request.url);\n        const lowercaseQueries = {};\n        if (queries) {\n            const queryKeys = [];\n            for (const key in queries) {\n                if (Object.prototype.hasOwnProperty.call(queries, key)) {\n                    const lowercaseKey = key.toLowerCase();\n                    lowercaseQueries[lowercaseKey] = queries[key];\n                    queryKeys.push(lowercaseKey);\n                }\n            }\n            queryKeys.sort();\n            for (const key of queryKeys) {\n                canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n            }\n        }\n        return canonicalizedResourceString;\n    }\n    return {\n        name: storageSharedKeyCredentialPolicyName,\n        async sendRequest(request, next) {\n            signRequest(request);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicyV2.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HeaderConstants } from \"../utils/constants\";\n/**\n * The programmatic identifier of the storageCorrectContentLengthPolicy.\n */\nexport const storageCorrectContentLengthPolicyName = \"StorageCorrectContentLengthPolicy\";\n/**\n * storageCorrectContentLengthPolicy to correctly set Content-Length header with request body length.\n */\nexport function storageCorrectContentLengthPolicy() {\n    function correctContentLength(request) {\n        if (request.body &&\n            (typeof request.body === \"string\" || Buffer.isBuffer(request.body)) &&\n            request.body.length > 0) {\n            request.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n    }\n    return {\n        name: storageCorrectContentLengthPolicyName,\n        async sendRequest(request, next) {\n            correctContentLength(request);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageCorrectContentLengthPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __rest } from \"tslib\";\nimport { convertHttpClient, createRequestPolicyFactoryPolicy, } from \"@azure/core-http-compat\";\nimport { bearerTokenAuthenticationPolicy, decompressResponsePolicyName, } from \"@azure/core-rest-pipeline\";\nimport { authorizeRequestOnTenantChallenge, createClientPipeline } from \"@azure/core-client\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { logger } from \"./log\";\nimport { StorageRetryPolicyFactory } from \"./StorageRetryPolicyFactory\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageOAuthScopes, StorageBlobLoggingAllowedHeaderNames, StorageBlobLoggingAllowedQueryParameters, SDK_VERSION, } from \"./utils/constants\";\nimport { getCachedDefaultHttpClient } from \"./utils/cache\";\nimport { storageBrowserPolicy } from \"./policies/StorageBrowserPolicyV2\";\nimport { storageRetryPolicy } from \"./policies/StorageRetryPolicyV2\";\nimport { storageSharedKeyCredentialPolicy } from \"./policies/StorageSharedKeyCredentialPolicyV2\";\nimport { StorageBrowserPolicyFactory } from \"./StorageBrowserPolicyFactory\";\nimport { storageCorrectContentLengthPolicy } from \"./policies/StorageCorrectContentLengthPolicy\";\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport { StorageOAuthScopes, };\n/**\n * A helper to decide if a given argument satisfies the Pipeline contract\n * @param pipeline - An argument that may be a Pipeline\n * @returns true when the argument satisfies the Pipeline contract\n */\nexport function isPipelineLike(pipeline) {\n    if (!pipeline || typeof pipeline !== \"object\") {\n        return false;\n    }\n    const castPipeline = pipeline;\n    return (Array.isArray(castPipeline.factories) &&\n        typeof castPipeline.options === \"object\" &&\n        typeof castPipeline.toServiceClientOptions === \"function\");\n}\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nexport class Pipeline {\n    /**\n     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n     *\n     * @param factories -\n     * @param options -\n     */\n    constructor(factories, options = {}) {\n        this.factories = factories;\n        this.options = options;\n    }\n    /**\n     * Transfer Pipeline object to ServiceClientOptions object which is required by\n     * ServiceClient constructor.\n     *\n     * @returns The ServiceClientOptions object from this Pipeline.\n     */\n    toServiceClientOptions() {\n        return {\n            httpClient: this.options.httpClient,\n            requestPolicyFactories: this.factories,\n        };\n    }\n}\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nexport function newPipeline(credential, pipelineOptions = {}) {\n    if (!credential) {\n        credential = new AnonymousCredential();\n    }\n    const pipeline = new Pipeline([], pipelineOptions);\n    pipeline._credential = credential;\n    return pipeline;\n}\nfunction processDownlevelPipeline(pipeline) {\n    const knownFactoryFunctions = [\n        isAnonymousCredential,\n        isStorageSharedKeyCredential,\n        isCoreHttpBearerTokenFactory,\n        isStorageBrowserPolicyFactory,\n        isStorageRetryPolicyFactory,\n        isStorageTelemetryPolicyFactory,\n        isCoreHttpPolicyFactory,\n    ];\n    if (pipeline.factories.length) {\n        const novelFactories = pipeline.factories.filter((factory) => {\n            return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory));\n        });\n        if (novelFactories.length) {\n            const hasInjector = novelFactories.some((factory) => isInjectorPolicyFactory(factory));\n            // if there are any left over, wrap in a requestPolicyFactoryPolicy\n            return {\n                wrappedPolicies: createRequestPolicyFactoryPolicy(novelFactories),\n                afterRetry: hasInjector,\n            };\n        }\n    }\n    return undefined;\n}\nexport function getCoreClientOptions(pipeline) {\n    var _a;\n    const _b = pipeline.options, { httpClient: v1Client } = _b, restOptions = __rest(_b, [\"httpClient\"]);\n    let httpClient = pipeline._coreHttpClient;\n    if (!httpClient) {\n        httpClient = v1Client ? convertHttpClient(v1Client) : getCachedDefaultHttpClient();\n        pipeline._coreHttpClient = httpClient;\n    }\n    let corePipeline = pipeline._corePipeline;\n    if (!corePipeline) {\n        const packageDetails = `azsdk-js-azure-storage-blob/${SDK_VERSION}`;\n        const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix\n            ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        corePipeline = createClientPipeline(Object.assign(Object.assign({}, restOptions), { loggingOptions: {\n                additionalAllowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,\n                additionalAllowedQueryParameters: StorageBlobLoggingAllowedQueryParameters,\n                logger: logger.info,\n            }, userAgentOptions: {\n                userAgentPrefix,\n            }, serializationOptions: {\n                stringifyXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            }, deserializationOptions: {\n                parseXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            } }));\n        corePipeline.removePolicy({ phase: \"Retry\" });\n        corePipeline.removePolicy({ name: decompressResponsePolicyName });\n        corePipeline.addPolicy(storageCorrectContentLengthPolicy());\n        corePipeline.addPolicy(storageRetryPolicy(restOptions.retryOptions), { phase: \"Retry\" });\n        corePipeline.addPolicy(storageBrowserPolicy());\n        const downlevelResults = processDownlevelPipeline(pipeline);\n        if (downlevelResults) {\n            corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: \"Retry\" } : undefined);\n        }\n        const credential = getCredentialFromPipeline(pipeline);\n        if (isTokenCredential(credential)) {\n            corePipeline.addPolicy(bearerTokenAuthenticationPolicy({\n                credential,\n                scopes: (_a = restOptions.audience) !== null && _a !== void 0 ? _a : StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof StorageSharedKeyCredential) {\n            corePipeline.addPolicy(storageSharedKeyCredentialPolicy({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        pipeline._corePipeline = corePipeline;\n    }\n    return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });\n}\nexport function getCredentialFromPipeline(pipeline) {\n    // see if we squirreled one away on the type itself\n    if (pipeline._credential) {\n        return pipeline._credential;\n    }\n    // if it came from another package, loop over the factories and look for one like before\n    let credential = new AnonymousCredential();\n    for (const factory of pipeline.factories) {\n        if (isTokenCredential(factory.credential)) {\n            // Only works if the factory has been attached a \"credential\" property.\n            // We do that in newPipeline() when using TokenCredential.\n            credential = factory.credential;\n        }\n        else if (isStorageSharedKeyCredential(factory)) {\n            return factory;\n        }\n    }\n    return credential;\n}\nfunction isStorageSharedKeyCredential(factory) {\n    if (factory instanceof StorageSharedKeyCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageSharedKeyCredential\";\n}\nfunction isAnonymousCredential(factory) {\n    if (factory instanceof AnonymousCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"AnonymousCredential\";\n}\nfunction isCoreHttpBearerTokenFactory(factory) {\n    return isTokenCredential(factory.credential);\n}\nfunction isStorageBrowserPolicyFactory(factory) {\n    if (factory instanceof StorageBrowserPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageBrowserPolicyFactory\";\n}\nfunction isStorageRetryPolicyFactory(factory) {\n    if (factory instanceof StorageRetryPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageRetryPolicyFactory\";\n}\nfunction isStorageTelemetryPolicyFactory(factory) {\n    return factory.constructor.name === \"TelemetryPolicyFactory\";\n}\nfunction isInjectorPolicyFactory(factory) {\n    return factory.constructor.name === \"InjectorPolicyFactory\";\n}\nfunction isCoreHttpPolicyFactory(factory) {\n    const knownPolicies = [\n        \"GenerateClientRequestIdPolicy\",\n        \"TracingPolicy\",\n        \"LogPolicy\",\n        \"ProxyPolicy\",\n        \"DisableResponseDecompressionPolicy\",\n        \"KeepAlivePolicy\",\n        \"DeserializationPolicy\",\n    ];\n    const mockHttpClient = {\n        sendRequest: async (request) => {\n            return {\n                request,\n                headers: request.headers.clone(),\n                status: 500,\n            };\n        },\n    };\n    const mockRequestPolicyOptions = {\n        log(_logLevel, _message) {\n            /* do nothing */\n        },\n        shouldLog(_logLevel) {\n            return false;\n        },\n    };\n    const policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions);\n    const policyName = policyInstance.constructor.name;\n    // bundlers sometimes add a custom suffix to the class name to make it unique\n    return knownPolicies.some((knownPolicyName) => {\n        return policyName.startsWith(knownPolicyName);\n    });\n}\n//# sourceMappingURL=Pipeline.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nexport function ipRangeToString(ipRange) {\n    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n//# sourceMappingURL=SasIPRange.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BlobSASPermissions } from \"./BlobSASPermissions\";\nimport { ContainerSASPermissions } from \"./ContainerSASPermissions\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nexport function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n    const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n        ? sharedKeyCredentialOrUserDelegationKey\n        : undefined;\n    let userDelegationKeyCredential;\n    if (sharedKeyCredential === undefined && accountName !== undefined) {\n        userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);\n    }\n    if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n        throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n    }\n    // Version 2020-12-06 adds support for encryptionscope in SAS.\n    if (version >= \"2020-12-06\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);\n        }\n    }\n    // Version 2019-12-12 adds support for the blob tags permission.\n    // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n    if (version >= \"2018-11-09\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n            if (version >= \"2020-02-10\") {\n                return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n            else {\n                return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n        }\n    }\n    if (version >= \"2015-04-05\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            throw new RangeError(\"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\");\n        }\n    }\n    throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);\n}\nfunction getCanonicalName(accountName, containerName, blobName) {\n    // Container: \"/blob/account/containerName\"\n    // Blob:      \"/blob/account/containerName/blobName\"\n    const elements = [`/blob/${accountName}/${containerName}`];\n    if (blobName) {\n        elements.push(`/${blobName}`);\n    }\n    return elements.join(\"\");\n}\nfunction SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n    if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n        throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n        throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n        throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        blobSASSignatureValues.permissions &&\n        (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n    }\n    if (version < \"2021-04-10\" &&\n        blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.filterByTags) {\n        throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\");\n    }\n    if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    blobSASSignatureValues.version = version;\n    return blobSASSignatureValues;\n}\n//# sourceMappingURL=BlobSASSignatureValues.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport function arraysEqual(a, b) {\n    if (a === b)\n        return true;\n    // eslint-disable-next-line eqeqeq\n    if (a == null || b == null)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\n//# sourceMappingURL=utils.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { EncryptionAlgorithmAES25 } from \"./utils/constants\";\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nexport var BlockBlobTier;\n(function (BlockBlobTier) {\n    /**\n     * Optimized for storing data that is accessed frequently.\n     */\n    BlockBlobTier[\"Hot\"] = \"Hot\";\n    /**\n     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n     */\n    BlockBlobTier[\"Cool\"] = \"Cool\";\n    /**\n     * Optimized for storing data that is rarely accessed.\n     */\n    BlockBlobTier[\"Cold\"] = \"Cold\";\n    /**\n     * Optimized for storing data that is rarely accessed and stored for at least 180 days\n     * with flexible latency requirements (on the order of hours).\n     */\n    BlockBlobTier[\"Archive\"] = \"Archive\";\n})(BlockBlobTier || (BlockBlobTier = {}));\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughput per PageBlobTier.\n */\nexport var PremiumPageBlobTier;\n(function (PremiumPageBlobTier) {\n    /**\n     * P4 Tier.\n     */\n    PremiumPageBlobTier[\"P4\"] = \"P4\";\n    /**\n     * P6 Tier.\n     */\n    PremiumPageBlobTier[\"P6\"] = \"P6\";\n    /**\n     * P10 Tier.\n     */\n    PremiumPageBlobTier[\"P10\"] = \"P10\";\n    /**\n     * P15 Tier.\n     */\n    PremiumPageBlobTier[\"P15\"] = \"P15\";\n    /**\n     * P20 Tier.\n     */\n    PremiumPageBlobTier[\"P20\"] = \"P20\";\n    /**\n     * P30 Tier.\n     */\n    PremiumPageBlobTier[\"P30\"] = \"P30\";\n    /**\n     * P40 Tier.\n     */\n    PremiumPageBlobTier[\"P40\"] = \"P40\";\n    /**\n     * P50 Tier.\n     */\n    PremiumPageBlobTier[\"P50\"] = \"P50\";\n    /**\n     * P60 Tier.\n     */\n    PremiumPageBlobTier[\"P60\"] = \"P60\";\n    /**\n     * P70 Tier.\n     */\n    PremiumPageBlobTier[\"P70\"] = \"P70\";\n    /**\n     * P80 Tier.\n     */\n    PremiumPageBlobTier[\"P80\"] = \"P80\";\n})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));\nexport function toAccessTier(tier) {\n    if (tier === undefined) {\n        return undefined;\n    }\n    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\nexport function ensureCpkIfSpecified(cpk, isHttps) {\n    if (cpk && !isHttps) {\n        throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n    }\n    if (cpk && !cpk.encryptionAlgorithm) {\n        cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;\n    }\n}\n/**\n * Defines the known cloud audiences for Storage.\n */\nexport var StorageBlobAudience;\n(function (StorageBlobAudience) {\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Storage.\n     */\n    StorageBlobAudience[\"StorageOAuthScopes\"] = \"https://storage.azure.com/.default\";\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Disk.\n     */\n    StorageBlobAudience[\"DiskComputeOAuthScopes\"] = \"https://disk.compute.azure.com/.default\";\n})(StorageBlobAudience || (StorageBlobAudience = {}));\n/**\n *\n * To get OAuth audience for a storage account for blob service.\n */\nexport function getBlobServiceAccountAudience(storageAccountName) {\n    return `https://${storageAccountName}.blob.core.windows.net/.default`;\n}\n//# sourceMappingURL=models.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Function that converts PageRange and ClearRange to a common Range object.\n * PageRange and ClearRange have start and end while Range offset and count\n * this function normalizes to Range.\n * @param response - Model PageBlob Range response\n */\nexport function rangeResponseFromModel(response) {\n    const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    return Object.assign(Object.assign({}, response), { pageRange,\n        clearRange, _response: Object.assign(Object.assign({}, response._response), { parsedBody: {\n                pageRange,\n                clearRange,\n            } }) });\n}\n//# sourceMappingURL=PageBlobRangeResponse.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"@azure/core-util\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller {\n    constructor(options) {\n        const { blobClient, copySource, intervalInMs = 15000, onProgress, resumeFrom, startCopyFromURLOptions, } = options;\n        let state;\n        if (resumeFrom) {\n            state = JSON.parse(resumeFrom).state;\n        }\n        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), { blobClient,\n            copySource,\n            startCopyFromURLOptions }));\n        super(operation);\n        if (typeof onProgress === \"function\") {\n            this.onProgress(onProgress);\n        }\n        this.intervalInMs = intervalInMs;\n    }\n    delay() {\n        return delay(this.intervalInMs);\n    }\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel = async function cancel(options = {}) {\n    const state = this.state;\n    const { copyId } = state;\n    if (state.isCompleted) {\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    if (!copyId) {\n        state.isCancelled = true;\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n    await state.blobClient.abortCopyFromURL(copyId, {\n        abortSignal: options.abortSignal,\n    });\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update = async function update(options = {}) {\n    const state = this.state;\n    const { blobClient, copySource, startCopyFromURLOptions } = state;\n    if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n        // copyId is needed to abort\n        state.copyId = result.copyId;\n        if (result.copyStatus === \"success\") {\n            state.result = result;\n            state.isCompleted = true;\n        }\n    }\n    else if (!state.isCompleted) {\n        try {\n            const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n            const { copyStatus, copyProgress } = result;\n            const prevCopyProgress = state.copyProgress;\n            if (copyProgress) {\n                state.copyProgress = copyProgress;\n            }\n            if (copyStatus === \"pending\" &&\n                copyProgress !== prevCopyProgress &&\n                typeof options.fireProgress === \"function\") {\n                // trigger in setTimeout, or swallow error?\n                options.fireProgress(state);\n            }\n            else if (copyStatus === \"success\") {\n                state.result = result;\n                state.isCompleted = true;\n            }\n            else if (copyStatus === \"failed\") {\n                state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n                state.isCompleted = true;\n            }\n        }\n        catch (err) {\n            state.error = err;\n            state.isCompleted = true;\n        }\n    }\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString = function toString() {\n    return JSON.stringify({ state: this.state }, (key, value) => {\n        // remove blobClient from serialized state since a client can't be hydrated from this info.\n        if (key === \"blobClient\") {\n            return undefined;\n        }\n        return value;\n    });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n    return {\n        state: Object.assign({}, state),\n        cancel,\n        toString,\n        update,\n    };\n}\n//# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @param iRange -\n */\nexport function rangeToString(iRange) {\n    if (iRange.offset < 0) {\n        throw new RangeError(`Range.offset cannot be smaller than 0.`);\n    }\n    if (iRange.count && iRange.count <= 0) {\n        throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);\n    }\n    return iRange.count\n        ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n        : `bytes=${iRange.offset}-`;\n}\n//# sourceMappingURL=Range.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as fs from \"fs\";\nimport * as util from \"util\";\nimport { REQUEST_TIMEOUT } from \"./constants\";\n/**\n * Reads a readable stream into buffer. Fill the buffer from offset to end.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param offset - From which position in the buffer to be filled, inclusive\n * @param end - To which position in the buffer to be filled, exclusive\n * @param encoding - Encoding of the Readable stream\n */\nexport async function streamToBuffer(stream, buffer, offset, end, encoding) {\n    let pos = 0; // Position in stream\n    const count = end - offset; // Total amount of data needed in stream\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(new Error(`The operation cannot be completed in timeout.`)), REQUEST_TIMEOUT);\n        stream.on(\"readable\", () => {\n            if (pos >= count) {\n                clearTimeout(timeout);\n                resolve();\n                return;\n            }\n            let chunk = stream.read();\n            if (!chunk) {\n                return;\n            }\n            if (typeof chunk === \"string\") {\n                chunk = Buffer.from(chunk, encoding);\n            }\n            // How much data needed in this chunk\n            const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;\n            buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);\n            pos += chunkLength;\n        });\n        stream.on(\"end\", () => {\n            clearTimeout(timeout);\n            if (pos < count) {\n                reject(new Error(`Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`));\n            }\n            resolve();\n        });\n        stream.on(\"error\", (msg) => {\n            clearTimeout(timeout);\n            reject(msg);\n        });\n    });\n}\n/**\n * Reads a readable stream into buffer entirely.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n * @throws `RangeError` If buffer size is not big enough.\n */\nexport async function streamToBuffer2(stream, buffer, encoding) {\n    let pos = 0; // Position in stream\n    const bufferSize = buffer.length;\n    return new Promise((resolve, reject) => {\n        stream.on(\"readable\", () => {\n            let chunk = stream.read();\n            if (!chunk) {\n                return;\n            }\n            if (typeof chunk === \"string\") {\n                chunk = Buffer.from(chunk, encoding);\n            }\n            if (pos + chunk.length > bufferSize) {\n                reject(new Error(`Stream exceeds buffer size. Buffer size: ${bufferSize}`));\n                return;\n            }\n            buffer.fill(chunk, pos, pos + chunk.length);\n            pos += chunk.length;\n        });\n        stream.on(\"end\", () => {\n            resolve(pos);\n        });\n        stream.on(\"error\", reject);\n    });\n}\n/**\n * Reads a readable stream into a buffer.\n *\n * @param stream - A Node.js Readable stream\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n */\nexport async function streamToBuffer3(readableStream, encoding) {\n    return new Promise((resolve, reject) => {\n        const chunks = [];\n        readableStream.on(\"data\", (data) => {\n            chunks.push(data instanceof Buffer ? data : Buffer.from(data, encoding));\n        });\n        readableStream.on(\"end\", () => {\n            resolve(Buffer.concat(chunks));\n        });\n        readableStream.on(\"error\", reject);\n    });\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Writes the content of a readstream to a local file. Returns a Promise which is completed after the file handle is closed.\n *\n * @param rs - The read stream.\n * @param file - Destination file path.\n */\nexport async function readStreamToLocalFile(rs, file) {\n    return new Promise((resolve, reject) => {\n        const ws = fs.createWriteStream(file);\n        rs.on(\"error\", (err) => {\n            reject(err);\n        });\n        ws.on(\"error\", (err) => {\n            reject(err);\n        });\n        ws.on(\"close\", resolve);\n        rs.pipe(ws);\n    });\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Promisified version of fs.stat().\n */\nexport const fsStat = util.promisify(fs.stat);\nexport const fsCreateReadStream = fs.createReadStream;\n//# sourceMappingURL=utils.node.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { streamToBuffer2 } from \"./utils/utils.node\";\nimport { BATCH_MAX_PAYLOAD_IN_BYTES } from \"./utils/constants\";\nexport async function getBodyAsText(batchResponse) {\n    let buffer = Buffer.alloc(BATCH_MAX_PAYLOAD_IN_BYTES);\n    const responseLength = await streamToBuffer2(batchResponse.readableStreamBody, buffer);\n    // Slice the buffer to trim the empty ending.\n    buffer = buffer.slice(0, responseLength);\n    return buffer.toString();\n}\nexport function utf8ByteLength(str) {\n    return Buffer.byteLength(str);\n}\n//# sourceMappingURL=BatchUtils.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { randomUUID } from \"@azure/core-util\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy, createEmptyPipeline, createHttpHeaders, } from \"@azure/core-rest-pipeline\";\nimport { isNode } from \"@azure/core-util\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobClient } from \"./Clients\";\nimport { Mutex } from \"./utils/Mutex\";\nimport { Pipeline } from \"./Pipeline\";\nimport { getURLPath, getURLPathAndQuery, iEqual } from \"./utils/utils.common\";\nimport { stringifyXML } from \"@azure/core-xml\";\nimport { HeaderConstants, BATCH_MAX_REQUEST, HTTP_VERSION_1_1, HTTP_LINE_ENDING, StorageOAuthScopes, } from \"./utils/constants\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { authorizeRequestOnTenantChallenge, serializationPolicy } from \"@azure/core-client\";\nimport { storageSharedKeyCredentialPolicy } from \"./policies/StorageSharedKeyCredentialPolicyV2\";\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\nexport class BlobBatch {\n    constructor() {\n        this.batch = \"batch\";\n        this.batchRequest = new InnerBatchRequest();\n    }\n    /**\n     * Get the value of Content-Type for a batch request.\n     * The value must be multipart/mixed with a batch boundary.\n     * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n     */\n    getMultiPartContentType() {\n        return this.batchRequest.getMultipartContentType();\n    }\n    /**\n     * Get assembled HTTP request body for sub requests.\n     */\n    getHttpRequestBody() {\n        return this.batchRequest.getHttpRequestBody();\n    }\n    /**\n     * Get sub requests that are added into the batch request.\n     */\n    getSubRequests() {\n        return this.batchRequest.getSubRequests();\n    }\n    async addSubRequestInternal(subRequest, assembleSubRequestFunc) {\n        await Mutex.lock(this.batch);\n        try {\n            this.batchRequest.preAddSubRequest(subRequest);\n            await assembleSubRequestFunc();\n            this.batchRequest.postAddSubRequest(subRequest);\n        }\n        finally {\n            await Mutex.unlock(this.batch);\n        }\n    }\n    setBatchType(batchType) {\n        if (!this.batchType) {\n            this.batchType = batchType;\n        }\n        if (this.batchType !== batchType) {\n            throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);\n        }\n    }\n    async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {\n        let url;\n        let credential;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((isNode && credentialOrOptions instanceof StorageSharedKeyCredential) ||\n                credentialOrOptions instanceof AnonymousCredential ||\n                isTokenCredential(credentialOrOptions))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrOptions;\n        }\n        else if (urlOrBlobClient instanceof BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            options = credentialOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return tracingClient.withSpan(\"BatchDeleteRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"delete\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);\n            });\n        });\n    }\n    async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {\n        let url;\n        let credential;\n        let tier;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((isNode && credentialOrTier instanceof StorageSharedKeyCredential) ||\n                credentialOrTier instanceof AnonymousCredential ||\n                isTokenCredential(credentialOrTier))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrTier;\n            tier = tierOrOptions;\n        }\n        else if (urlOrBlobClient instanceof BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            tier = credentialOrTier;\n            options = tierOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return tracingClient.withSpan(\"BatchSetTierRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"setAccessTier\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);\n            });\n        });\n    }\n}\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\nclass InnerBatchRequest {\n    constructor() {\n        this.operationCount = 0;\n        this.body = \"\";\n        const tempGuid = randomUUID();\n        // batch_{batchid}\n        this.boundary = `batch_${tempGuid}`;\n        // --batch_{batchid}\n        // Content-Type: application/http\n        // Content-Transfer-Encoding: binary\n        this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n        // multipart/mixed; boundary=batch_{batchid}\n        this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;\n        // --batch_{batchid}--\n        this.batchRequestEnding = `--${this.boundary}--`;\n        this.subRequests = new Map();\n    }\n    /**\n     * Create pipeline to assemble sub requests. The idea here is to use existing\n     * credential and serialization/deserialization components, with additional policies to\n     * filter unnecessary headers, assemble sub requests into request's body\n     * and intercept request from going to wire.\n     * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n     */\n    createPipeline(credential) {\n        const corePipeline = createEmptyPipeline();\n        corePipeline.addPolicy(serializationPolicy({\n            stringifyXML,\n            serializerOptions: {\n                xml: {\n                    xmlCharKey: \"#\",\n                },\n            },\n        }), { phase: \"Serialize\" });\n        // Use batch header filter policy to exclude unnecessary headers\n        corePipeline.addPolicy(batchHeaderFilterPolicy());\n        // Use batch assemble policy to assemble request and intercept request from going to wire\n        corePipeline.addPolicy(batchRequestAssemblePolicy(this), { afterPhase: \"Sign\" });\n        if (isTokenCredential(credential)) {\n            corePipeline.addPolicy(bearerTokenAuthenticationPolicy({\n                credential,\n                scopes: StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof StorageSharedKeyCredential) {\n            corePipeline.addPolicy(storageSharedKeyCredentialPolicy({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        const pipeline = new Pipeline([]);\n        // attach the v2 pipeline to this one\n        pipeline._credential = credential;\n        pipeline._corePipeline = corePipeline;\n        return pipeline;\n    }\n    appendSubRequestToBody(request) {\n        // Start to assemble sub request\n        this.body += [\n            this.subRequestPrefix, // sub request constant prefix\n            `${HeaderConstants.CONTENT_ID}: ${this.operationCount}`, // sub request's content ID\n            \"\", // empty line after sub request's content ID\n            `${request.method.toString()} ${getURLPathAndQuery(request.url)} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}`, // sub request start line with method\n        ].join(HTTP_LINE_ENDING);\n        for (const [name, value] of request.headers) {\n            this.body += `${name}: ${value}${HTTP_LINE_ENDING}`;\n        }\n        this.body += HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n        // No body to assemble for current batch request support\n        // End to assemble sub request\n    }\n    preAddSubRequest(subRequest) {\n        if (this.operationCount >= BATCH_MAX_REQUEST) {\n            throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);\n        }\n        // Fast fail if url for sub request is invalid\n        const path = getURLPath(subRequest.url);\n        if (!path || path === \"\") {\n            throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n        }\n    }\n    postAddSubRequest(subRequest) {\n        this.subRequests.set(this.operationCount, subRequest);\n        this.operationCount++;\n    }\n    // Return the http request body with assembling the ending line to the sub request body.\n    getHttpRequestBody() {\n        return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;\n    }\n    getMultipartContentType() {\n        return this.multipartContentType;\n    }\n    getSubRequests() {\n        return this.subRequests;\n    }\n}\nfunction batchRequestAssemblePolicy(batchRequest) {\n    return {\n        name: \"batchRequestAssemblePolicy\",\n        async sendRequest(request) {\n            batchRequest.appendSubRequestToBody(request);\n            return {\n                request,\n                status: 200,\n                headers: createHttpHeaders(),\n            };\n        },\n    };\n}\nfunction batchHeaderFilterPolicy() {\n    return {\n        name: \"batchHeaderFilterPolicy\",\n        async sendRequest(request, next) {\n            let xMsHeaderName = \"\";\n            for (const [name] of request.headers) {\n                if (iEqual(name, HeaderConstants.X_MS_VERSION)) {\n                    xMsHeaderName = name;\n                }\n            }\n            if (xMsHeaderName !== \"\") {\n                request.headers.delete(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=BlobBatch.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {\n    const version = accountSASSignatureValues.version\n        ? accountSASSignatureValues.version\n        : SERVICE_VERSION;\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.filter &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n    }\n    if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());\n    const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n    const parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();\n    let stringToSign;\n    if (version >= \"2020-12-06\") {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    else {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);\n}\n//# sourceMappingURL=AccountSASSignatureValues.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.retryHttpClientResponse = exports.retryTypedResponse = exports.retry = exports.isRetryableStatusCode = exports.isServerErrorStatusCode = exports.isSuccessStatusCode = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst http_client_1 = require(\"@actions/http-client\");\nconst constants_1 = require(\"./constants\");\nfunction isSuccessStatusCode(statusCode) {\n    if (!statusCode) {\n        return false;\n    }\n    return statusCode >= 200 && statusCode < 300;\n}\nexports.isSuccessStatusCode = isSuccessStatusCode;\nfunction isServerErrorStatusCode(statusCode) {\n    if (!statusCode) {\n        return true;\n    }\n    return statusCode >= 500;\n}\nexports.isServerErrorStatusCode = isServerErrorStatusCode;\nfunction isRetryableStatusCode(statusCode) {\n    if (!statusCode) {\n        return false;\n    }\n    const retryableStatusCodes = [\n        http_client_1.HttpCodes.BadGateway,\n        http_client_1.HttpCodes.ServiceUnavailable,\n        http_client_1.HttpCodes.GatewayTimeout\n    ];\n    return retryableStatusCodes.includes(statusCode);\n}\nexports.isRetryableStatusCode = isRetryableStatusCode;\nfunction sleep(milliseconds) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => setTimeout(resolve, milliseconds));\n    });\n}\nfunction retry(name, method, getStatusCode, maxAttempts = constants_1.DefaultRetryAttempts, delay = constants_1.DefaultRetryDelay, onError = undefined) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let errorMessage = '';\n        let attempt = 1;\n        while (attempt <= maxAttempts) {\n            let response = undefined;\n            let statusCode = undefined;\n            let isRetryable = false;\n            try {\n                response = yield method();\n            }\n            catch (error) {\n                if (onError) {\n                    response = onError(error);\n                }\n                isRetryable = true;\n                errorMessage = error.message;\n            }\n            if (response) {\n                statusCode = getStatusCode(response);\n                if (!isServerErrorStatusCode(statusCode)) {\n                    return response;\n                }\n            }\n            if (statusCode) {\n                isRetryable = isRetryableStatusCode(statusCode);\n                errorMessage = `Cache service responded with ${statusCode}`;\n            }\n            core.debug(`${name} - Attempt ${attempt} of ${maxAttempts} failed with error: ${errorMessage}`);\n            if (!isRetryable) {\n                core.debug(`${name} - Error is not retryable`);\n                break;\n            }\n            yield sleep(delay);\n            attempt++;\n        }\n        throw Error(`${name} failed: ${errorMessage}`);\n    });\n}\nexports.retry = retry;\nfunction retryTypedResponse(name, method, maxAttempts = constants_1.DefaultRetryAttempts, delay = constants_1.DefaultRetryDelay) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield retry(name, method, (response) => response.statusCode, maxAttempts, delay, \n        // If the error object contains the statusCode property, extract it and return\n        // an TypedResponse<T> so it can be processed by the retry logic.\n        (error) => {\n            if (error instanceof http_client_1.HttpClientError) {\n                return {\n                    statusCode: error.statusCode,\n                    result: null,\n                    headers: {},\n                    error\n                };\n            }\n            else {\n                return undefined;\n            }\n        });\n    });\n}\nexports.retryTypedResponse = retryTypedResponse;\nfunction retryHttpClientResponse(name, method, maxAttempts = constants_1.DefaultRetryAttempts, delay = constants_1.DefaultRetryDelay) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield retry(name, method, (response) => response.message.statusCode, maxAttempts, delay);\n    });\n}\nexports.retryHttpClientResponse = retryHttpClientResponse;\n//# sourceMappingURL=requestUtils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.downloadCacheStorageSDK = exports.downloadCacheHttpClientConcurrent = exports.downloadCacheHttpClient = exports.DownloadProgress = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst http_client_1 = require(\"@actions/http-client\");\nconst storage_blob_1 = require(\"@azure/storage-blob\");\nconst buffer = __importStar(require(\"buffer\"));\nconst fs = __importStar(require(\"fs\"));\nconst stream = __importStar(require(\"stream\"));\nconst util = __importStar(require(\"util\"));\nconst utils = __importStar(require(\"./cacheUtils\"));\nconst constants_1 = require(\"./constants\");\nconst requestUtils_1 = require(\"./requestUtils\");\nconst abort_controller_1 = require(\"@azure/abort-controller\");\n/**\n * Pipes the body of a HTTP response to a stream\n *\n * @param response the HTTP response\n * @param output the writable stream\n */\nfunction pipeResponseToStream(response, output) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const pipeline = util.promisify(stream.pipeline);\n        yield pipeline(response.message, output);\n    });\n}\n/**\n * Class for tracking the download state and displaying stats.\n */\nclass DownloadProgress {\n    constructor(contentLength) {\n        this.contentLength = contentLength;\n        this.segmentIndex = 0;\n        this.segmentSize = 0;\n        this.segmentOffset = 0;\n        this.receivedBytes = 0;\n        this.displayedComplete = false;\n        this.startTime = Date.now();\n    }\n    /**\n     * Progress to the next segment. Only call this method when the previous segment\n     * is complete.\n     *\n     * @param segmentSize the length of the next segment\n     */\n    nextSegment(segmentSize) {\n        this.segmentOffset = this.segmentOffset + this.segmentSize;\n        this.segmentIndex = this.segmentIndex + 1;\n        this.segmentSize = segmentSize;\n        this.receivedBytes = 0;\n        core.debug(`Downloading segment at offset ${this.segmentOffset} with length ${this.segmentSize}...`);\n    }\n    /**\n     * Sets the number of bytes received for the current segment.\n     *\n     * @param receivedBytes the number of bytes received\n     */\n    setReceivedBytes(receivedBytes) {\n        this.receivedBytes = receivedBytes;\n    }\n    /**\n     * Returns the total number of bytes transferred.\n     */\n    getTransferredBytes() {\n        return this.segmentOffset + this.receivedBytes;\n    }\n    /**\n     * Returns true if the download is complete.\n     */\n    isDone() {\n        return this.getTransferredBytes() === this.contentLength;\n    }\n    /**\n     * Prints the current download stats. Once the download completes, this will print one\n     * last line and then stop.\n     */\n    display() {\n        if (this.displayedComplete) {\n            return;\n        }\n        const transferredBytes = this.segmentOffset + this.receivedBytes;\n        const percentage = (100 * (transferredBytes / this.contentLength)).toFixed(1);\n        const elapsedTime = Date.now() - this.startTime;\n        const downloadSpeed = (transferredBytes /\n            (1024 * 1024) /\n            (elapsedTime / 1000)).toFixed(1);\n        core.info(`Received ${transferredBytes} of ${this.contentLength} (${percentage}%), ${downloadSpeed} MBs/sec`);\n        if (this.isDone()) {\n            this.displayedComplete = true;\n        }\n    }\n    /**\n     * Returns a function used to handle TransferProgressEvents.\n     */\n    onProgress() {\n        return (progress) => {\n            this.setReceivedBytes(progress.loadedBytes);\n        };\n    }\n    /**\n     * Starts the timer that displays the stats.\n     *\n     * @param delayInMs the delay between each write\n     */\n    startDisplayTimer(delayInMs = 1000) {\n        const displayCallback = () => {\n            this.display();\n            if (!this.isDone()) {\n                this.timeoutHandle = setTimeout(displayCallback, delayInMs);\n            }\n        };\n        this.timeoutHandle = setTimeout(displayCallback, delayInMs);\n    }\n    /**\n     * Stops the timer that displays the stats. As this typically indicates the download\n     * is complete, this will display one last line, unless the last line has already\n     * been written.\n     */\n    stopDisplayTimer() {\n        if (this.timeoutHandle) {\n            clearTimeout(this.timeoutHandle);\n            this.timeoutHandle = undefined;\n        }\n        this.display();\n    }\n}\nexports.DownloadProgress = DownloadProgress;\n/**\n * Download the cache using the Actions toolkit http-client\n *\n * @param archiveLocation the URL for the cache\n * @param archivePath the local path where the cache is saved\n */\nfunction downloadCacheHttpClient(archiveLocation, archivePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const writeStream = fs.createWriteStream(archivePath);\n        const httpClient = new http_client_1.HttpClient('actions/cache');\n        const downloadResponse = yield (0, requestUtils_1.retryHttpClientResponse)('downloadCache', () => __awaiter(this, void 0, void 0, function* () { return httpClient.get(archiveLocation); }));\n        // Abort download if no traffic received over the socket.\n        downloadResponse.message.socket.setTimeout(constants_1.SocketTimeout, () => {\n            downloadResponse.message.destroy();\n            core.debug(`Aborting download, socket timed out after ${constants_1.SocketTimeout} ms`);\n        });\n        yield pipeResponseToStream(downloadResponse, writeStream);\n        // Validate download size.\n        const contentLengthHeader = downloadResponse.message.headers['content-length'];\n        if (contentLengthHeader) {\n            const expectedLength = parseInt(contentLengthHeader);\n            const actualLength = utils.getArchiveFileSizeInBytes(archivePath);\n            if (actualLength !== expectedLength) {\n                throw new Error(`Incomplete download. Expected file size: ${expectedLength}, actual file size: ${actualLength}`);\n            }\n        }\n        else {\n            core.debug('Unable to validate download, no Content-Length header');\n        }\n    });\n}\nexports.downloadCacheHttpClient = downloadCacheHttpClient;\n/**\n * Download the cache using the Actions toolkit http-client concurrently\n *\n * @param archiveLocation the URL for the cache\n * @param archivePath the local path where the cache is saved\n */\nfunction downloadCacheHttpClientConcurrent(archiveLocation, archivePath, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const archiveDescriptor = yield fs.promises.open(archivePath, 'w');\n        const httpClient = new http_client_1.HttpClient('actions/cache', undefined, {\n            socketTimeout: options.timeoutInMs,\n            keepAlive: true\n        });\n        try {\n            const res = yield (0, requestUtils_1.retryHttpClientResponse)('downloadCacheMetadata', () => __awaiter(this, void 0, void 0, function* () { return yield httpClient.request('HEAD', archiveLocation, null, {}); }));\n            const lengthHeader = res.message.headers['content-length'];\n            if (lengthHeader === undefined || lengthHeader === null) {\n                throw new Error('Content-Length not found on blob response');\n            }\n            const length = parseInt(lengthHeader);\n            if (Number.isNaN(length)) {\n                throw new Error(`Could not interpret Content-Length: ${length}`);\n            }\n            const downloads = [];\n            const blockSize = 4 * 1024 * 1024;\n            for (let offset = 0; offset < length; offset += blockSize) {\n                const count = Math.min(blockSize, length - offset);\n                downloads.push({\n                    offset,\n                    promiseGetter: () => __awaiter(this, void 0, void 0, function* () {\n                        return yield downloadSegmentRetry(httpClient, archiveLocation, offset, count);\n                    })\n                });\n            }\n            // reverse to use .pop instead of .shift\n            downloads.reverse();\n            let actives = 0;\n            let bytesDownloaded = 0;\n            const progress = new DownloadProgress(length);\n            progress.startDisplayTimer();\n            const progressFn = progress.onProgress();\n            const activeDownloads = [];\n            let nextDownload;\n            const waitAndWrite = () => __awaiter(this, void 0, void 0, function* () {\n                const segment = yield Promise.race(Object.values(activeDownloads));\n                yield archiveDescriptor.write(segment.buffer, 0, segment.count, segment.offset);\n                actives--;\n                delete activeDownloads[segment.offset];\n                bytesDownloaded += segment.count;\n                progressFn({ loadedBytes: bytesDownloaded });\n            });\n            while ((nextDownload = downloads.pop())) {\n                activeDownloads[nextDownload.offset] = nextDownload.promiseGetter();\n                actives++;\n                if (actives >= ((_a = options.downloadConcurrency) !== null && _a !== void 0 ? _a : 10)) {\n                    yield waitAndWrite();\n                }\n            }\n            while (actives > 0) {\n                yield waitAndWrite();\n            }\n        }\n        finally {\n            httpClient.dispose();\n            yield archiveDescriptor.close();\n        }\n    });\n}\nexports.downloadCacheHttpClientConcurrent = downloadCacheHttpClientConcurrent;\nfunction downloadSegmentRetry(httpClient, archiveLocation, offset, count) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const retries = 5;\n        let failures = 0;\n        while (true) {\n            try {\n                const timeout = 30000;\n                const result = yield promiseWithTimeout(timeout, downloadSegment(httpClient, archiveLocation, offset, count));\n                if (typeof result === 'string') {\n                    throw new Error('downloadSegmentRetry failed due to timeout');\n                }\n                return result;\n            }\n            catch (err) {\n                if (failures >= retries) {\n                    throw err;\n                }\n                failures++;\n            }\n        }\n    });\n}\nfunction downloadSegment(httpClient, archiveLocation, offset, count) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const partRes = yield (0, requestUtils_1.retryHttpClientResponse)('downloadCachePart', () => __awaiter(this, void 0, void 0, function* () {\n            return yield httpClient.get(archiveLocation, {\n                Range: `bytes=${offset}-${offset + count - 1}`\n            });\n        }));\n        if (!partRes.readBodyBuffer) {\n            throw new Error('Expected HttpClientResponse to implement readBodyBuffer');\n        }\n        return {\n            offset,\n            count,\n            buffer: yield partRes.readBodyBuffer()\n        };\n    });\n}\n/**\n * Download the cache using the Azure Storage SDK.  Only call this method if the\n * URL points to an Azure Storage endpoint.\n *\n * @param archiveLocation the URL for the cache\n * @param archivePath the local path where the cache is saved\n * @param options the download options with the defaults set\n */\nfunction downloadCacheStorageSDK(archiveLocation, archivePath, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const client = new storage_blob_1.BlockBlobClient(archiveLocation, undefined, {\n            retryOptions: {\n                // Override the timeout used when downloading each 4 MB chunk\n                // The default is 2 min / MB, which is way too slow\n                tryTimeoutInMs: options.timeoutInMs\n            }\n        });\n        const properties = yield client.getProperties();\n        const contentLength = (_a = properties.contentLength) !== null && _a !== void 0 ? _a : -1;\n        if (contentLength < 0) {\n            // We should never hit this condition, but just in case fall back to downloading the\n            // file as one large stream\n            core.debug('Unable to determine content length, downloading file with http-client...');\n            yield downloadCacheHttpClient(archiveLocation, archivePath);\n        }\n        else {\n            // Use downloadToBuffer for faster downloads, since internally it splits the\n            // file into 4 MB chunks which can then be parallelized and retried independently\n            //\n            // If the file exceeds the buffer maximum length (~1 GB on 32-bit systems and ~2 GB\n            // on 64-bit systems), split the download into multiple segments\n            // ~2 GB = 2147483647, beyond this, we start getting out of range error. So, capping it accordingly.\n            // Updated segment size to 128MB = 134217728 bytes, to complete a segment faster and fail fast\n            const maxSegmentSize = Math.min(134217728, buffer.constants.MAX_LENGTH);\n            const downloadProgress = new DownloadProgress(contentLength);\n            const fd = fs.openSync(archivePath, 'w');\n            try {\n                downloadProgress.startDisplayTimer();\n                const controller = new abort_controller_1.AbortController();\n                const abortSignal = controller.signal;\n                while (!downloadProgress.isDone()) {\n                    const segmentStart = downloadProgress.segmentOffset + downloadProgress.segmentSize;\n                    const segmentSize = Math.min(maxSegmentSize, contentLength - segmentStart);\n                    downloadProgress.nextSegment(segmentSize);\n                    const result = yield promiseWithTimeout(options.segmentTimeoutInMs || 3600000, client.downloadToBuffer(segmentStart, segmentSize, {\n                        abortSignal,\n                        concurrency: options.downloadConcurrency,\n                        onProgress: downloadProgress.onProgress()\n                    }));\n                    if (result === 'timeout') {\n                        controller.abort();\n                        throw new Error('Aborting cache download as the download time exceeded the timeout.');\n                    }\n                    else if (Buffer.isBuffer(result)) {\n                        fs.writeFileSync(fd, result);\n                    }\n                }\n            }\n            finally {\n                downloadProgress.stopDisplayTimer();\n                fs.closeSync(fd);\n            }\n        }\n    });\n}\nexports.downloadCacheStorageSDK = downloadCacheStorageSDK;\nconst promiseWithTimeout = (timeoutMs, promise) => __awaiter(void 0, void 0, void 0, function* () {\n    let timeoutHandle;\n    const timeoutPromise = new Promise(resolve => {\n        timeoutHandle = setTimeout(() => resolve('timeout'), timeoutMs);\n    });\n    return Promise.race([promise, timeoutPromise]).then(result => {\n        clearTimeout(timeoutHandle);\n        return result;\n    });\n});\n//# sourceMappingURL=downloadUtils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDownloadOptions = exports.getUploadOptions = void 0;\nconst core = __importStar(require(\"@actions/core\"));\n/**\n * Returns a copy of the upload options with defaults filled in.\n *\n * @param copy the original upload options\n */\nfunction getUploadOptions(copy) {\n    const result = {\n        uploadConcurrency: 4,\n        uploadChunkSize: 32 * 1024 * 1024\n    };\n    if (copy) {\n        if (typeof copy.uploadConcurrency === 'number') {\n            result.uploadConcurrency = copy.uploadConcurrency;\n        }\n        if (typeof copy.uploadChunkSize === 'number') {\n            result.uploadChunkSize = copy.uploadChunkSize;\n        }\n    }\n    core.debug(`Upload concurrency: ${result.uploadConcurrency}`);\n    core.debug(`Upload chunk size: ${result.uploadChunkSize}`);\n    return result;\n}\nexports.getUploadOptions = getUploadOptions;\n/**\n * Returns a copy of the download options with defaults filled in.\n *\n * @param copy the original download options\n */\nfunction getDownloadOptions(copy) {\n    const result = {\n        useAzureSdk: false,\n        concurrentBlobDownloads: true,\n        downloadConcurrency: 8,\n        timeoutInMs: 30000,\n        segmentTimeoutInMs: 600000,\n        lookupOnly: false\n    };\n    if (copy) {\n        if (typeof copy.useAzureSdk === 'boolean') {\n            result.useAzureSdk = copy.useAzureSdk;\n        }\n        if (typeof copy.concurrentBlobDownloads === 'boolean') {\n            result.concurrentBlobDownloads = copy.concurrentBlobDownloads;\n        }\n        if (typeof copy.downloadConcurrency === 'number') {\n            result.downloadConcurrency = copy.downloadConcurrency;\n        }\n        if (typeof copy.timeoutInMs === 'number') {\n            result.timeoutInMs = copy.timeoutInMs;\n        }\n        if (typeof copy.segmentTimeoutInMs === 'number') {\n            result.segmentTimeoutInMs = copy.segmentTimeoutInMs;\n        }\n        if (typeof copy.lookupOnly === 'boolean') {\n            result.lookupOnly = copy.lookupOnly;\n        }\n    }\n    const segmentDownloadTimeoutMins = process.env['SEGMENT_DOWNLOAD_TIMEOUT_MINS'];\n    if (segmentDownloadTimeoutMins &&\n        !isNaN(Number(segmentDownloadTimeoutMins)) &&\n        isFinite(Number(segmentDownloadTimeoutMins))) {\n        result.segmentTimeoutInMs = Number(segmentDownloadTimeoutMins) * 60 * 1000;\n    }\n    core.debug(`Use Azure SDK: ${result.useAzureSdk}`);\n    core.debug(`Download concurrency: ${result.downloadConcurrency}`);\n    core.debug(`Request timeout (ms): ${result.timeoutInMs}`);\n    core.debug(`Cache segment download timeout mins env var: ${process.env['SEGMENT_DOWNLOAD_TIMEOUT_MINS']}`);\n    core.debug(`Segment download timeout (ms): ${result.segmentTimeoutInMs}`);\n    core.debug(`Lookup only: ${result.lookupOnly}`);\n    return result;\n}\nexports.getDownloadOptions = getDownloadOptions;\n//# sourceMappingURL=options.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveCache = exports.reserveCache = exports.downloadCache = exports.getCacheEntry = exports.getCacheVersion = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst crypto = __importStar(require(\"crypto\"));\nconst fs = __importStar(require(\"fs\"));\nconst url_1 = require(\"url\");\nconst utils = __importStar(require(\"./cacheUtils\"));\nconst downloadUtils_1 = require(\"./downloadUtils\");\nconst options_1 = require(\"../options\");\nconst requestUtils_1 = require(\"./requestUtils\");\nconst versionSalt = '1.0';\nfunction getCacheApiUrl(resource) {\n    const baseUrl = process.env['ACTIONS_CACHE_URL'] || '';\n    if (!baseUrl) {\n        throw new Error('Cache Service Url not found, unable to restore cache.');\n    }\n    const url = `${baseUrl}_apis/artifactcache/${resource}`;\n    core.debug(`Resource Url: ${url}`);\n    return url;\n}\nfunction createAcceptHeader(type, apiVersion) {\n    return `${type};api-version=${apiVersion}`;\n}\nfunction getRequestOptions() {\n    const requestOptions = {\n        headers: {\n            Accept: createAcceptHeader('application/json', '6.0-preview.1')\n        }\n    };\n    return requestOptions;\n}\nfunction createHttpClient() {\n    const token = process.env['ACTIONS_RUNTIME_TOKEN'] || '';\n    const bearerCredentialHandler = new auth_1.BearerCredentialHandler(token);\n    return new http_client_1.HttpClient('actions/cache', [bearerCredentialHandler], getRequestOptions());\n}\nfunction getCacheVersion(paths, compressionMethod, enableCrossOsArchive = false) {\n    // don't pass changes upstream\n    const components = paths.slice();\n    // Add compression method to cache version to restore\n    // compressed cache as per compression method\n    if (compressionMethod) {\n        components.push(compressionMethod);\n    }\n    // Only check for windows platforms if enableCrossOsArchive is false\n    if (process.platform === 'win32' && !enableCrossOsArchive) {\n        components.push('windows-only');\n    }\n    // Add salt to cache version to support breaking changes in cache entry\n    components.push(versionSalt);\n    return crypto.createHash('sha256').update(components.join('|')).digest('hex');\n}\nexports.getCacheVersion = getCacheVersion;\nfunction getCacheEntry(keys, paths, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const httpClient = createHttpClient();\n        const version = getCacheVersion(paths, options === null || options === void 0 ? void 0 : options.compressionMethod, options === null || options === void 0 ? void 0 : options.enableCrossOsArchive);\n        const resource = `cache?keys=${encodeURIComponent(keys.join(','))}&version=${version}`;\n        const response = yield (0, requestUtils_1.retryTypedResponse)('getCacheEntry', () => __awaiter(this, void 0, void 0, function* () { return httpClient.getJson(getCacheApiUrl(resource)); }));\n        // Cache not found\n        if (response.statusCode === 204) {\n            // List cache for primary key only if cache miss occurs\n            if (core.isDebug()) {\n                yield printCachesListForDiagnostics(keys[0], httpClient, version);\n            }\n            return null;\n        }\n        if (!(0, requestUtils_1.isSuccessStatusCode)(response.statusCode)) {\n            throw new Error(`Cache service responded with ${response.statusCode}`);\n        }\n        const cacheResult = response.result;\n        const cacheDownloadUrl = cacheResult === null || cacheResult === void 0 ? void 0 : cacheResult.archiveLocation;\n        if (!cacheDownloadUrl) {\n            // Cache achiveLocation not found. This should never happen, and hence bail out.\n            throw new Error('Cache not found.');\n        }\n        core.setSecret(cacheDownloadUrl);\n        core.debug(`Cache Result:`);\n        core.debug(JSON.stringify(cacheResult));\n        return cacheResult;\n    });\n}\nexports.getCacheEntry = getCacheEntry;\nfunction printCachesListForDiagnostics(key, httpClient, version) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const resource = `caches?key=${encodeURIComponent(key)}`;\n        const response = yield (0, requestUtils_1.retryTypedResponse)('listCache', () => __awaiter(this, void 0, void 0, function* () { return httpClient.getJson(getCacheApiUrl(resource)); }));\n        if (response.statusCode === 200) {\n            const cacheListResult = response.result;\n            const totalCount = cacheListResult === null || cacheListResult === void 0 ? void 0 : cacheListResult.totalCount;\n            if (totalCount && totalCount > 0) {\n                core.debug(`No matching cache found for cache key '${key}', version '${version} and scope ${process.env['GITHUB_REF']}. There exist one or more cache(s) with similar key but they have different version or scope. See more info on cache matching here: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key \\nOther caches with similar key:`);\n                for (const cacheEntry of (cacheListResult === null || cacheListResult === void 0 ? void 0 : cacheListResult.artifactCaches) || []) {\n                    core.debug(`Cache Key: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.cacheKey}, Cache Version: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.cacheVersion}, Cache Scope: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.scope}, Cache Created: ${cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.creationTime}`);\n                }\n            }\n        }\n    });\n}\nfunction downloadCache(archiveLocation, archivePath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const archiveUrl = new url_1.URL(archiveLocation);\n        const downloadOptions = (0, options_1.getDownloadOptions)(options);\n        if (archiveUrl.hostname.endsWith('.blob.core.windows.net')) {\n            if (downloadOptions.useAzureSdk) {\n                // Use Azure storage SDK to download caches hosted on Azure to improve speed and reliability.\n                yield (0, downloadUtils_1.downloadCacheStorageSDK)(archiveLocation, archivePath, downloadOptions);\n            }\n            else if (downloadOptions.concurrentBlobDownloads) {\n                // Use concurrent implementation with HttpClient to work around blob SDK issue\n                yield (0, downloadUtils_1.downloadCacheHttpClientConcurrent)(archiveLocation, archivePath, downloadOptions);\n            }\n            else {\n                // Otherwise, download using the Actions http-client.\n                yield (0, downloadUtils_1.downloadCacheHttpClient)(archiveLocation, archivePath);\n            }\n        }\n        else {\n            yield (0, downloadUtils_1.downloadCacheHttpClient)(archiveLocation, archivePath);\n        }\n    });\n}\nexports.downloadCache = downloadCache;\n// Reserve Cache\nfunction reserveCache(key, paths, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const httpClient = createHttpClient();\n        const version = getCacheVersion(paths, options === null || options === void 0 ? void 0 : options.compressionMethod, options === null || options === void 0 ? void 0 : options.enableCrossOsArchive);\n        const reserveCacheRequest = {\n            key,\n            version,\n            cacheSize: options === null || options === void 0 ? void 0 : options.cacheSize\n        };\n        const response = yield (0, requestUtils_1.retryTypedResponse)('reserveCache', () => __awaiter(this, void 0, void 0, function* () {\n            return httpClient.postJson(getCacheApiUrl('caches'), reserveCacheRequest);\n        }));\n        return response;\n    });\n}\nexports.reserveCache = reserveCache;\nfunction getContentRange(start, end) {\n    // Format: `bytes start-end/filesize\n    // start and end are inclusive\n    // filesize can be *\n    // For a 200 byte chunk starting at byte 0:\n    // Content-Range: bytes 0-199/*\n    return `bytes ${start}-${end}/*`;\n}\nfunction uploadChunk(httpClient, resourceUrl, openStream, start, end) {\n    return __awaiter(this, void 0, void 0, function* () {\n        core.debug(`Uploading chunk of size ${end - start + 1} bytes at offset ${start} with content range: ${getContentRange(start, end)}`);\n        const additionalHeaders = {\n            'Content-Type': 'application/octet-stream',\n            'Content-Range': getContentRange(start, end)\n        };\n        const uploadChunkResponse = yield (0, requestUtils_1.retryHttpClientResponse)(`uploadChunk (start: ${start}, end: ${end})`, () => __awaiter(this, void 0, void 0, function* () {\n            return httpClient.sendStream('PATCH', resourceUrl, openStream(), additionalHeaders);\n        }));\n        if (!(0, requestUtils_1.isSuccessStatusCode)(uploadChunkResponse.message.statusCode)) {\n            throw new Error(`Cache service responded with ${uploadChunkResponse.message.statusCode} during upload chunk.`);\n        }\n    });\n}\nfunction uploadFile(httpClient, cacheId, archivePath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Upload Chunks\n        const fileSize = utils.getArchiveFileSizeInBytes(archivePath);\n        const resourceUrl = getCacheApiUrl(`caches/${cacheId.toString()}`);\n        const fd = fs.openSync(archivePath, 'r');\n        const uploadOptions = (0, options_1.getUploadOptions)(options);\n        const concurrency = utils.assertDefined('uploadConcurrency', uploadOptions.uploadConcurrency);\n        const maxChunkSize = utils.assertDefined('uploadChunkSize', uploadOptions.uploadChunkSize);\n        const parallelUploads = [...new Array(concurrency).keys()];\n        core.debug('Awaiting all uploads');\n        let offset = 0;\n        try {\n            yield Promise.all(parallelUploads.map(() => __awaiter(this, void 0, void 0, function* () {\n                while (offset < fileSize) {\n                    const chunkSize = Math.min(fileSize - offset, maxChunkSize);\n                    const start = offset;\n                    const end = offset + chunkSize - 1;\n                    offset += maxChunkSize;\n                    yield uploadChunk(httpClient, resourceUrl, () => fs\n                        .createReadStream(archivePath, {\n                        fd,\n                        start,\n                        end,\n                        autoClose: false\n                    })\n                        .on('error', error => {\n                        throw new Error(`Cache upload failed because file read failed with ${error.message}`);\n                    }), start, end);\n                }\n            })));\n        }\n        finally {\n            fs.closeSync(fd);\n        }\n        return;\n    });\n}\nfunction commitCache(httpClient, cacheId, filesize) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const commitCacheRequest = { size: filesize };\n        return yield (0, requestUtils_1.retryTypedResponse)('commitCache', () => __awaiter(this, void 0, void 0, function* () {\n            return httpClient.postJson(getCacheApiUrl(`caches/${cacheId.toString()}`), commitCacheRequest);\n        }));\n    });\n}\nfunction saveCache(cacheId, archivePath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const httpClient = createHttpClient();\n        core.debug('Upload cache');\n        yield uploadFile(httpClient, cacheId, archivePath, options);\n        // Commit Cache\n        core.debug('Commiting cache');\n        const cacheSize = utils.getArchiveFileSizeInBytes(archivePath);\n        core.info(`Cache Size: ~${Math.round(cacheSize / (1024 * 1024))} MB (${cacheSize} B)`);\n        const commitCacheResponse = yield commitCache(httpClient, cacheId, cacheSize);\n        if (!(0, requestUtils_1.isSuccessStatusCode)(commitCacheResponse.statusCode)) {\n            throw new Error(`Cache service responded with ${commitCacheResponse.statusCode} during commit cache.`);\n        }\n        core.info('Cache saved successfully');\n    });\n}\nexports.saveCache = saveCache;\n//# sourceMappingURL=cacheHttpClient.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTar = exports.extractTar = exports.listTar = void 0;\nconst exec_1 = require(\"@actions/exec\");\nconst io = __importStar(require(\"@actions/io\"));\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nconst utils = __importStar(require(\"./cacheUtils\"));\nconst constants_1 = require(\"./constants\");\nconst IS_WINDOWS = process.platform === 'win32';\n// Returns tar path and type: BSD or GNU\nfunction getTarPath() {\n    return __awaiter(this, void 0, void 0, function* () {\n        switch (process.platform) {\n            case 'win32': {\n                const gnuTar = yield utils.getGnuTarPathOnWindows();\n                const systemTar = constants_1.SystemTarPathOnWindows;\n                if (gnuTar) {\n                    // Use GNUtar as default on windows\n                    return { path: gnuTar, type: constants_1.ArchiveToolType.GNU };\n                }\n                else if ((0, fs_1.existsSync)(systemTar)) {\n                    return { path: systemTar, type: constants_1.ArchiveToolType.BSD };\n                }\n                break;\n            }\n            case 'darwin': {\n                const gnuTar = yield io.which('gtar', false);\n                if (gnuTar) {\n                    // fix permission denied errors when extracting BSD tar archive with GNU tar - https://github.com/actions/cache/issues/527\n                    return { path: gnuTar, type: constants_1.ArchiveToolType.GNU };\n                }\n                else {\n                    return {\n                        path: yield io.which('tar', true),\n                        type: constants_1.ArchiveToolType.BSD\n                    };\n                }\n            }\n            default:\n                break;\n        }\n        // Default assumption is GNU tar is present in path\n        return {\n            path: yield io.which('tar', true),\n            type: constants_1.ArchiveToolType.GNU\n        };\n    });\n}\n// Return arguments for tar as per tarPath, compressionMethod, method type and os\nfunction getTarArgs(tarPath, compressionMethod, type, archivePath = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        const args = [`\"${tarPath.path}\"`];\n        const cacheFileName = utils.getCacheFileName(compressionMethod);\n        const tarFile = 'cache.tar';\n        const workingDirectory = getWorkingDirectory();\n        // Speficic args for BSD tar on windows for workaround\n        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD &&\n            compressionMethod !== constants_1.CompressionMethod.Gzip &&\n            IS_WINDOWS;\n        // Method specific args\n        switch (type) {\n            case 'create':\n                args.push('--posix', '-cf', BSD_TAR_ZSTD\n                    ? tarFile\n                    : cacheFileName.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'), '--exclude', BSD_TAR_ZSTD\n                    ? tarFile\n                    : cacheFileName.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'), '-P', '-C', workingDirectory.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'), '--files-from', constants_1.ManifestFilename);\n                break;\n            case 'extract':\n                args.push('-xf', BSD_TAR_ZSTD\n                    ? tarFile\n                    : archivePath.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'), '-P', '-C', workingDirectory.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'));\n                break;\n            case 'list':\n                args.push('-tf', BSD_TAR_ZSTD\n                    ? tarFile\n                    : archivePath.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'), '-P');\n                break;\n        }\n        // Platform specific args\n        if (tarPath.type === constants_1.ArchiveToolType.GNU) {\n            switch (process.platform) {\n                case 'win32':\n                    args.push('--force-local');\n                    break;\n                case 'darwin':\n                    args.push('--delay-directory-restore');\n                    break;\n            }\n        }\n        return args;\n    });\n}\n// Returns commands to run tar and compression program\nfunction getCommands(compressionMethod, type, archivePath = '') {\n    return __awaiter(this, void 0, void 0, function* () {\n        let args;\n        const tarPath = yield getTarPath();\n        const tarArgs = yield getTarArgs(tarPath, compressionMethod, type, archivePath);\n        const compressionArgs = type !== 'create'\n            ? yield getDecompressionProgram(tarPath, compressionMethod, archivePath)\n            : yield getCompressionProgram(tarPath, compressionMethod);\n        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD &&\n            compressionMethod !== constants_1.CompressionMethod.Gzip &&\n            IS_WINDOWS;\n        if (BSD_TAR_ZSTD && type !== 'create') {\n            args = [[...compressionArgs].join(' '), [...tarArgs].join(' ')];\n        }\n        else {\n            args = [[...tarArgs].join(' '), [...compressionArgs].join(' ')];\n        }\n        if (BSD_TAR_ZSTD) {\n            return args;\n        }\n        return [args.join(' ')];\n    });\n}\nfunction getWorkingDirectory() {\n    var _a;\n    return (_a = process.env['GITHUB_WORKSPACE']) !== null && _a !== void 0 ? _a : process.cwd();\n}\n// Common function for extractTar and listTar to get the compression method\nfunction getDecompressionProgram(tarPath, compressionMethod, archivePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // -d: Decompress.\n        // unzstd is equivalent to 'zstd -d'\n        // --long=#: Enables long distance matching with # bits. Maximum is 30 (1GB) on 32-bit OS and 31 (2GB) on 64-bit.\n        // Using 30 here because we also support 32-bit self-hosted runners.\n        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD &&\n            compressionMethod !== constants_1.CompressionMethod.Gzip &&\n            IS_WINDOWS;\n        switch (compressionMethod) {\n            case constants_1.CompressionMethod.Zstd:\n                return BSD_TAR_ZSTD\n                    ? [\n                        'zstd -d --long=30 --force -o',\n                        constants_1.TarFilename,\n                        archivePath.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/')\n                    ]\n                    : [\n                        '--use-compress-program',\n                        IS_WINDOWS ? '\"zstd -d --long=30\"' : 'unzstd --long=30'\n                    ];\n            case constants_1.CompressionMethod.ZstdWithoutLong:\n                return BSD_TAR_ZSTD\n                    ? [\n                        'zstd -d --force -o',\n                        constants_1.TarFilename,\n                        archivePath.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/')\n                    ]\n                    : ['--use-compress-program', IS_WINDOWS ? '\"zstd -d\"' : 'unzstd'];\n            default:\n                return ['-z'];\n        }\n    });\n}\n// Used for creating the archive\n// -T#: Compress using # working thread. If # is 0, attempt to detect and use the number of physical CPU cores.\n// zstdmt is equivalent to 'zstd -T0'\n// --long=#: Enables long distance matching with # bits. Maximum is 30 (1GB) on 32-bit OS and 31 (2GB) on 64-bit.\n// Using 30 here because we also support 32-bit self-hosted runners.\n// Long range mode is added to zstd in v1.3.2 release, so we will not use --long in older version of zstd.\nfunction getCompressionProgram(tarPath, compressionMethod) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const cacheFileName = utils.getCacheFileName(compressionMethod);\n        const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD &&\n            compressionMethod !== constants_1.CompressionMethod.Gzip &&\n            IS_WINDOWS;\n        switch (compressionMethod) {\n            case constants_1.CompressionMethod.Zstd:\n                return BSD_TAR_ZSTD\n                    ? [\n                        'zstd -T0 --long=30 --force -o',\n                        cacheFileName.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'),\n                        constants_1.TarFilename\n                    ]\n                    : [\n                        '--use-compress-program',\n                        IS_WINDOWS ? '\"zstd -T0 --long=30\"' : 'zstdmt --long=30'\n                    ];\n            case constants_1.CompressionMethod.ZstdWithoutLong:\n                return BSD_TAR_ZSTD\n                    ? [\n                        'zstd -T0 --force -o',\n                        cacheFileName.replace(new RegExp(`\\\\${path.sep}`, 'g'), '/'),\n                        constants_1.TarFilename\n                    ]\n                    : ['--use-compress-program', IS_WINDOWS ? '\"zstd -T0\"' : 'zstdmt'];\n            default:\n                return ['-z'];\n        }\n    });\n}\n// Executes all commands as separate processes\nfunction execCommands(commands, cwd) {\n    return __awaiter(this, void 0, void 0, function* () {\n        for (const command of commands) {\n            try {\n                yield (0, exec_1.exec)(command, undefined, {\n                    cwd,\n                    env: Object.assign(Object.assign({}, process.env), { MSYS: 'winsymlinks:nativestrict' })\n                });\n            }\n            catch (error) {\n                throw new Error(`${command.split(' ')[0]} failed with error: ${error === null || error === void 0 ? void 0 : error.message}`);\n            }\n        }\n    });\n}\n// List the contents of a tar\nfunction listTar(archivePath, compressionMethod) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const commands = yield getCommands(compressionMethod, 'list', archivePath);\n        yield execCommands(commands);\n    });\n}\nexports.listTar = listTar;\n// Extract a tar\nfunction extractTar(archivePath, compressionMethod) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Create directory to extract tar into\n        const workingDirectory = getWorkingDirectory();\n        yield io.mkdirP(workingDirectory);\n        const commands = yield getCommands(compressionMethod, 'extract', archivePath);\n        yield execCommands(commands);\n    });\n}\nexports.extractTar = extractTar;\n// Create a tar\nfunction createTar(archiveFolder, sourceDirectories, compressionMethod) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Write source directories to manifest.txt to avoid command length limits\n        (0, fs_1.writeFileSync)(path.join(archiveFolder, constants_1.ManifestFilename), sourceDirectories.join('\\n'));\n        const commands = yield getCommands(compressionMethod, 'create');\n        yield execCommands(commands, archiveFolder);\n    });\n}\nexports.createTar = createTar;\n//# sourceMappingURL=tar.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveCache = exports.restoreCache = exports.isFeatureAvailable = exports.ReserveCacheError = exports.ValidationError = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst path = __importStar(require(\"path\"));\nconst utils = __importStar(require(\"./internal/cacheUtils\"));\nconst cacheHttpClient = __importStar(require(\"./internal/cacheHttpClient\"));\nconst tar_1 = require(\"./internal/tar\");\nclass ValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ValidationError';\n        Object.setPrototypeOf(this, ValidationError.prototype);\n    }\n}\nexports.ValidationError = ValidationError;\nclass ReserveCacheError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ReserveCacheError';\n        Object.setPrototypeOf(this, ReserveCacheError.prototype);\n    }\n}\nexports.ReserveCacheError = ReserveCacheError;\nfunction checkPaths(paths) {\n    if (!paths || paths.length === 0) {\n        throw new ValidationError(`Path Validation Error: At least one directory or file path is required`);\n    }\n}\nfunction checkKey(key) {\n    if (key.length > 512) {\n        throw new ValidationError(`Key Validation Error: ${key} cannot be larger than 512 characters.`);\n    }\n    const regex = /^[^,]*$/;\n    if (!regex.test(key)) {\n        throw new ValidationError(`Key Validation Error: ${key} cannot contain commas.`);\n    }\n}\n/**\n * isFeatureAvailable to check the presence of Actions cache service\n *\n * @returns boolean return true if Actions cache service feature is available, otherwise false\n */\nfunction isFeatureAvailable() {\n    return !!process.env['ACTIONS_CACHE_URL'];\n}\nexports.isFeatureAvailable = isFeatureAvailable;\n/**\n * Restores cache from keys\n *\n * @param paths a list of file paths to restore from the cache\n * @param primaryKey an explicit key for restoring the cache\n * @param restoreKeys an optional ordered list of keys to use for restoring the cache if no cache hit occurred for key\n * @param downloadOptions cache download options\n * @param enableCrossOsArchive an optional boolean enabled to restore on windows any cache created on any platform\n * @returns string returns the key for the cache hit, otherwise returns undefined\n */\nfunction restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        checkPaths(paths);\n        restoreKeys = restoreKeys || [];\n        const keys = [primaryKey, ...restoreKeys];\n        core.debug('Resolved Keys:');\n        core.debug(JSON.stringify(keys));\n        if (keys.length > 10) {\n            throw new ValidationError(`Key Validation Error: Keys are limited to a maximum of 10.`);\n        }\n        for (const key of keys) {\n            checkKey(key);\n        }\n        const compressionMethod = yield utils.getCompressionMethod();\n        let archivePath = '';\n        try {\n            // path are needed to compute version\n            const cacheEntry = yield cacheHttpClient.getCacheEntry(keys, paths, {\n                compressionMethod,\n                enableCrossOsArchive\n            });\n            if (!(cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.archiveLocation)) {\n                // Cache not found\n                return undefined;\n            }\n            if (options === null || options === void 0 ? void 0 : options.lookupOnly) {\n                core.info('Lookup only - skipping download');\n                return cacheEntry.cacheKey;\n            }\n            archivePath = path.join(yield utils.createTempDirectory(), utils.getCacheFileName(compressionMethod));\n            core.debug(`Archive Path: ${archivePath}`);\n            // Download the cache from the cache entry\n            yield cacheHttpClient.downloadCache(cacheEntry.archiveLocation, archivePath, options);\n            if (core.isDebug()) {\n                yield (0, tar_1.listTar)(archivePath, compressionMethod);\n            }\n            const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);\n            core.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);\n            yield (0, tar_1.extractTar)(archivePath, compressionMethod);\n            core.info('Cache restored successfully');\n            return cacheEntry.cacheKey;\n        }\n        catch (error) {\n            const typedError = error;\n            if (typedError.name === ValidationError.name) {\n                throw error;\n            }\n            else {\n                // Supress all non-validation cache related errors because caching should be optional\n                core.warning(`Failed to restore: ${error.message}`);\n            }\n        }\n        finally {\n            // Try to delete the archive to save space\n            try {\n                yield utils.unlinkFile(archivePath);\n            }\n            catch (error) {\n                core.debug(`Failed to delete archive: ${error}`);\n            }\n        }\n        return undefined;\n    });\n}\nexports.restoreCache = restoreCache;\n/**\n * Saves a list of files with the specified key\n *\n * @param paths a list of file paths to be cached\n * @param key an explicit key for restoring the cache\n * @param enableCrossOsArchive an optional boolean enabled to save cache on windows which could be restored on any platform\n * @param options cache upload options\n * @returns number returns cacheId if the cache was saved successfully and throws an error if save fails\n */\nfunction saveCache(paths, key, options, enableCrossOsArchive = false) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function* () {\n        checkPaths(paths);\n        checkKey(key);\n        const compressionMethod = yield utils.getCompressionMethod();\n        let cacheId = -1;\n        const cachePaths = yield utils.resolvePaths(paths);\n        core.debug('Cache Paths:');\n        core.debug(`${JSON.stringify(cachePaths)}`);\n        if (cachePaths.length === 0) {\n            throw new Error(`Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.`);\n        }\n        const archiveFolder = yield utils.createTempDirectory();\n        const archivePath = path.join(archiveFolder, utils.getCacheFileName(compressionMethod));\n        core.debug(`Archive Path: ${archivePath}`);\n        try {\n            yield (0, tar_1.createTar)(archiveFolder, cachePaths, compressionMethod);\n            if (core.isDebug()) {\n                yield (0, tar_1.listTar)(archivePath, compressionMethod);\n            }\n            const fileSizeLimit = 10 * 1024 * 1024 * 1024; // 10GB per repo limit\n            const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);\n            core.debug(`File Size: ${archiveFileSize}`);\n            // For GHES, this check will take place in ReserveCache API with enterprise file size limit\n            if (archiveFileSize > fileSizeLimit && !utils.isGhes()) {\n                throw new Error(`Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the 10GB limit, not saving cache.`);\n            }\n            core.debug('Reserving Cache');\n            const reserveCacheResponse = yield cacheHttpClient.reserveCache(key, paths, {\n                compressionMethod,\n                enableCrossOsArchive,\n                cacheSize: archiveFileSize\n            });\n            if ((_a = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.result) === null || _a === void 0 ? void 0 : _a.cacheId) {\n                cacheId = (_b = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.result) === null || _b === void 0 ? void 0 : _b.cacheId;\n            }\n            else if ((reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.statusCode) === 400) {\n                throw new Error((_d = (_c = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.error) === null || _c === void 0 ? void 0 : _c.message) !== null && _d !== void 0 ? _d : `Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the data cap limit, not saving cache.`);\n            }\n            else {\n                throw new ReserveCacheError(`Unable to reserve cache with key ${key}, another job may be creating this cache. More details: ${(_e = reserveCacheResponse === null || reserveCacheResponse === void 0 ? void 0 : reserveCacheResponse.error) === null || _e === void 0 ? void 0 : _e.message}`);\n            }\n            core.debug(`Saving Cache (ID: ${cacheId})`);\n            yield cacheHttpClient.saveCache(cacheId, archivePath, options);\n        }\n        catch (error) {\n            const typedError = error;\n            if (typedError.name === ValidationError.name) {\n                throw error;\n            }\n            else if (typedError.name === ReserveCacheError.name) {\n                core.info(`Failed to save: ${typedError.message}`);\n            }\n            else {\n                core.warning(`Failed to save: ${typedError.message}`);\n            }\n        }\n        finally {\n            // Try to delete the archive to save space\n            try {\n                yield utils.unlinkFile(archivePath);\n            }\n            catch (error) {\n                core.debug(`Failed to delete archive: ${error}`);\n            }\n        }\n        return cacheId;\n    });\n}\nexports.saveCache = saveCache;\n//# sourceMappingURL=cache.js.map","'use strict'\n/* eslint-disable no-new-wrappers, no-eval, camelcase, operator-linebreak */\nmodule.exports = makeParserClass(require('./parser.js'))\nmodule.exports.makeParserClass = makeParserClass\n\nclass TomlError extends Error {\n  constructor (msg) {\n    super(msg)\n    this.name = 'TomlError'\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) Error.captureStackTrace(this, TomlError)\n    this.fromTOML = true\n    this.wrapped = null\n  }\n}\nTomlError.wrap = err => {\n  const terr = new TomlError(err.message)\n  terr.code = err.code\n  terr.wrapped = err\n  return terr\n}\nmodule.exports.TomlError = TomlError\n\nconst createDateTime = require('./create-datetime.js')\nconst createDateTimeFloat = require('./create-datetime-float.js')\nconst createDate = require('./create-date.js')\nconst createTime = require('./create-time.js')\n\nconst CTRL_I = 0x09\nconst CTRL_J = 0x0A\nconst CTRL_M = 0x0D\nconst CTRL_CHAR_BOUNDARY = 0x1F // the last non-character in the latin1 region of unicode, except DEL\nconst CHAR_SP = 0x20\nconst CHAR_QUOT = 0x22\nconst CHAR_NUM = 0x23\nconst CHAR_APOS = 0x27\nconst CHAR_PLUS = 0x2B\nconst CHAR_COMMA = 0x2C\nconst CHAR_HYPHEN = 0x2D\nconst CHAR_PERIOD = 0x2E\nconst CHAR_0 = 0x30\nconst CHAR_1 = 0x31\nconst CHAR_7 = 0x37\nconst CHAR_9 = 0x39\nconst CHAR_COLON = 0x3A\nconst CHAR_EQUALS = 0x3D\nconst CHAR_A = 0x41\nconst CHAR_E = 0x45\nconst CHAR_F = 0x46\nconst CHAR_T = 0x54\nconst CHAR_U = 0x55\nconst CHAR_Z = 0x5A\nconst CHAR_LOWBAR = 0x5F\nconst CHAR_a = 0x61\nconst CHAR_b = 0x62\nconst CHAR_e = 0x65\nconst CHAR_f = 0x66\nconst CHAR_i = 0x69\nconst CHAR_l = 0x6C\nconst CHAR_n = 0x6E\nconst CHAR_o = 0x6F\nconst CHAR_r = 0x72\nconst CHAR_s = 0x73\nconst CHAR_t = 0x74\nconst CHAR_u = 0x75\nconst CHAR_x = 0x78\nconst CHAR_z = 0x7A\nconst CHAR_LCUB = 0x7B\nconst CHAR_RCUB = 0x7D\nconst CHAR_LSQB = 0x5B\nconst CHAR_BSOL = 0x5C\nconst CHAR_RSQB = 0x5D\nconst CHAR_DEL = 0x7F\nconst SURROGATE_FIRST = 0xD800\nconst SURROGATE_LAST = 0xDFFF\n\nconst escapes = {\n  [CHAR_b]: '\\u0008',\n  [CHAR_t]: '\\u0009',\n  [CHAR_n]: '\\u000A',\n  [CHAR_f]: '\\u000C',\n  [CHAR_r]: '\\u000D',\n  [CHAR_QUOT]: '\\u0022',\n  [CHAR_BSOL]: '\\u005C'\n}\n\nfunction isDigit (cp) {\n  return cp >= CHAR_0 && cp <= CHAR_9\n}\nfunction isHexit (cp) {\n  return (cp >= CHAR_A && cp <= CHAR_F) || (cp >= CHAR_a && cp <= CHAR_f) || (cp >= CHAR_0 && cp <= CHAR_9)\n}\nfunction isBit (cp) {\n  return cp === CHAR_1 || cp === CHAR_0\n}\nfunction isOctit (cp) {\n  return (cp >= CHAR_0 && cp <= CHAR_7)\n}\nfunction isAlphaNumQuoteHyphen (cp) {\n  return (cp >= CHAR_A && cp <= CHAR_Z)\n      || (cp >= CHAR_a && cp <= CHAR_z)\n      || (cp >= CHAR_0 && cp <= CHAR_9)\n      || cp === CHAR_APOS\n      || cp === CHAR_QUOT\n      || cp === CHAR_LOWBAR\n      || cp === CHAR_HYPHEN\n}\nfunction isAlphaNumHyphen (cp) {\n  return (cp >= CHAR_A && cp <= CHAR_Z)\n      || (cp >= CHAR_a && cp <= CHAR_z)\n      || (cp >= CHAR_0 && cp <= CHAR_9)\n      || cp === CHAR_LOWBAR\n      || cp === CHAR_HYPHEN\n}\nconst _type = Symbol('type')\nconst _declared = Symbol('declared')\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nconst defineProperty = Object.defineProperty\nconst descriptor = {configurable: true, enumerable: true, writable: true, value: undefined}\n\nfunction hasKey (obj, key) {\n  if (hasOwnProperty.call(obj, key)) return true\n  if (key === '__proto__') defineProperty(obj, '__proto__', descriptor)\n  return false\n}\n\nconst INLINE_TABLE = Symbol('inline-table')\nfunction InlineTable () {\n  return Object.defineProperties({}, {\n    [_type]: {value: INLINE_TABLE}\n  })\n}\nfunction isInlineTable (obj) {\n  if (obj === null || typeof (obj) !== 'object') return false\n  return obj[_type] === INLINE_TABLE\n}\n\nconst TABLE = Symbol('table')\nfunction Table () {\n  return Object.defineProperties({}, {\n    [_type]: {value: TABLE},\n    [_declared]: {value: false, writable: true}\n  })\n}\nfunction isTable (obj) {\n  if (obj === null || typeof (obj) !== 'object') return false\n  return obj[_type] === TABLE\n}\n\nconst _contentType = Symbol('content-type')\nconst INLINE_LIST = Symbol('inline-list')\nfunction InlineList (type) {\n  return Object.defineProperties([], {\n    [_type]: {value: INLINE_LIST},\n    [_contentType]: {value: type}\n  })\n}\nfunction isInlineList (obj) {\n  if (obj === null || typeof (obj) !== 'object') return false\n  return obj[_type] === INLINE_LIST\n}\n\nconst LIST = Symbol('list')\nfunction List () {\n  return Object.defineProperties([], {\n    [_type]: {value: LIST}\n  })\n}\nfunction isList (obj) {\n  if (obj === null || typeof (obj) !== 'object') return false\n  return obj[_type] === LIST\n}\n\n// in an eval, to let bundlers not slurp in a util proxy\nlet _custom\ntry {\n  const utilInspect = eval(\"require('util').inspect\")\n  _custom = utilInspect.custom\n} catch (_) {\n  /* eval require not available in transpiled bundle */\n}\n/* istanbul ignore next */\nconst _inspect = _custom || 'inspect'\n\nclass BoxedBigInt {\n  constructor (value) {\n    try {\n      this.value = global.BigInt.asIntN(64, value)\n    } catch (_) {\n      /* istanbul ignore next */\n      this.value = null\n    }\n    Object.defineProperty(this, _type, {value: INTEGER})\n  }\n  isNaN () {\n    return this.value === null\n  }\n  /* istanbul ignore next */\n  toString () {\n    return String(this.value)\n  }\n  /* istanbul ignore next */\n  [_inspect] () {\n    return `[BigInt: ${this.toString()}]}`\n  }\n  valueOf () {\n    return this.value\n  }\n}\n\nconst INTEGER = Symbol('integer')\nfunction Integer (value) {\n  let num = Number(value)\n  // -0 is a float thing, not an int thing\n  if (Object.is(num, -0)) num = 0\n  /* istanbul ignore else */\n  if (global.BigInt && !Number.isSafeInteger(num)) {\n    return new BoxedBigInt(value)\n  } else {\n    /* istanbul ignore next */\n    return Object.defineProperties(new Number(num), {\n      isNaN: {value: function () { return isNaN(this) }},\n      [_type]: {value: INTEGER},\n      [_inspect]: {value: () => `[Integer: ${value}]`}\n    })\n  }\n}\nfunction isInteger (obj) {\n  if (obj === null || typeof (obj) !== 'object') return false\n  return obj[_type] === INTEGER\n}\n\nconst FLOAT = Symbol('float')\nfunction Float (value) {\n  /* istanbul ignore next */\n  return Object.defineProperties(new Number(value), {\n    [_type]: {value: FLOAT},\n    [_inspect]: {value: () => `[Float: ${value}]`}\n  })\n}\nfunction isFloat (obj) {\n  if (obj === null || typeof (obj) !== 'object') return false\n  return obj[_type] === FLOAT\n}\n\nfunction tomlType (value) {\n  const type = typeof value\n  if (type === 'object') {\n    /* istanbul ignore if */\n    if (value === null) return 'null'\n    if (value instanceof Date) return 'datetime'\n    /* istanbul ignore else */\n    if (_type in value) {\n      switch (value[_type]) {\n        case INLINE_TABLE: return 'inline-table'\n        case INLINE_LIST: return 'inline-list'\n        /* istanbul ignore next */\n        case TABLE: return 'table'\n        /* istanbul ignore next */\n        case LIST: return 'list'\n        case FLOAT: return 'float'\n        case INTEGER: return 'integer'\n      }\n    }\n  }\n  return type\n}\n\nfunction makeParserClass (Parser) {\n  class TOMLParser extends Parser {\n    constructor () {\n      super()\n      this.ctx = this.obj = Table()\n    }\n\n    /* MATCH HELPER */\n    atEndOfWord () {\n      return this.char === CHAR_NUM || this.char === CTRL_I || this.char === CHAR_SP || this.atEndOfLine()\n    }\n    atEndOfLine () {\n      return this.char === Parser.END || this.char === CTRL_J || this.char === CTRL_M\n    }\n\n    parseStart () {\n      if (this.char === Parser.END) {\n        return null\n      } else if (this.char === CHAR_LSQB) {\n        return this.call(this.parseTableOrList)\n      } else if (this.char === CHAR_NUM) {\n        return this.call(this.parseComment)\n      } else if (this.char === CTRL_J || this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M) {\n        return null\n      } else if (isAlphaNumQuoteHyphen(this.char)) {\n        return this.callNow(this.parseAssignStatement)\n      } else {\n        throw this.error(new TomlError(`Unknown character \"${this.char}\"`))\n      }\n    }\n\n    // HELPER, this strips any whitespace and comments to the end of the line\n    // then RETURNS. Last state in a production.\n    parseWhitespaceToEOL () {\n      if (this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M) {\n        return null\n      } else if (this.char === CHAR_NUM) {\n        return this.goto(this.parseComment)\n      } else if (this.char === Parser.END || this.char === CTRL_J) {\n        return this.return()\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected only whitespace or comments till end of line'))\n      }\n    }\n\n    /* ASSIGNMENT: key = value */\n    parseAssignStatement () {\n      return this.callNow(this.parseAssign, this.recordAssignStatement)\n    }\n    recordAssignStatement (kv) {\n      let target = this.ctx\n      let finalKey = kv.key.pop()\n      for (let kw of kv.key) {\n        if (hasKey(target, kw) && (!isTable(target[kw]) || target[kw][_declared])) {\n          throw this.error(new TomlError(\"Can't redefine existing key\"))\n        }\n        target = target[kw] = target[kw] || Table()\n      }\n      if (hasKey(target, finalKey)) {\n        throw this.error(new TomlError(\"Can't redefine existing key\"))\n      }\n      // unbox our numbers\n      if (isInteger(kv.value) || isFloat(kv.value)) {\n        target[finalKey] = kv.value.valueOf()\n      } else {\n        target[finalKey] = kv.value\n      }\n      return this.goto(this.parseWhitespaceToEOL)\n    }\n\n    /* ASSSIGNMENT expression, key = value possibly inside an inline table */\n    parseAssign () {\n      return this.callNow(this.parseKeyword, this.recordAssignKeyword)\n    }\n    recordAssignKeyword (key) {\n      if (this.state.resultTable) {\n        this.state.resultTable.push(key)\n      } else {\n        this.state.resultTable = [key]\n      }\n      return this.goto(this.parseAssignKeywordPreDot)\n    }\n    parseAssignKeywordPreDot () {\n      if (this.char === CHAR_PERIOD) {\n        return this.next(this.parseAssignKeywordPostDot)\n      } else if (this.char !== CHAR_SP && this.char !== CTRL_I) {\n        return this.goto(this.parseAssignEqual)\n      }\n    }\n    parseAssignKeywordPostDot () {\n      if (this.char !== CHAR_SP && this.char !== CTRL_I) {\n        return this.callNow(this.parseKeyword, this.recordAssignKeyword)\n      }\n    }\n\n    parseAssignEqual () {\n      if (this.char === CHAR_EQUALS) {\n        return this.next(this.parseAssignPreValue)\n      } else {\n        throw this.error(new TomlError('Invalid character, expected \"=\"'))\n      }\n    }\n    parseAssignPreValue () {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else {\n        return this.callNow(this.parseValue, this.recordAssignValue)\n      }\n    }\n    recordAssignValue (value) {\n      return this.returnNow({key: this.state.resultTable, value: value})\n    }\n\n    /* COMMENTS: #...eol */\n    parseComment () {\n      do {\n        if (this.char === Parser.END || this.char === CTRL_J) {\n          return this.return()\n        }\n      } while (this.nextChar())\n    }\n\n    /* TABLES AND LISTS, [foo] and [[foo]] */\n    parseTableOrList () {\n      if (this.char === CHAR_LSQB) {\n        this.next(this.parseList)\n      } else {\n        return this.goto(this.parseTable)\n      }\n    }\n\n    /* TABLE [foo.bar.baz] */\n    parseTable () {\n      this.ctx = this.obj\n      return this.goto(this.parseTableNext)\n    }\n    parseTableNext () {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else {\n        return this.callNow(this.parseKeyword, this.parseTableMore)\n      }\n    }\n    parseTableMore (keyword) {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else if (this.char === CHAR_RSQB) {\n        if (hasKey(this.ctx, keyword) && (!isTable(this.ctx[keyword]) || this.ctx[keyword][_declared])) {\n          throw this.error(new TomlError(\"Can't redefine existing key\"))\n        } else {\n          this.ctx = this.ctx[keyword] = this.ctx[keyword] || Table()\n          this.ctx[_declared] = true\n        }\n        return this.next(this.parseWhitespaceToEOL)\n      } else if (this.char === CHAR_PERIOD) {\n        if (!hasKey(this.ctx, keyword)) {\n          this.ctx = this.ctx[keyword] = Table()\n        } else if (isTable(this.ctx[keyword])) {\n          this.ctx = this.ctx[keyword]\n        } else if (isList(this.ctx[keyword])) {\n          this.ctx = this.ctx[keyword][this.ctx[keyword].length - 1]\n        } else {\n          throw this.error(new TomlError(\"Can't redefine existing key\"))\n        }\n        return this.next(this.parseTableNext)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected whitespace, . or ]'))\n      }\n    }\n\n    /* LIST [[a.b.c]] */\n    parseList () {\n      this.ctx = this.obj\n      return this.goto(this.parseListNext)\n    }\n    parseListNext () {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else {\n        return this.callNow(this.parseKeyword, this.parseListMore)\n      }\n    }\n    parseListMore (keyword) {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else if (this.char === CHAR_RSQB) {\n        if (!hasKey(this.ctx, keyword)) {\n          this.ctx[keyword] = List()\n        }\n        if (isInlineList(this.ctx[keyword])) {\n          throw this.error(new TomlError(\"Can't extend an inline array\"))\n        } else if (isList(this.ctx[keyword])) {\n          const next = Table()\n          this.ctx[keyword].push(next)\n          this.ctx = next\n        } else {\n          throw this.error(new TomlError(\"Can't redefine an existing key\"))\n        }\n        return this.next(this.parseListEnd)\n      } else if (this.char === CHAR_PERIOD) {\n        if (!hasKey(this.ctx, keyword)) {\n          this.ctx = this.ctx[keyword] = Table()\n        } else if (isInlineList(this.ctx[keyword])) {\n          throw this.error(new TomlError(\"Can't extend an inline array\"))\n        } else if (isInlineTable(this.ctx[keyword])) {\n          throw this.error(new TomlError(\"Can't extend an inline table\"))\n        } else if (isList(this.ctx[keyword])) {\n          this.ctx = this.ctx[keyword][this.ctx[keyword].length - 1]\n        } else if (isTable(this.ctx[keyword])) {\n          this.ctx = this.ctx[keyword]\n        } else {\n          throw this.error(new TomlError(\"Can't redefine an existing key\"))\n        }\n        return this.next(this.parseListNext)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected whitespace, . or ]'))\n      }\n    }\n    parseListEnd (keyword) {\n      if (this.char === CHAR_RSQB) {\n        return this.next(this.parseWhitespaceToEOL)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected whitespace, . or ]'))\n      }\n    }\n\n    /* VALUE string, number, boolean, inline list, inline object */\n    parseValue () {\n      if (this.char === Parser.END) {\n        throw this.error(new TomlError('Key without value'))\n      } else if (this.char === CHAR_QUOT) {\n        return this.next(this.parseDoubleString)\n      } if (this.char === CHAR_APOS) {\n        return this.next(this.parseSingleString)\n      } else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {\n        return this.goto(this.parseNumberSign)\n      } else if (this.char === CHAR_i) {\n        return this.next(this.parseInf)\n      } else if (this.char === CHAR_n) {\n        return this.next(this.parseNan)\n      } else if (isDigit(this.char)) {\n        return this.goto(this.parseNumberOrDateTime)\n      } else if (this.char === CHAR_t || this.char === CHAR_f) {\n        return this.goto(this.parseBoolean)\n      } else if (this.char === CHAR_LSQB) {\n        return this.call(this.parseInlineList, this.recordValue)\n      } else if (this.char === CHAR_LCUB) {\n        return this.call(this.parseInlineTable, this.recordValue)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expecting string, number, datetime, boolean, inline array or inline table'))\n      }\n    }\n    recordValue (value) {\n      return this.returnNow(value)\n    }\n\n    parseInf () {\n      if (this.char === CHAR_n) {\n        return this.next(this.parseInf2)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected \"inf\", \"+inf\" or \"-inf\"'))\n      }\n    }\n    parseInf2 () {\n      if (this.char === CHAR_f) {\n        if (this.state.buf === '-') {\n          return this.return(-Infinity)\n        } else {\n          return this.return(Infinity)\n        }\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected \"inf\", \"+inf\" or \"-inf\"'))\n      }\n    }\n\n    parseNan () {\n      if (this.char === CHAR_a) {\n        return this.next(this.parseNan2)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected \"nan\"'))\n      }\n    }\n    parseNan2 () {\n      if (this.char === CHAR_n) {\n        return this.return(NaN)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected \"nan\"'))\n      }\n    }\n\n    /* KEYS, barewords or basic, literal, or dotted */\n    parseKeyword () {\n      if (this.char === CHAR_QUOT) {\n        return this.next(this.parseBasicString)\n      } else if (this.char === CHAR_APOS) {\n        return this.next(this.parseLiteralString)\n      } else {\n        return this.goto(this.parseBareKey)\n      }\n    }\n\n    /* KEYS: barewords */\n    parseBareKey () {\n      do {\n        if (this.char === Parser.END) {\n          throw this.error(new TomlError('Key ended without value'))\n        } else if (isAlphaNumHyphen(this.char)) {\n          this.consume()\n        } else if (this.state.buf.length === 0) {\n          throw this.error(new TomlError('Empty bare keys are not allowed'))\n        } else {\n          return this.returnNow()\n        }\n      } while (this.nextChar())\n    }\n\n    /* STRINGS, single quoted (literal) */\n    parseSingleString () {\n      if (this.char === CHAR_APOS) {\n        return this.next(this.parseLiteralMultiStringMaybe)\n      } else {\n        return this.goto(this.parseLiteralString)\n      }\n    }\n    parseLiteralString () {\n      do {\n        if (this.char === CHAR_APOS) {\n          return this.return()\n        } else if (this.atEndOfLine()) {\n          throw this.error(new TomlError('Unterminated string'))\n        } else if (this.char === CHAR_DEL || (this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I)) {\n          throw this.errorControlCharInString()\n        } else {\n          this.consume()\n        }\n      } while (this.nextChar())\n    }\n    parseLiteralMultiStringMaybe () {\n      if (this.char === CHAR_APOS) {\n        return this.next(this.parseLiteralMultiString)\n      } else {\n        return this.returnNow()\n      }\n    }\n    parseLiteralMultiString () {\n      if (this.char === CTRL_M) {\n        return null\n      } else if (this.char === CTRL_J) {\n        return this.next(this.parseLiteralMultiStringContent)\n      } else {\n        return this.goto(this.parseLiteralMultiStringContent)\n      }\n    }\n    parseLiteralMultiStringContent () {\n      do {\n        if (this.char === CHAR_APOS) {\n          return this.next(this.parseLiteralMultiEnd)\n        } else if (this.char === Parser.END) {\n          throw this.error(new TomlError('Unterminated multi-line string'))\n        } else if (this.char === CHAR_DEL || (this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I && this.char !== CTRL_J && this.char !== CTRL_M)) {\n          throw this.errorControlCharInString()\n        } else {\n          this.consume()\n        }\n      } while (this.nextChar())\n    }\n    parseLiteralMultiEnd () {\n      if (this.char === CHAR_APOS) {\n        return this.next(this.parseLiteralMultiEnd2)\n      } else {\n        this.state.buf += \"'\"\n        return this.goto(this.parseLiteralMultiStringContent)\n      }\n    }\n    parseLiteralMultiEnd2 () {\n      if (this.char === CHAR_APOS) {\n        return this.return()\n      } else {\n        this.state.buf += \"''\"\n        return this.goto(this.parseLiteralMultiStringContent)\n      }\n    }\n\n    /* STRINGS double quoted */\n    parseDoubleString () {\n      if (this.char === CHAR_QUOT) {\n        return this.next(this.parseMultiStringMaybe)\n      } else {\n        return this.goto(this.parseBasicString)\n      }\n    }\n    parseBasicString () {\n      do {\n        if (this.char === CHAR_BSOL) {\n          return this.call(this.parseEscape, this.recordEscapeReplacement)\n        } else if (this.char === CHAR_QUOT) {\n          return this.return()\n        } else if (this.atEndOfLine()) {\n          throw this.error(new TomlError('Unterminated string'))\n        } else if (this.char === CHAR_DEL || (this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I)) {\n          throw this.errorControlCharInString()\n        } else {\n          this.consume()\n        }\n      } while (this.nextChar())\n    }\n    recordEscapeReplacement (replacement) {\n      this.state.buf += replacement\n      return this.goto(this.parseBasicString)\n    }\n    parseMultiStringMaybe () {\n      if (this.char === CHAR_QUOT) {\n        return this.next(this.parseMultiString)\n      } else {\n        return this.returnNow()\n      }\n    }\n    parseMultiString () {\n      if (this.char === CTRL_M) {\n        return null\n      } else if (this.char === CTRL_J) {\n        return this.next(this.parseMultiStringContent)\n      } else {\n        return this.goto(this.parseMultiStringContent)\n      }\n    }\n    parseMultiStringContent () {\n      do {\n        if (this.char === CHAR_BSOL) {\n          return this.call(this.parseMultiEscape, this.recordMultiEscapeReplacement)\n        } else if (this.char === CHAR_QUOT) {\n          return this.next(this.parseMultiEnd)\n        } else if (this.char === Parser.END) {\n          throw this.error(new TomlError('Unterminated multi-line string'))\n        } else if (this.char === CHAR_DEL || (this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I && this.char !== CTRL_J && this.char !== CTRL_M)) {\n          throw this.errorControlCharInString()\n        } else {\n          this.consume()\n        }\n      } while (this.nextChar())\n    }\n    errorControlCharInString () {\n      let displayCode = '\\\\u00'\n      if (this.char < 16) {\n        displayCode += '0'\n      }\n      displayCode += this.char.toString(16)\n\n      return this.error(new TomlError(`Control characters (codes < 0x1f and 0x7f) are not allowed in strings, use ${displayCode} instead`))\n    }\n    recordMultiEscapeReplacement (replacement) {\n      this.state.buf += replacement\n      return this.goto(this.parseMultiStringContent)\n    }\n    parseMultiEnd () {\n      if (this.char === CHAR_QUOT) {\n        return this.next(this.parseMultiEnd2)\n      } else {\n        this.state.buf += '\"'\n        return this.goto(this.parseMultiStringContent)\n      }\n    }\n    parseMultiEnd2 () {\n      if (this.char === CHAR_QUOT) {\n        return this.return()\n      } else {\n        this.state.buf += '\"\"'\n        return this.goto(this.parseMultiStringContent)\n      }\n    }\n    parseMultiEscape () {\n      if (this.char === CTRL_M || this.char === CTRL_J) {\n        return this.next(this.parseMultiTrim)\n      } else if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return this.next(this.parsePreMultiTrim)\n      } else {\n        return this.goto(this.parseEscape)\n      }\n    }\n    parsePreMultiTrim () {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else if (this.char === CTRL_M || this.char === CTRL_J) {\n        return this.next(this.parseMultiTrim)\n      } else {\n        throw this.error(new TomlError(\"Can't escape whitespace\"))\n      }\n    }\n    parseMultiTrim () {\n      // explicitly whitespace here, END should follow the same path as chars\n      if (this.char === CTRL_J || this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M) {\n        return null\n      } else {\n        return this.returnNow()\n      }\n    }\n    parseEscape () {\n      if (this.char in escapes) {\n        return this.return(escapes[this.char])\n      } else if (this.char === CHAR_u) {\n        return this.call(this.parseSmallUnicode, this.parseUnicodeReturn)\n      } else if (this.char === CHAR_U) {\n        return this.call(this.parseLargeUnicode, this.parseUnicodeReturn)\n      } else {\n        throw this.error(new TomlError('Unknown escape character: ' + this.char))\n      }\n    }\n    parseUnicodeReturn (char) {\n      try {\n        const codePoint = parseInt(char, 16)\n        if (codePoint >= SURROGATE_FIRST && codePoint <= SURROGATE_LAST) {\n          throw this.error(new TomlError('Invalid unicode, character in range 0xD800 - 0xDFFF is reserved'))\n        }\n        return this.returnNow(String.fromCodePoint(codePoint))\n      } catch (err) {\n        throw this.error(TomlError.wrap(err))\n      }\n    }\n    parseSmallUnicode () {\n      if (!isHexit(this.char)) {\n        throw this.error(new TomlError('Invalid character in unicode sequence, expected hex'))\n      } else {\n        this.consume()\n        if (this.state.buf.length >= 4) return this.return()\n      }\n    }\n    parseLargeUnicode () {\n      if (!isHexit(this.char)) {\n        throw this.error(new TomlError('Invalid character in unicode sequence, expected hex'))\n      } else {\n        this.consume()\n        if (this.state.buf.length >= 8) return this.return()\n      }\n    }\n\n    /* NUMBERS */\n    parseNumberSign () {\n      this.consume()\n      return this.next(this.parseMaybeSignedInfOrNan)\n    }\n    parseMaybeSignedInfOrNan () {\n      if (this.char === CHAR_i) {\n        return this.next(this.parseInf)\n      } else if (this.char === CHAR_n) {\n        return this.next(this.parseNan)\n      } else {\n        return this.callNow(this.parseNoUnder, this.parseNumberIntegerStart)\n      }\n    }\n    parseNumberIntegerStart () {\n      if (this.char === CHAR_0) {\n        this.consume()\n        return this.next(this.parseNumberIntegerExponentOrDecimal)\n      } else {\n        return this.goto(this.parseNumberInteger)\n      }\n    }\n    parseNumberIntegerExponentOrDecimal () {\n      if (this.char === CHAR_PERIOD) {\n        this.consume()\n        return this.call(this.parseNoUnder, this.parseNumberFloat)\n      } else if (this.char === CHAR_E || this.char === CHAR_e) {\n        this.consume()\n        return this.next(this.parseNumberExponentSign)\n      } else {\n        return this.returnNow(Integer(this.state.buf))\n      }\n    }\n    parseNumberInteger () {\n      if (isDigit(this.char)) {\n        this.consume()\n      } else if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnder)\n      } else if (this.char === CHAR_E || this.char === CHAR_e) {\n        this.consume()\n        return this.next(this.parseNumberExponentSign)\n      } else if (this.char === CHAR_PERIOD) {\n        this.consume()\n        return this.call(this.parseNoUnder, this.parseNumberFloat)\n      } else {\n        const result = Integer(this.state.buf)\n        /* istanbul ignore if */\n        if (result.isNaN()) {\n          throw this.error(new TomlError('Invalid number'))\n        } else {\n          return this.returnNow(result)\n        }\n      }\n    }\n    parseNoUnder () {\n      if (this.char === CHAR_LOWBAR || this.char === CHAR_PERIOD || this.char === CHAR_E || this.char === CHAR_e) {\n        throw this.error(new TomlError('Unexpected character, expected digit'))\n      } else if (this.atEndOfWord()) {\n        throw this.error(new TomlError('Incomplete number'))\n      }\n      return this.returnNow()\n    }\n    parseNoUnderHexOctBinLiteral () {\n      if (this.char === CHAR_LOWBAR || this.char === CHAR_PERIOD) {\n        throw this.error(new TomlError('Unexpected character, expected digit'))\n      } else if (this.atEndOfWord()) {\n        throw this.error(new TomlError('Incomplete number'))\n      }\n      return this.returnNow()\n    }\n    parseNumberFloat () {\n      if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnder, this.parseNumberFloat)\n      } else if (isDigit(this.char)) {\n        this.consume()\n      } else if (this.char === CHAR_E || this.char === CHAR_e) {\n        this.consume()\n        return this.next(this.parseNumberExponentSign)\n      } else {\n        return this.returnNow(Float(this.state.buf))\n      }\n    }\n    parseNumberExponentSign () {\n      if (isDigit(this.char)) {\n        return this.goto(this.parseNumberExponent)\n      } else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {\n        this.consume()\n        this.call(this.parseNoUnder, this.parseNumberExponent)\n      } else {\n        throw this.error(new TomlError('Unexpected character, expected -, + or digit'))\n      }\n    }\n    parseNumberExponent () {\n      if (isDigit(this.char)) {\n        this.consume()\n      } else if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnder)\n      } else {\n        return this.returnNow(Float(this.state.buf))\n      }\n    }\n\n    /* NUMBERS or DATETIMES  */\n    parseNumberOrDateTime () {\n      if (this.char === CHAR_0) {\n        this.consume()\n        return this.next(this.parseNumberBaseOrDateTime)\n      } else {\n        return this.goto(this.parseNumberOrDateTimeOnly)\n      }\n    }\n    parseNumberOrDateTimeOnly () {\n      // note, if two zeros are in a row then it MUST be a date\n      if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnder, this.parseNumberInteger)\n      } else if (isDigit(this.char)) {\n        this.consume()\n        if (this.state.buf.length > 4) this.next(this.parseNumberInteger)\n      } else if (this.char === CHAR_E || this.char === CHAR_e) {\n        this.consume()\n        return this.next(this.parseNumberExponentSign)\n      } else if (this.char === CHAR_PERIOD) {\n        this.consume()\n        return this.call(this.parseNoUnder, this.parseNumberFloat)\n      } else if (this.char === CHAR_HYPHEN) {\n        return this.goto(this.parseDateTime)\n      } else if (this.char === CHAR_COLON) {\n        return this.goto(this.parseOnlyTimeHour)\n      } else {\n        return this.returnNow(Integer(this.state.buf))\n      }\n    }\n    parseDateTimeOnly () {\n      if (this.state.buf.length < 4) {\n        if (isDigit(this.char)) {\n          return this.consume()\n        } else if (this.char === CHAR_COLON) {\n          return this.goto(this.parseOnlyTimeHour)\n        } else {\n          throw this.error(new TomlError('Expected digit while parsing year part of a date'))\n        }\n      } else {\n        if (this.char === CHAR_HYPHEN) {\n          return this.goto(this.parseDateTime)\n        } else {\n          throw this.error(new TomlError('Expected hyphen (-) while parsing year part of date'))\n        }\n      }\n    }\n    parseNumberBaseOrDateTime () {\n      if (this.char === CHAR_b) {\n        this.consume()\n        return this.call(this.parseNoUnderHexOctBinLiteral, this.parseIntegerBin)\n      } else if (this.char === CHAR_o) {\n        this.consume()\n        return this.call(this.parseNoUnderHexOctBinLiteral, this.parseIntegerOct)\n      } else if (this.char === CHAR_x) {\n        this.consume()\n        return this.call(this.parseNoUnderHexOctBinLiteral, this.parseIntegerHex)\n      } else if (this.char === CHAR_PERIOD) {\n        return this.goto(this.parseNumberInteger)\n      } else if (isDigit(this.char)) {\n        return this.goto(this.parseDateTimeOnly)\n      } else {\n        return this.returnNow(Integer(this.state.buf))\n      }\n    }\n    parseIntegerHex () {\n      if (isHexit(this.char)) {\n        this.consume()\n      } else if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnderHexOctBinLiteral)\n      } else {\n        const result = Integer(this.state.buf)\n        /* istanbul ignore if */\n        if (result.isNaN()) {\n          throw this.error(new TomlError('Invalid number'))\n        } else {\n          return this.returnNow(result)\n        }\n      }\n    }\n    parseIntegerOct () {\n      if (isOctit(this.char)) {\n        this.consume()\n      } else if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnderHexOctBinLiteral)\n      } else {\n        const result = Integer(this.state.buf)\n        /* istanbul ignore if */\n        if (result.isNaN()) {\n          throw this.error(new TomlError('Invalid number'))\n        } else {\n          return this.returnNow(result)\n        }\n      }\n    }\n    parseIntegerBin () {\n      if (isBit(this.char)) {\n        this.consume()\n      } else if (this.char === CHAR_LOWBAR) {\n        return this.call(this.parseNoUnderHexOctBinLiteral)\n      } else {\n        const result = Integer(this.state.buf)\n        /* istanbul ignore if */\n        if (result.isNaN()) {\n          throw this.error(new TomlError('Invalid number'))\n        } else {\n          return this.returnNow(result)\n        }\n      }\n    }\n\n    /* DATETIME */\n    parseDateTime () {\n      // we enter here having just consumed the year and about to consume the hyphen\n      if (this.state.buf.length < 4) {\n        throw this.error(new TomlError('Years less than 1000 must be zero padded to four characters'))\n      }\n      this.state.result = this.state.buf\n      this.state.buf = ''\n      return this.next(this.parseDateMonth)\n    }\n    parseDateMonth () {\n      if (this.char === CHAR_HYPHEN) {\n        if (this.state.buf.length < 2) {\n          throw this.error(new TomlError('Months less than 10 must be zero padded to two characters'))\n        }\n        this.state.result += '-' + this.state.buf\n        this.state.buf = ''\n        return this.next(this.parseDateDay)\n      } else if (isDigit(this.char)) {\n        this.consume()\n      } else {\n        throw this.error(new TomlError('Incomplete datetime'))\n      }\n    }\n    parseDateDay () {\n      if (this.char === CHAR_T || this.char === CHAR_SP) {\n        if (this.state.buf.length < 2) {\n          throw this.error(new TomlError('Days less than 10 must be zero padded to two characters'))\n        }\n        this.state.result += '-' + this.state.buf\n        this.state.buf = ''\n        return this.next(this.parseStartTimeHour)\n      } else if (this.atEndOfWord()) {\n        return this.returnNow(createDate(this.state.result + '-' + this.state.buf))\n      } else if (isDigit(this.char)) {\n        this.consume()\n      } else {\n        throw this.error(new TomlError('Incomplete datetime'))\n      }\n    }\n    parseStartTimeHour () {\n      if (this.atEndOfWord()) {\n        return this.returnNow(createDate(this.state.result))\n      } else {\n        return this.goto(this.parseTimeHour)\n      }\n    }\n    parseTimeHour () {\n      if (this.char === CHAR_COLON) {\n        if (this.state.buf.length < 2) {\n          throw this.error(new TomlError('Hours less than 10 must be zero padded to two characters'))\n        }\n        this.state.result += 'T' + this.state.buf\n        this.state.buf = ''\n        return this.next(this.parseTimeMin)\n      } else if (isDigit(this.char)) {\n        this.consume()\n      } else {\n        throw this.error(new TomlError('Incomplete datetime'))\n      }\n    }\n    parseTimeMin () {\n      if (this.state.buf.length < 2 && isDigit(this.char)) {\n        this.consume()\n      } else if (this.state.buf.length === 2 && this.char === CHAR_COLON) {\n        this.state.result += ':' + this.state.buf\n        this.state.buf = ''\n        return this.next(this.parseTimeSec)\n      } else {\n        throw this.error(new TomlError('Incomplete datetime'))\n      }\n    }\n    parseTimeSec () {\n      if (isDigit(this.char)) {\n        this.consume()\n        if (this.state.buf.length === 2) {\n          this.state.result += ':' + this.state.buf\n          this.state.buf = ''\n          return this.next(this.parseTimeZoneOrFraction)\n        }\n      } else {\n        throw this.error(new TomlError('Incomplete datetime'))\n      }\n    }\n\n    parseOnlyTimeHour () {\n      /* istanbul ignore else */\n      if (this.char === CHAR_COLON) {\n        if (this.state.buf.length < 2) {\n          throw this.error(new TomlError('Hours less than 10 must be zero padded to two characters'))\n        }\n        this.state.result = this.state.buf\n        this.state.buf = ''\n        return this.next(this.parseOnlyTimeMin)\n      } else {\n        throw this.error(new TomlError('Incomplete time'))\n      }\n    }\n    parseOnlyTimeMin () {\n      if (this.state.buf.length < 2 && isDigit(this.char)) {\n        this.consume()\n      } else if (this.state.buf.length === 2 && this.char === CHAR_COLON) {\n        this.state.result += ':' + this.state.buf\n        this.state.buf = ''\n        return this.next(this.parseOnlyTimeSec)\n      } else {\n        throw this.error(new TomlError('Incomplete time'))\n      }\n    }\n    parseOnlyTimeSec () {\n      if (isDigit(this.char)) {\n        this.consume()\n        if (this.state.buf.length === 2) {\n          return this.next(this.parseOnlyTimeFractionMaybe)\n        }\n      } else {\n        throw this.error(new TomlError('Incomplete time'))\n      }\n    }\n    parseOnlyTimeFractionMaybe () {\n      this.state.result += ':' + this.state.buf\n      if (this.char === CHAR_PERIOD) {\n        this.state.buf = ''\n        this.next(this.parseOnlyTimeFraction)\n      } else {\n        return this.return(createTime(this.state.result))\n      }\n    }\n    parseOnlyTimeFraction () {\n      if (isDigit(this.char)) {\n        this.consume()\n      } else if (this.atEndOfWord()) {\n        if (this.state.buf.length === 0) throw this.error(new TomlError('Expected digit in milliseconds'))\n        return this.returnNow(createTime(this.state.result + '.' + this.state.buf))\n      } else {\n        throw this.error(new TomlError('Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z'))\n      }\n    }\n\n    parseTimeZoneOrFraction () {\n      if (this.char === CHAR_PERIOD) {\n        this.consume()\n        this.next(this.parseDateTimeFraction)\n      } else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {\n        this.consume()\n        this.next(this.parseTimeZoneHour)\n      } else if (this.char === CHAR_Z) {\n        this.consume()\n        return this.return(createDateTime(this.state.result + this.state.buf))\n      } else if (this.atEndOfWord()) {\n        return this.returnNow(createDateTimeFloat(this.state.result + this.state.buf))\n      } else {\n        throw this.error(new TomlError('Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z'))\n      }\n    }\n    parseDateTimeFraction () {\n      if (isDigit(this.char)) {\n        this.consume()\n      } else if (this.state.buf.length === 1) {\n        throw this.error(new TomlError('Expected digit in milliseconds'))\n      } else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {\n        this.consume()\n        this.next(this.parseTimeZoneHour)\n      } else if (this.char === CHAR_Z) {\n        this.consume()\n        return this.return(createDateTime(this.state.result + this.state.buf))\n      } else if (this.atEndOfWord()) {\n        return this.returnNow(createDateTimeFloat(this.state.result + this.state.buf))\n      } else {\n        throw this.error(new TomlError('Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z'))\n      }\n    }\n    parseTimeZoneHour () {\n      if (isDigit(this.char)) {\n        this.consume()\n        // FIXME: No more regexps\n        if (/\\d\\d$/.test(this.state.buf)) return this.next(this.parseTimeZoneSep)\n      } else {\n        throw this.error(new TomlError('Unexpected character in datetime, expected digit'))\n      }\n    }\n    parseTimeZoneSep () {\n      if (this.char === CHAR_COLON) {\n        this.consume()\n        this.next(this.parseTimeZoneMin)\n      } else {\n        throw this.error(new TomlError('Unexpected character in datetime, expected colon'))\n      }\n    }\n    parseTimeZoneMin () {\n      if (isDigit(this.char)) {\n        this.consume()\n        if (/\\d\\d$/.test(this.state.buf)) return this.return(createDateTime(this.state.result + this.state.buf))\n      } else {\n        throw this.error(new TomlError('Unexpected character in datetime, expected digit'))\n      }\n    }\n\n    /* BOOLEAN */\n    parseBoolean () {\n      /* istanbul ignore else */\n      if (this.char === CHAR_t) {\n        this.consume()\n        return this.next(this.parseTrue_r)\n      } else if (this.char === CHAR_f) {\n        this.consume()\n        return this.next(this.parseFalse_a)\n      }\n    }\n    parseTrue_r () {\n      if (this.char === CHAR_r) {\n        this.consume()\n        return this.next(this.parseTrue_u)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n    parseTrue_u () {\n      if (this.char === CHAR_u) {\n        this.consume()\n        return this.next(this.parseTrue_e)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n    parseTrue_e () {\n      if (this.char === CHAR_e) {\n        return this.return(true)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n\n    parseFalse_a () {\n      if (this.char === CHAR_a) {\n        this.consume()\n        return this.next(this.parseFalse_l)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n\n    parseFalse_l () {\n      if (this.char === CHAR_l) {\n        this.consume()\n        return this.next(this.parseFalse_s)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n\n    parseFalse_s () {\n      if (this.char === CHAR_s) {\n        this.consume()\n        return this.next(this.parseFalse_e)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n\n    parseFalse_e () {\n      if (this.char === CHAR_e) {\n        return this.return(false)\n      } else {\n        throw this.error(new TomlError('Invalid boolean, expected true or false'))\n      }\n    }\n\n    /* INLINE LISTS */\n    parseInlineList () {\n      if (this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M || this.char === CTRL_J) {\n        return null\n      } else if (this.char === Parser.END) {\n        throw this.error(new TomlError('Unterminated inline array'))\n      } else if (this.char === CHAR_NUM) {\n        return this.call(this.parseComment)\n      } else if (this.char === CHAR_RSQB) {\n        return this.return(this.state.resultArr || InlineList())\n      } else {\n        return this.callNow(this.parseValue, this.recordInlineListValue)\n      }\n    }\n    recordInlineListValue (value) {\n      if (this.state.resultArr) {\n        const listType = this.state.resultArr[_contentType]\n        const valueType = tomlType(value)\n        if (listType !== valueType) {\n          throw this.error(new TomlError(`Inline lists must be a single type, not a mix of ${listType} and ${valueType}`))\n        }\n      } else {\n        this.state.resultArr = InlineList(tomlType(value))\n      }\n      if (isFloat(value) || isInteger(value)) {\n        // unbox now that we've verified they're ok\n        this.state.resultArr.push(value.valueOf())\n      } else {\n        this.state.resultArr.push(value)\n      }\n      return this.goto(this.parseInlineListNext)\n    }\n    parseInlineListNext () {\n      if (this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M || this.char === CTRL_J) {\n        return null\n      } else if (this.char === CHAR_NUM) {\n        return this.call(this.parseComment)\n      } else if (this.char === CHAR_COMMA) {\n        return this.next(this.parseInlineList)\n      } else if (this.char === CHAR_RSQB) {\n        return this.goto(this.parseInlineList)\n      } else {\n        throw this.error(new TomlError('Invalid character, expected whitespace, comma (,) or close bracket (])'))\n      }\n    }\n\n    /* INLINE TABLE */\n    parseInlineTable () {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else if (this.char === Parser.END || this.char === CHAR_NUM || this.char === CTRL_J || this.char === CTRL_M) {\n        throw this.error(new TomlError('Unterminated inline array'))\n      } else if (this.char === CHAR_RCUB) {\n        return this.return(this.state.resultTable || InlineTable())\n      } else {\n        if (!this.state.resultTable) this.state.resultTable = InlineTable()\n        return this.callNow(this.parseAssign, this.recordInlineTableValue)\n      }\n    }\n    recordInlineTableValue (kv) {\n      let target = this.state.resultTable\n      let finalKey = kv.key.pop()\n      for (let kw of kv.key) {\n        if (hasKey(target, kw) && (!isTable(target[kw]) || target[kw][_declared])) {\n          throw this.error(new TomlError(\"Can't redefine existing key\"))\n        }\n        target = target[kw] = target[kw] || Table()\n      }\n      if (hasKey(target, finalKey)) {\n        throw this.error(new TomlError(\"Can't redefine existing key\"))\n      }\n      if (isInteger(kv.value) || isFloat(kv.value)) {\n        target[finalKey] = kv.value.valueOf()\n      } else {\n        target[finalKey] = kv.value\n      }\n      return this.goto(this.parseInlineTableNext)\n    }\n    parseInlineTableNext () {\n      if (this.char === CHAR_SP || this.char === CTRL_I) {\n        return null\n      } else if (this.char === Parser.END || this.char === CHAR_NUM || this.char === CTRL_J || this.char === CTRL_M) {\n        throw this.error(new TomlError('Unterminated inline array'))\n      } else if (this.char === CHAR_COMMA) {\n        return this.next(this.parseInlineTable)\n      } else if (this.char === CHAR_RCUB) {\n        return this.goto(this.parseInlineTable)\n      } else {\n        throw this.error(new TomlError('Invalid character, expected whitespace, comma (,) or close bracket (])'))\n      }\n    }\n  }\n  return TOMLParser\n}\n","'use strict'\nmodule.exports = prettyError\n\nfunction prettyError (err, buf) {\n  /* istanbul ignore if */\n  if (err.pos == null || err.line == null) return err\n  let msg = err.message\n  msg += ` at row ${err.line + 1}, col ${err.col + 1}, pos ${err.pos}:\\n`\n\n  /* istanbul ignore else */\n  if (buf && buf.split) {\n    const lines = buf.split(/\\n/)\n    const lineNumWidth = String(Math.min(lines.length, err.line + 3)).length\n    let linePadding = ' '\n    while (linePadding.length < lineNumWidth) linePadding += ' '\n    for (let ii = Math.max(0, err.line - 1); ii < Math.min(lines.length, err.line + 2); ++ii) {\n      let lineNum = String(ii + 1)\n      if (lineNum.length < lineNumWidth) lineNum = ' ' + lineNum\n      if (err.line === ii) {\n        msg += lineNum + '> ' + lines[ii] + '\\n'\n        msg += linePadding + '  '\n        for (let hh = 0; hh < err.col; ++hh) {\n          msg += ' '\n        }\n        msg += '^\\n'\n      } else {\n        msg += lineNum + ': ' + lines[ii] + '\\n'\n      }\n    }\n  }\n  err.message = msg + '\\n'\n  return err\n}\n","'use strict'\nmodule.exports = parseString\n\nconst TOMLParser = require('./lib/toml-parser.js')\nconst prettyError = require('./parse-pretty-error.js')\n\nfunction parseString (str) {\n  if (global.Buffer && global.Buffer.isBuffer(str)) {\n    str = str.toString('utf8')\n  }\n  const parser = new TOMLParser()\n  try {\n    parser.parse(str)\n    return parser.finish()\n  } catch (err) {\n    throw prettyError(err, str)\n  }\n}\n","'use strict'\nmodule.exports = parseAsync\n\nconst TOMLParser = require('./lib/toml-parser.js')\nconst prettyError = require('./parse-pretty-error.js')\n\nfunction parseAsync (str, opts) {\n  if (!opts) opts = {}\n  const index = 0\n  const blocksize = opts.blocksize || 40960\n  const parser = new TOMLParser()\n  return new Promise((resolve, reject) => {\n    setImmediate(parseAsyncNext, index, blocksize, resolve, reject)\n  })\n  function parseAsyncNext (index, blocksize, resolve, reject) {\n    if (index >= str.length) {\n      try {\n        return resolve(parser.finish())\n      } catch (err) {\n        return reject(prettyError(err, str))\n      }\n    }\n    try {\n      parser.parse(str.slice(index, index + blocksize))\n      setImmediate(parseAsyncNext, index + blocksize, blocksize, resolve, reject)\n    } catch (err) {\n      reject(prettyError(err, str))\n    }\n  }\n}\n","'use strict'\nmodule.exports = parseStream\n\nconst stream = require('stream')\nconst TOMLParser = require('./lib/toml-parser.js')\n\nfunction parseStream (stm) {\n  if (stm) {\n    return parseReadable(stm)\n  } else {\n    return parseTransform(stm)\n  }\n}\n\nfunction parseReadable (stm) {\n  const parser = new TOMLParser()\n  stm.setEncoding('utf8')\n  return new Promise((resolve, reject) => {\n    let readable\n    let ended = false\n    let errored = false\n    function finish () {\n      ended = true\n      if (readable) return\n      try {\n        resolve(parser.finish())\n      } catch (err) {\n        reject(err)\n      }\n    }\n    function error (err) {\n      errored = true\n      reject(err)\n    }\n    stm.once('end', finish)\n    stm.once('error', error)\n    readNext()\n\n    function readNext () {\n      readable = true\n      let data\n      while ((data = stm.read()) !== null) {\n        try {\n          parser.parse(data)\n        } catch (err) {\n          return error(err)\n        }\n      }\n      readable = false\n      /* istanbul ignore if */\n      if (ended) return finish()\n      /* istanbul ignore if */\n      if (errored) return\n      stm.once('readable', readNext)\n    }\n  })\n}\n\nfunction parseTransform () {\n  const parser = new TOMLParser()\n  return new stream.Transform({\n    objectMode: true,\n    transform (chunk, encoding, cb) {\n      try {\n        parser.parse(chunk.toString(encoding))\n      } catch (err) {\n        this.emit('error', err)\n      }\n      cb()\n    },\n    flush (cb) {\n      try {\n        this.push(parser.finish())\n      } catch (err) {\n        this.emit('error', err)\n      }\n      cb()\n    }\n  })\n}\n","'use strict'\nmodule.exports = stringify\nmodule.exports.value = stringifyInline\n\nfunction stringify (obj) {\n  if (obj === null) throw typeError('null')\n  if (obj === void (0)) throw typeError('undefined')\n  if (typeof obj !== 'object') throw typeError(typeof obj)\n\n  if (typeof obj.toJSON === 'function') obj = obj.toJSON()\n  if (obj == null) return null\n  const type = tomlType(obj)\n  if (type !== 'table') throw typeError(type)\n  return stringifyObject('', '', obj)\n}\n\nfunction typeError (type) {\n  return new Error('Can only stringify objects, not ' + type)\n}\n\nfunction arrayOneTypeError () {\n  return new Error(\"Array values can't have mixed types\")\n}\n\nfunction getInlineKeys (obj) {\n  return Object.keys(obj).filter(key => isInline(obj[key]))\n}\nfunction getComplexKeys (obj) {\n  return Object.keys(obj).filter(key => !isInline(obj[key]))\n}\n\nfunction toJSON (obj) {\n  let nobj = Array.isArray(obj) ? [] : Object.prototype.hasOwnProperty.call(obj, '__proto__') ? {['__proto__']: undefined} : {}\n  for (let prop of Object.keys(obj)) {\n    if (obj[prop] && typeof obj[prop].toJSON === 'function' && !('toISOString' in obj[prop])) {\n      nobj[prop] = obj[prop].toJSON()\n    } else {\n      nobj[prop] = obj[prop]\n    }\n  }\n  return nobj\n}\n\nfunction stringifyObject (prefix, indent, obj) {\n  obj = toJSON(obj)\n  var inlineKeys\n  var complexKeys\n  inlineKeys = getInlineKeys(obj)\n  complexKeys = getComplexKeys(obj)\n  var result = []\n  var inlineIndent = indent || ''\n  inlineKeys.forEach(key => {\n    var type = tomlType(obj[key])\n    if (type !== 'undefined' && type !== 'null') {\n      result.push(inlineIndent + stringifyKey(key) + ' = ' + stringifyAnyInline(obj[key], true))\n    }\n  })\n  if (result.length > 0) result.push('')\n  var complexIndent = prefix && inlineKeys.length > 0 ? indent + '  ' : ''\n  complexKeys.forEach(key => {\n    result.push(stringifyComplex(prefix, complexIndent, key, obj[key]))\n  })\n  return result.join('\\n')\n}\n\nfunction isInline (value) {\n  switch (tomlType(value)) {\n    case 'undefined':\n    case 'null':\n    case 'integer':\n    case 'nan':\n    case 'float':\n    case 'boolean':\n    case 'string':\n    case 'datetime':\n      return true\n    case 'array':\n      return value.length === 0 || tomlType(value[0]) !== 'table'\n    case 'table':\n      return Object.keys(value).length === 0\n    /* istanbul ignore next */\n    default:\n      return false\n  }\n}\n\nfunction tomlType (value) {\n  if (value === undefined) {\n    return 'undefined'\n  } else if (value === null) {\n    return 'null'\n  /* eslint-disable valid-typeof */\n  } else if (typeof value === 'bigint' || (Number.isInteger(value) && !Object.is(value, -0))) {\n    return 'integer'\n  } else if (typeof value === 'number') {\n    return 'float'\n  } else if (typeof value === 'boolean') {\n    return 'boolean'\n  } else if (typeof value === 'string') {\n    return 'string'\n  } else if ('toISOString' in value) {\n    return isNaN(value) ? 'undefined' : 'datetime'\n  } else if (Array.isArray(value)) {\n    return 'array'\n  } else {\n    return 'table'\n  }\n}\n\nfunction stringifyKey (key) {\n  var keyStr = String(key)\n  if (/^[-A-Za-z0-9_]+$/.test(keyStr)) {\n    return keyStr\n  } else {\n    return stringifyBasicString(keyStr)\n  }\n}\n\nfunction stringifyBasicString (str) {\n  return '\"' + escapeString(str).replace(/\"/g, '\\\\\"') + '\"'\n}\n\nfunction stringifyLiteralString (str) {\n  return \"'\" + str + \"'\"\n}\n\nfunction numpad (num, str) {\n  while (str.length < num) str = '0' + str\n  return str\n}\n\nfunction escapeString (str) {\n  return str.replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\r/g, '\\\\r')\n    /* eslint-disable no-control-regex */\n    .replace(/([\\u0000-\\u001f\\u007f])/, c => '\\\\u' + numpad(4, c.codePointAt(0).toString(16)))\n    /* eslint-enable no-control-regex */\n}\n\nfunction stringifyMultilineString (str) {\n  let escaped = str.split(/\\n/).map(str => {\n    return escapeString(str).replace(/\"(?=\"\")/g, '\\\\\"')\n  }).join('\\n')\n  if (escaped.slice(-1) === '\"') escaped += '\\\\\\n'\n  return '\"\"\"\\n' + escaped + '\"\"\"'\n}\n\nfunction stringifyAnyInline (value, multilineOk) {\n  let type = tomlType(value)\n  if (type === 'string') {\n    if (multilineOk && /\\n/.test(value)) {\n      type = 'string-multiline'\n    } else if (!/[\\b\\t\\n\\f\\r']/.test(value) && /\"/.test(value)) {\n      type = 'string-literal'\n    }\n  }\n  return stringifyInline(value, type)\n}\n\nfunction stringifyInline (value, type) {\n  /* istanbul ignore if */\n  if (!type) type = tomlType(value)\n  switch (type) {\n    case 'string-multiline':\n      return stringifyMultilineString(value)\n    case 'string':\n      return stringifyBasicString(value)\n    case 'string-literal':\n      return stringifyLiteralString(value)\n    case 'integer':\n      return stringifyInteger(value)\n    case 'float':\n      return stringifyFloat(value)\n    case 'boolean':\n      return stringifyBoolean(value)\n    case 'datetime':\n      return stringifyDatetime(value)\n    case 'array':\n      return stringifyInlineArray(value.filter(_ => tomlType(_) !== 'null' && tomlType(_) !== 'undefined' && tomlType(_) !== 'nan'))\n    case 'table':\n      return stringifyInlineTable(value)\n    /* istanbul ignore next */\n    default:\n      throw typeError(type)\n  }\n}\n\nfunction stringifyInteger (value) {\n  /* eslint-disable security/detect-unsafe-regex */\n  return String(value).replace(/\\B(?=(\\d{3})+(?!\\d))/g, '_')\n}\n\nfunction stringifyFloat (value) {\n  if (value === Infinity) {\n    return 'inf'\n  } else if (value === -Infinity) {\n    return '-inf'\n  } else if (Object.is(value, NaN)) {\n    return 'nan'\n  } else if (Object.is(value, -0)) {\n    return '-0.0'\n  }\n  var chunks = String(value).split('.')\n  var int = chunks[0]\n  var dec = chunks[1] || 0\n  return stringifyInteger(int) + '.' + dec\n}\n\nfunction stringifyBoolean (value) {\n  return String(value)\n}\n\nfunction stringifyDatetime (value) {\n  return value.toISOString()\n}\n\nfunction isNumber (type) {\n  return type === 'float' || type === 'integer'\n}\nfunction arrayType (values) {\n  var contentType = tomlType(values[0])\n  if (values.every(_ => tomlType(_) === contentType)) return contentType\n  // mixed integer/float, emit as floats\n  if (values.every(_ => isNumber(tomlType(_)))) return 'float'\n  return 'mixed'\n}\nfunction validateArray (values) {\n  const type = arrayType(values)\n  if (type === 'mixed') {\n    throw arrayOneTypeError()\n  }\n  return type\n}\n\nfunction stringifyInlineArray (values) {\n  values = toJSON(values)\n  const type = validateArray(values)\n  var result = '['\n  var stringified = values.map(_ => stringifyInline(_, type))\n  if (stringified.join(', ').length > 60 || /\\n/.test(stringified)) {\n    result += '\\n  ' + stringified.join(',\\n  ') + '\\n'\n  } else {\n    result += ' ' + stringified.join(', ') + (stringified.length > 0 ? ' ' : '')\n  }\n  return result + ']'\n}\n\nfunction stringifyInlineTable (value) {\n  value = toJSON(value)\n  var result = []\n  Object.keys(value).forEach(key => {\n    result.push(stringifyKey(key) + ' = ' + stringifyAnyInline(value[key], false))\n  })\n  return '{ ' + result.join(', ') + (result.length > 0 ? ' ' : '') + '}'\n}\n\nfunction stringifyComplex (prefix, indent, key, value) {\n  var valueType = tomlType(value)\n  /* istanbul ignore else */\n  if (valueType === 'array') {\n    return stringifyArrayOfTables(prefix, indent, key, value)\n  } else if (valueType === 'table') {\n    return stringifyComplexTable(prefix, indent, key, value)\n  } else {\n    throw typeError(valueType)\n  }\n}\n\nfunction stringifyArrayOfTables (prefix, indent, key, values) {\n  values = toJSON(values)\n  validateArray(values)\n  var firstValueType = tomlType(values[0])\n  /* istanbul ignore if */\n  if (firstValueType !== 'table') throw typeError(firstValueType)\n  var fullKey = prefix + stringifyKey(key)\n  var result = ''\n  values.forEach(table => {\n    if (result.length > 0) result += '\\n'\n    result += indent + '[[' + fullKey + ']]\\n'\n    result += stringifyObject(fullKey + '.', indent, table)\n  })\n  return result\n}\n\nfunction stringifyComplexTable (prefix, indent, key, value) {\n  var fullKey = prefix + stringifyKey(key)\n  var result = ''\n  if (getInlineKeys(value).length > 0) {\n    result += indent + '[' + fullKey + ']\\n'\n  }\n  return result + stringifyObject(fullKey + '.', indent, value)\n}\n","/* eslint no-unsafe-finally: \"off\" */\nimport * as cache from '@actions/cache';\nimport * as core from '@actions/core';\nimport fs from 'fs';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport * as toml from '@iarna/toml';\nimport * as exec from '@actions/exec';\n\nexport const IS_WINDOWS = process.platform === 'win32';\nexport const IS_LINUX = process.platform === 'linux';\nexport const IS_MAC = process.platform === 'darwin';\nexport const WINDOWS_ARCHS = ['x86', 'x64'];\nexport const WINDOWS_PLATFORMS = ['win32', 'win64'];\nconst PYPY_VERSION_FILE = 'PYPY_VERSION';\n\nexport interface IPyPyManifestAsset {\n  filename: string;\n  arch: string;\n  platform: string;\n  download_url: string;\n}\n\nexport interface IPyPyManifestRelease {\n  pypy_version: string;\n  python_version: string;\n  stable: boolean;\n  latest_pypy: boolean;\n  files: IPyPyManifestAsset[];\n}\n\n/** create Symlinks for downloaded PyPy\n *  It should be executed only for downloaded versions in runtime, because\n *  toolcache versions have this setup.\n */\nexport function createSymlinkInFolder(\n  folderPath: string,\n  sourceName: string,\n  targetName: string,\n  setExecutable = false\n) {\n  const sourcePath = path.join(folderPath, sourceName);\n  const targetPath = path.join(folderPath, targetName);\n  if (fs.existsSync(targetPath)) {\n    return;\n  }\n\n  fs.symlinkSync(sourcePath, targetPath);\n  if (!IS_WINDOWS && setExecutable) {\n    fs.chmodSync(targetPath, '755');\n  }\n}\n\nexport function validateVersion(version: string) {\n  return isNightlyKeyword(version) || Boolean(semver.validRange(version));\n}\n\nexport function isNightlyKeyword(pypyVersion: string) {\n  return pypyVersion === 'nightly';\n}\n\nexport function getPyPyVersionFromPath(installDir: string) {\n  return path.basename(path.dirname(installDir));\n}\n\n/**\n * In tool-cache, we put PyPy to '<toolcache_root>/PyPy/<python_version>/x64'\n * There is no easy way to determine what PyPy version is located in specific folder\n * 'pypy --version' is not reliable enough since it is not set properly for preview versions\n * \"7.3.3rc1\" is marked as '7.3.3' in 'pypy --version'\n * so we put PYPY_VERSION file to PyPy directory when install it to VM and read it when we need to know version\n * PYPY_VERSION contains exact version from 'versions.json'\n */\nexport function readExactPyPyVersionFile(installDir: string) {\n  let pypyVersion = '';\n  const fileVersion = path.join(installDir, PYPY_VERSION_FILE);\n  if (fs.existsSync(fileVersion)) {\n    pypyVersion = fs.readFileSync(fileVersion).toString().trim();\n  }\n\n  return pypyVersion;\n}\n\nexport function writeExactPyPyVersionFile(\n  installDir: string,\n  resolvedPyPyVersion: string\n) {\n  const pypyFilePath = path.join(installDir, PYPY_VERSION_FILE);\n  fs.writeFileSync(pypyFilePath, resolvedPyPyVersion);\n}\n\n/**\n * Python version should be specified explicitly like \"x.y\" (2.7, 3.6, 3.7)\n * \"3.x\" or \"3\" are not supported\n * because it could cause ambiguity when both PyPy version and Python version are not precise\n */\nexport function validatePythonVersionFormatForPyPy(version: string) {\n  const re = /^\\d+\\.\\d+$/;\n  return re.test(version);\n}\n\nexport function isGhes(): boolean {\n  const ghUrl = new URL(\n    process.env['GITHUB_SERVER_URL'] || 'https://github.com'\n  );\n  return ghUrl.hostname.toUpperCase() !== 'GITHUB.COM';\n}\n\nexport function isCacheFeatureAvailable(): boolean {\n  if (cache.isFeatureAvailable()) {\n    return true;\n  }\n\n  if (isGhes()) {\n    core.warning(\n      'Caching is only supported on GHES version >= 3.5. If you are on a version >= 3.5, please check with your GHES admin if the Actions cache service is enabled or not.'\n    );\n    return false;\n  }\n\n  core.warning(\n    'The runner was not able to contact the cache service. Caching will be skipped'\n  );\n  return false;\n}\n\nexport function logWarning(message: string): void {\n  const warningPrefix = '[warning]';\n  core.info(`${warningPrefix}${message}`);\n}\n\nasync function getWindowsInfo() {\n  const {stdout} = await exec.getExecOutput(\n    'powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"',\n    undefined,\n    {\n      silent: true\n    }\n  );\n\n  const windowsVersion = stdout.trim().split(' ')[3];\n\n  return {osName: 'Windows', osVersion: windowsVersion};\n}\n\nasync function getMacOSInfo() {\n  const {stdout} = await exec.getExecOutput('sw_vers', ['-productVersion'], {\n    silent: true\n  });\n\n  const macOSVersion = stdout.trim();\n\n  return {osName: 'macOS', osVersion: macOSVersion};\n}\n\nexport async function getLinuxInfo() {\n  const {stdout} = await exec.getExecOutput('lsb_release', ['-i', '-r', '-s'], {\n    silent: true\n  });\n\n  const [osName, osVersion] = stdout.trim().split('\\n');\n\n  core.debug(`OS Name: ${osName}, Version: ${osVersion}`);\n\n  return {osName: osName, osVersion: osVersion};\n}\n\nexport async function getOSInfo() {\n  let osInfo;\n  try {\n    if (IS_WINDOWS) {\n      osInfo = await getWindowsInfo();\n    } else if (IS_LINUX) {\n      osInfo = await getLinuxInfo();\n    } else if (IS_MAC) {\n      osInfo = await getMacOSInfo();\n    }\n  } catch (err) {\n    const error = err as Error;\n    core.debug(error.message);\n  } finally {\n    return osInfo;\n  }\n}\n\n/**\n * Extract a value from an object by following the keys path provided.\n * If the value is present, it is returned. Otherwise undefined is returned.\n */\nfunction extractValue(obj: any, keys: string[]): string | undefined {\n  if (keys.length > 0) {\n    const value = obj[keys[0]];\n    if (keys.length > 1 && value !== undefined) {\n      return extractValue(value, keys.slice(1));\n    } else {\n      return value;\n    }\n  } else {\n    return;\n  }\n}\n\n/**\n * Python version extracted from the TOML file.\n * If the `project` key is present at the root level, the version is assumed to\n * be specified according to PEP 621 in `project.requires-python`.\n * Otherwise, if the `tool` key is present at the root level, the version is\n * assumed to be specified using poetry under `tool.poetry.dependencies.python`.\n * If none is present, returns an empty list.\n */\nexport function getVersionInputFromTomlFile(versionFile: string): string[] {\n  core.debug(`Trying to resolve version form ${versionFile}`);\n\n  const pyprojectFile = fs.readFileSync(versionFile, 'utf8');\n  const pyprojectConfig = toml.parse(pyprojectFile);\n  let keys = [];\n\n  if ('project' in pyprojectConfig) {\n    // standard project metadata (PEP 621)\n    keys = ['project', 'requires-python'];\n  } else {\n    // python poetry\n    keys = ['tool', 'poetry', 'dependencies', 'python'];\n  }\n  const versions = [];\n  const version = extractValue(pyprojectConfig, keys);\n  if (version !== undefined) {\n    versions.push(version);\n  }\n\n  core.info(`Extracted ${versions} from ${versionFile}`);\n  const rawVersions = Array.from(versions, version =>\n    version.split(',').join(' ')\n  );\n  const validatedVersions = rawVersions\n    .map(item => semver.validRange(item, true))\n    .filter((versionRange, index) => {\n      if (!versionRange) {\n        core.debug(\n          `The version ${rawVersions[index]} is not valid SemVer range`\n        );\n      }\n\n      return !!versionRange;\n    }) as string[];\n  return validatedVersions;\n}\n\n/**\n * Python version extracted from a plain text file.\n */\nexport function getVersionInputFromPlainFile(versionFile: string): string[] {\n  core.debug(`Trying to resolve version form ${versionFile}`);\n  const version = fs.readFileSync(versionFile, 'utf8');\n  core.info(`Resolved ${versionFile} as ${version}`);\n  return [version];\n}\n\n/**\n * Python version extracted from a plain or TOML file.\n */\nexport function getVersionInputFromFile(versionFile: string): string[] {\n  if (versionFile.endsWith('.toml')) {\n    return getVersionInputFromTomlFile(versionFile);\n  } else {\n    return getVersionInputFromPlainFile(versionFile);\n  }\n}\n","import * as os from 'os';\nimport * as path from 'path';\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\nimport * as semver from 'semver';\nimport * as httpm from '@actions/http-client';\nimport * as exec from '@actions/exec';\nimport fs from 'fs';\n\nimport {\n  IS_WINDOWS,\n  WINDOWS_PLATFORMS,\n  IPyPyManifestRelease,\n  createSymlinkInFolder,\n  isNightlyKeyword,\n  writeExactPyPyVersionFile\n} from './utils';\n\nexport async function installPyPy(\n  pypyVersion: string,\n  pythonVersion: string,\n  architecture: string,\n  allowPreReleases: boolean,\n  releases: IPyPyManifestRelease[] | undefined\n) {\n  let downloadDir;\n\n  releases = releases ?? (await getAvailablePyPyVersions());\n\n  if (!releases || releases.length === 0) {\n    throw new Error('No release was found in PyPy version.json');\n  }\n\n  let releaseData = findRelease(\n    releases,\n    pythonVersion,\n    pypyVersion,\n    architecture,\n    false\n  );\n\n  if (allowPreReleases && (!releaseData || !releaseData.foundAsset)) {\n    // check for pre-release\n    core.info(\n      [\n        `Stable PyPy version ${pythonVersion} (${pypyVersion}) with arch ${architecture} not found`,\n        `Trying pre-release versions`\n      ].join(os.EOL)\n    );\n    releaseData = findRelease(\n      releases,\n      pythonVersion,\n      pypyVersion,\n      architecture,\n      true\n    );\n  }\n\n  if (!releaseData || !releaseData.foundAsset) {\n    throw new Error(\n      `PyPy version ${pythonVersion} (${pypyVersion}) with arch ${architecture} not found`\n    );\n  }\n\n  const {foundAsset, resolvedPythonVersion, resolvedPyPyVersion} = releaseData;\n  const downloadUrl = `${foundAsset.download_url}`;\n\n  core.info(`Downloading PyPy from \"${downloadUrl}\" ...`);\n\n  try {\n    const pypyPath = await tc.downloadTool(downloadUrl);\n\n    core.info('Extracting downloaded archive...');\n    if (IS_WINDOWS) {\n      downloadDir = await tc.extractZip(pypyPath);\n    } else {\n      downloadDir = await tc.extractTar(pypyPath, undefined, 'x');\n    }\n\n    // root folder in archive can have unpredictable name so just take the first folder\n    // downloadDir is unique folder under TEMP and can't contain any other folders\n    const archiveName = fs.readdirSync(downloadDir)[0];\n\n    const toolDir = path.join(downloadDir, archiveName);\n    let installDir = toolDir;\n    if (!isNightlyKeyword(resolvedPyPyVersion)) {\n      installDir = await tc.cacheDir(\n        toolDir,\n        'PyPy',\n        resolvedPythonVersion,\n        architecture\n      );\n    }\n\n    writeExactPyPyVersionFile(installDir, resolvedPyPyVersion);\n\n    const binaryPath = getPyPyBinaryPath(installDir);\n    await createPyPySymlink(binaryPath, resolvedPythonVersion);\n    await installPip(binaryPath);\n\n    return {installDir, resolvedPythonVersion, resolvedPyPyVersion};\n  } catch (err) {\n    if (err instanceof Error) {\n      // Rate limit?\n      if (\n        err instanceof tc.HTTPError &&\n        (err.httpStatusCode === 403 || err.httpStatusCode === 429)\n      ) {\n        core.info(\n          `Received HTTP status code ${err.httpStatusCode}.  This usually indicates the rate limit has been exceeded`\n        );\n      } else {\n        core.info(err.message);\n      }\n      if (err.stack !== undefined) {\n        core.debug(err.stack);\n      }\n    }\n    throw err;\n  }\n}\n\nexport async function getAvailablePyPyVersions() {\n  const url = 'https://downloads.python.org/pypy/versions.json';\n  const http: httpm.HttpClient = new httpm.HttpClient('tool-cache');\n\n  const response = await http.getJson<IPyPyManifestRelease[]>(url);\n  if (!response.result) {\n    throw new Error(\n      `Unable to retrieve the list of available PyPy versions from '${url}'`\n    );\n  }\n\n  return response.result;\n}\n\nasync function createPyPySymlink(\n  pypyBinaryPath: string,\n  pythonVersion: string\n) {\n  const version = semver.coerce(pythonVersion)!;\n  const pythonBinaryPostfix = semver.major(version);\n  const pythonMinor = semver.minor(version);\n  const pypyBinaryPostfix = pythonBinaryPostfix === 2 ? '' : '3';\n  const pypyMajorMinorBinaryPostfix = `${pythonBinaryPostfix}.${pythonMinor}`;\n  const binaryExtension = IS_WINDOWS ? '.exe' : '';\n\n  core.info('Creating symlinks...');\n  createSymlinkInFolder(\n    pypyBinaryPath,\n    `pypy${pypyBinaryPostfix}${binaryExtension}`,\n    `python${pythonBinaryPostfix}${binaryExtension}`,\n    true\n  );\n\n  createSymlinkInFolder(\n    pypyBinaryPath,\n    `pypy${pypyBinaryPostfix}${binaryExtension}`,\n    `python${binaryExtension}`,\n    true\n  );\n\n  createSymlinkInFolder(\n    pypyBinaryPath,\n    `pypy${pypyBinaryPostfix}${binaryExtension}`,\n    `pypy${pypyMajorMinorBinaryPostfix}${binaryExtension}`,\n    true\n  );\n}\n\nasync function installPip(pythonLocation: string) {\n  core.info('Installing and updating pip');\n  const pythonBinary = path.join(pythonLocation, 'python');\n  await exec.exec(`${pythonBinary} -m ensurepip`);\n\n  await exec.exec(\n    `${pythonLocation}/python -m pip install --ignore-installed pip`\n  );\n}\n\nexport function findRelease(\n  releases: IPyPyManifestRelease[],\n  pythonVersion: string,\n  pypyVersion: string,\n  architecture: string,\n  includePrerelease: boolean\n) {\n  const options = {includePrerelease: includePrerelease};\n  const filterReleases = releases.filter(item => {\n    const isPythonVersionSatisfied = semver.satisfies(\n      semver.coerce(item.python_version)!,\n      pythonVersion\n    );\n    const isPyPyNightly =\n      isNightlyKeyword(pypyVersion) && isNightlyKeyword(item.pypy_version);\n    const isPyPyVersionSatisfied =\n      isPyPyNightly ||\n      semver.satisfies(\n        pypyVersionToSemantic(item.pypy_version),\n        pypyVersion,\n        options\n      );\n    const isArchPresent =\n      item.files &&\n      (IS_WINDOWS\n        ? isArchPresentForWindows(item, architecture)\n        : isArchPresentForMacOrLinux(item, architecture, process.platform));\n    return isPythonVersionSatisfied && isPyPyVersionSatisfied && isArchPresent;\n  });\n\n  if (filterReleases.length === 0) {\n    return null;\n  }\n\n  const sortedReleases = filterReleases.sort((previous, current) => {\n    return (\n      semver.compare(\n        semver.coerce(pypyVersionToSemantic(current.pypy_version))!,\n        semver.coerce(pypyVersionToSemantic(previous.pypy_version))!\n      ) ||\n      semver.compare(\n        semver.coerce(current.python_version)!,\n        semver.coerce(previous.python_version)!\n      )\n    );\n  });\n\n  const foundRelease = sortedReleases[0];\n  const foundAsset = IS_WINDOWS\n    ? findAssetForWindows(foundRelease, architecture)\n    : findAssetForMacOrLinux(foundRelease, architecture, process.platform);\n\n  return {\n    foundAsset,\n    resolvedPythonVersion: foundRelease.python_version,\n    resolvedPyPyVersion: foundRelease.pypy_version.trim()\n  };\n}\n\n/** Get PyPy binary location from the tool of installation directory\n *  - On Linux and macOS, the Python interpreter is in 'bin'.\n *  - On Windows, it is in the installation root.\n */\nexport function getPyPyBinaryPath(installDir: string) {\n  const _binDir = path.join(installDir, 'bin');\n  return IS_WINDOWS ? installDir : _binDir;\n}\n\nexport function pypyVersionToSemantic(versionSpec: string) {\n  const prereleaseVersion = /(\\d+\\.\\d+\\.\\d+)((?:a|b|rc))(\\d*)/g;\n  return versionSpec.replace(prereleaseVersion, '$1-$2.$3');\n}\n\nexport function isArchPresentForWindows(item: any, architecture: string) {\n  architecture = replaceX32toX86(architecture);\n  return item.files.some(\n    (file: any) =>\n      WINDOWS_PLATFORMS.includes(file.platform) && file.arch === architecture\n  );\n}\n\nexport function isArchPresentForMacOrLinux(\n  item: any,\n  architecture: string,\n  platform: string\n) {\n  return item.files.some(\n    (file: any) => file.arch === architecture && file.platform === platform\n  );\n}\n\nexport function findAssetForWindows(releases: any, architecture: string) {\n  architecture = replaceX32toX86(architecture);\n  return releases.files.find(\n    (item: any) =>\n      WINDOWS_PLATFORMS.includes(item.platform) && item.arch === architecture\n  );\n}\n\nexport function findAssetForMacOrLinux(\n  releases: any,\n  architecture: string,\n  platform: string\n) {\n  return releases.files.find(\n    (item: any) => item.arch === architecture && item.platform === platform\n  );\n}\n\nfunction replaceX32toX86(architecture: string): string {\n  // convert x32 to x86 because os.arch() returns x32 for 32-bit systems but PyPy releases json has x86 arch value.\n  if (architecture === 'x32') {\n    architecture = 'x86';\n  }\n  return architecture;\n}\n","import * as path from 'path';\nimport * as pypyInstall from './install-pypy';\nimport {\n  IS_WINDOWS,\n  WINDOWS_ARCHS,\n  validateVersion,\n  getPyPyVersionFromPath,\n  readExactPyPyVersionFile,\n  validatePythonVersionFormatForPyPy,\n  IPyPyManifestRelease\n} from './utils';\n\nimport * as semver from 'semver';\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\n\ninterface IPyPyVersionSpec {\n  pypyVersion: string;\n  pythonVersion: string;\n}\n\nexport async function findPyPyVersion(\n  versionSpec: string,\n  architecture: string,\n  updateEnvironment: boolean,\n  checkLatest: boolean,\n  allowPreReleases: boolean\n): Promise<{resolvedPyPyVersion: string; resolvedPythonVersion: string}> {\n  let resolvedPyPyVersion = '';\n  let resolvedPythonVersion = '';\n  let installDir: string | null;\n  let releases: IPyPyManifestRelease[] | undefined;\n\n  const pypyVersionSpec = parsePyPyVersion(versionSpec);\n\n  if (checkLatest) {\n    releases = await pypyInstall.getAvailablePyPyVersions();\n    if (releases && releases.length > 0) {\n      const releaseData = pypyInstall.findRelease(\n        releases,\n        pypyVersionSpec.pythonVersion,\n        pypyVersionSpec.pypyVersion,\n        architecture,\n        false\n      );\n\n      if (releaseData) {\n        core.info(\n          `Resolved as PyPy ${releaseData.resolvedPyPyVersion} with Python (${releaseData.resolvedPythonVersion})`\n        );\n        pypyVersionSpec.pythonVersion = releaseData.resolvedPythonVersion;\n        pypyVersionSpec.pypyVersion = releaseData.resolvedPyPyVersion;\n      } else {\n        core.info(\n          `Failed to resolve PyPy ${pypyVersionSpec.pypyVersion} with Python (${pypyVersionSpec.pythonVersion}) from manifest`\n        );\n      }\n    }\n  }\n\n  ({installDir, resolvedPythonVersion, resolvedPyPyVersion} = findPyPyToolCache(\n    pypyVersionSpec.pythonVersion,\n    pypyVersionSpec.pypyVersion,\n    architecture\n  ));\n\n  if (!installDir) {\n    ({installDir, resolvedPythonVersion, resolvedPyPyVersion} =\n      await pypyInstall.installPyPy(\n        pypyVersionSpec.pypyVersion,\n        pypyVersionSpec.pythonVersion,\n        architecture,\n        allowPreReleases,\n        releases\n      ));\n  }\n\n  const pipDir = IS_WINDOWS ? 'Scripts' : 'bin';\n  const _binDir = path.join(installDir, pipDir);\n  const binaryExtension = IS_WINDOWS ? '.exe' : '';\n  const pythonPath = path.join(\n    IS_WINDOWS ? installDir : _binDir,\n    `python${binaryExtension}`\n  );\n  const pythonLocation = pypyInstall.getPyPyBinaryPath(installDir);\n  if (updateEnvironment) {\n    core.exportVariable('pythonLocation', installDir);\n    // https://cmake.org/cmake/help/latest/module/FindPython.html#module:FindPython\n    core.exportVariable('Python_ROOT_DIR', installDir);\n    // https://cmake.org/cmake/help/latest/module/FindPython2.html#module:FindPython2\n    core.exportVariable('Python2_ROOT_DIR', installDir);\n    // https://cmake.org/cmake/help/latest/module/FindPython3.html#module:FindPython3\n    core.exportVariable('Python3_ROOT_DIR', installDir);\n    core.exportVariable('PKG_CONFIG_PATH', pythonLocation + '/lib/pkgconfig');\n    core.addPath(pythonLocation);\n    core.addPath(_binDir);\n  }\n  core.setOutput('python-version', 'pypy' + resolvedPyPyVersion);\n  core.setOutput('python-path', pythonPath);\n\n  return {resolvedPyPyVersion, resolvedPythonVersion};\n}\n\nexport function findPyPyToolCache(\n  pythonVersion: string,\n  pypyVersion: string,\n  architecture: string\n) {\n  let resolvedPyPyVersion = '';\n  let resolvedPythonVersion = '';\n  let installDir: string | null = IS_WINDOWS\n    ? findPyPyInstallDirForWindows(pythonVersion)\n    : tc.find('PyPy', pythonVersion, architecture);\n\n  if (installDir) {\n    // 'tc.find' finds tool based on Python version but we also need to check\n    // whether PyPy version satisfies requested version.\n    resolvedPythonVersion = getPyPyVersionFromPath(installDir);\n    resolvedPyPyVersion = readExactPyPyVersionFile(installDir);\n\n    const isPyPyVersionSatisfies = semver.satisfies(\n      resolvedPyPyVersion,\n      pypyVersion\n    );\n    if (!isPyPyVersionSatisfies) {\n      installDir = null;\n      resolvedPyPyVersion = '';\n      resolvedPythonVersion = '';\n    }\n  }\n\n  if (!installDir) {\n    core.info(\n      `PyPy version ${pythonVersion} (${pypyVersion}) was not found in the local cache`\n    );\n  }\n\n  return {installDir, resolvedPythonVersion, resolvedPyPyVersion};\n}\n\nexport function parsePyPyVersion(versionSpec: string): IPyPyVersionSpec {\n  const versions = versionSpec.split('-').filter(item => !!item);\n\n  if (/^(pypy)(.+)/.test(versions[0])) {\n    const pythonVersion = versions[0].replace('pypy', '');\n    versions.splice(0, 1, 'pypy', pythonVersion);\n  }\n\n  if (versions.length < 2 || versions[0] != 'pypy') {\n    throw new Error(\n      \"Invalid 'version' property for PyPy. PyPy version should be specified as 'pypy<python-version>' or 'pypy-<python-version>'. See README for examples and documentation.\"\n    );\n  }\n\n  const pythonVersion = versions[1];\n  let pypyVersion: string;\n  if (versions.length > 2) {\n    pypyVersion = pypyInstall.pypyVersionToSemantic(versions[2]);\n  } else {\n    pypyVersion = 'x';\n  }\n\n  if (!validateVersion(pythonVersion) || !validateVersion(pypyVersion)) {\n    throw new Error(\n      \"Invalid 'version' property for PyPy. Both Python version and PyPy versions should satisfy SemVer notation. See README for examples and documentation.\"\n    );\n  }\n\n  if (!validatePythonVersionFormatForPyPy(pythonVersion)) {\n    throw new Error(\n      \"Invalid format of Python version for PyPy. Python version should be specified in format 'x.y'. See README for examples and documentation.\"\n    );\n  }\n\n  return {\n    pypyVersion: pypyVersion,\n    pythonVersion: pythonVersion\n  };\n}\n\nexport function findPyPyInstallDirForWindows(pythonVersion: string): string {\n  let installDir = '';\n\n  WINDOWS_ARCHS.forEach(\n    architecture =>\n      (installDir = installDir || tc.find('PyPy', pythonVersion, architecture))\n  );\n\n  return installDir;\n}\n","import * as path from 'path';\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\nimport * as exec from '@actions/exec';\nimport {ExecOptions} from '@actions/exec/lib/interfaces';\nimport {IS_WINDOWS, IS_LINUX} from './utils';\n\nconst TOKEN = core.getInput('token');\nconst AUTH = !TOKEN ? undefined : `token ${TOKEN}`;\nconst MANIFEST_REPO_OWNER = 'actions';\nconst MANIFEST_REPO_NAME = 'python-versions';\nconst MANIFEST_REPO_BRANCH = 'main';\nexport const MANIFEST_URL = `https://raw.githubusercontent.com/${MANIFEST_REPO_OWNER}/${MANIFEST_REPO_NAME}/${MANIFEST_REPO_BRANCH}/versions-manifest.json`;\n\nexport async function findReleaseFromManifest(\n  semanticVersionSpec: string,\n  architecture: string,\n  manifest: tc.IToolRelease[] | null\n): Promise<tc.IToolRelease | undefined> {\n  if (!manifest) {\n    manifest = await getManifest();\n  }\n\n  const foundRelease = await tc.findFromManifest(\n    semanticVersionSpec,\n    false,\n    manifest,\n    architecture\n  );\n\n  return foundRelease;\n}\n\nexport function getManifest(): Promise<tc.IToolRelease[]> {\n  core.debug(\n    `Getting manifest from ${MANIFEST_REPO_OWNER}/${MANIFEST_REPO_NAME}@${MANIFEST_REPO_BRANCH}`\n  );\n  return tc.getManifestFromRepo(\n    MANIFEST_REPO_OWNER,\n    MANIFEST_REPO_NAME,\n    AUTH,\n    MANIFEST_REPO_BRANCH\n  );\n}\n\nasync function installPython(workingDirectory: string) {\n  const options: ExecOptions = {\n    cwd: workingDirectory,\n    env: {\n      ...process.env,\n      ...(IS_LINUX && {LD_LIBRARY_PATH: path.join(workingDirectory, 'lib')})\n    },\n    silent: true,\n    listeners: {\n      stdout: (data: Buffer) => {\n        core.info(data.toString().trim());\n      },\n      stderr: (data: Buffer) => {\n        core.error(data.toString().trim());\n      }\n    }\n  };\n\n  if (IS_WINDOWS) {\n    await exec.exec('powershell', ['./setup.ps1'], options);\n  } else {\n    await exec.exec('bash', ['./setup.sh'], options);\n  }\n}\n\nexport async function installCpythonFromRelease(release: tc.IToolRelease) {\n  const downloadUrl = release.files[0].download_url;\n\n  core.info(`Download from \"${downloadUrl}\"`);\n  let pythonPath = '';\n  try {\n    pythonPath = await tc.downloadTool(downloadUrl, undefined, AUTH);\n    core.info('Extract downloaded archive');\n    let pythonExtractedFolder;\n    if (IS_WINDOWS) {\n      pythonExtractedFolder = await tc.extractZip(pythonPath);\n    } else {\n      pythonExtractedFolder = await tc.extractTar(pythonPath);\n    }\n\n    core.info('Execute installation script');\n    await installPython(pythonExtractedFolder);\n  } catch (err) {\n    if (err instanceof tc.HTTPError) {\n      // Rate limit?\n      if (err.httpStatusCode === 403 || err.httpStatusCode === 429) {\n        core.info(\n          `Received HTTP status code ${err.httpStatusCode}.  This usually indicates the rate limit has been exceeded`\n        );\n      } else {\n        core.info(err.message);\n      }\n      if (err.stack) {\n        core.debug(err.stack);\n      }\n    }\n    throw err;\n  }\n}\n","import * as os from 'os';\nimport * as path from 'path';\nimport {IS_WINDOWS, IS_LINUX, getOSInfo} from './utils';\n\nimport * as semver from 'semver';\n\nimport * as installer from './install-python';\n\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\n\n// Python has \"scripts\" or \"bin\" directories where command-line tools that come with packages are installed.\n// This is where pip is, along with anything that pip installs.\n// There is a separate directory for `pip install --user`.\n//\n// For reference, these directories are as follows:\n//   macOS / Linux:\n//      <sys.prefix>/bin (by default /usr/local/bin, but not on hosted agents -- see the `else`)\n//      (--user) ~/.local/bin\n//   Windows:\n//      <Python installation dir>\\Scripts\n//      (--user) %APPDATA%\\Python\\PythonXY\\Scripts\n// See https://docs.python.org/3/library/sysconfig.html\n\nfunction binDir(installDir: string): string {\n  if (IS_WINDOWS) {\n    return path.join(installDir, 'Scripts');\n  } else {\n    return path.join(installDir, 'bin');\n  }\n}\n\nexport async function useCpythonVersion(\n  version: string,\n  architecture: string,\n  updateEnvironment: boolean,\n  checkLatest: boolean,\n  allowPreReleases: boolean\n): Promise<InstalledVersion> {\n  let manifest: tc.IToolRelease[] | null = null;\n  const desugaredVersionSpec = desugarDevVersion(version);\n  let semanticVersionSpec = pythonVersionToSemantic(\n    desugaredVersionSpec,\n    allowPreReleases\n  );\n  core.debug(`Semantic version spec of ${version} is ${semanticVersionSpec}`);\n\n  if (checkLatest) {\n    manifest = await installer.getManifest();\n    const resolvedVersion = (\n      await installer.findReleaseFromManifest(\n        semanticVersionSpec,\n        architecture,\n        manifest\n      )\n    )?.version;\n\n    if (resolvedVersion) {\n      semanticVersionSpec = resolvedVersion;\n      core.info(`Resolved as '${semanticVersionSpec}'`);\n    } else {\n      core.info(\n        `Failed to resolve version ${semanticVersionSpec} from manifest`\n      );\n    }\n  }\n\n  let installDir: string | null = tc.find(\n    'Python',\n    semanticVersionSpec,\n    architecture\n  );\n  if (!installDir) {\n    core.info(\n      `Version ${semanticVersionSpec} was not found in the local cache`\n    );\n    const foundRelease = await installer.findReleaseFromManifest(\n      semanticVersionSpec,\n      architecture,\n      manifest\n    );\n\n    if (foundRelease && foundRelease.files && foundRelease.files.length > 0) {\n      core.info(`Version ${semanticVersionSpec} is available for downloading`);\n      await installer.installCpythonFromRelease(foundRelease);\n\n      installDir = tc.find('Python', semanticVersionSpec, architecture);\n    }\n  }\n\n  if (!installDir) {\n    const osInfo = await getOSInfo();\n    throw new Error(\n      [\n        `The version '${version}' with architecture '${architecture}' was not found for ${\n          osInfo\n            ? `${osInfo.osName} ${osInfo.osVersion}`\n            : 'this operating system'\n        }.`,\n        `The list of all available versions can be found here: ${installer.MANIFEST_URL}`\n      ].join(os.EOL)\n    );\n  }\n\n  const _binDir = binDir(installDir);\n  const binaryExtension = IS_WINDOWS ? '.exe' : '';\n  const pythonPath = path.join(\n    IS_WINDOWS ? installDir : _binDir,\n    `python${binaryExtension}`\n  );\n  if (updateEnvironment) {\n    core.exportVariable('pythonLocation', installDir);\n    core.exportVariable('PKG_CONFIG_PATH', installDir + '/lib/pkgconfig');\n    core.exportVariable('pythonLocation', installDir);\n    // https://cmake.org/cmake/help/latest/module/FindPython.html#module:FindPython\n    core.exportVariable('Python_ROOT_DIR', installDir);\n    // https://cmake.org/cmake/help/latest/module/FindPython2.html#module:FindPython2\n    core.exportVariable('Python2_ROOT_DIR', installDir);\n    // https://cmake.org/cmake/help/latest/module/FindPython3.html#module:FindPython3\n    core.exportVariable('Python3_ROOT_DIR', installDir);\n    core.exportVariable('PKG_CONFIG_PATH', installDir + '/lib/pkgconfig');\n\n    if (IS_LINUX) {\n      const libPath = process.env.LD_LIBRARY_PATH\n        ? `:${process.env.LD_LIBRARY_PATH}`\n        : '';\n      const pyLibPath = path.join(installDir, 'lib');\n\n      if (!libPath.split(':').includes(pyLibPath)) {\n        core.exportVariable('LD_LIBRARY_PATH', pyLibPath + libPath);\n      }\n    }\n    core.addPath(installDir);\n    core.addPath(_binDir);\n\n    if (IS_WINDOWS) {\n      // Add --user directory\n      // `installDir` from tool cache should look like $RUNNER_TOOL_CACHE/Python/<semantic version>/x64/\n      // So if `findLocalTool` succeeded above, we must have a conformant `installDir`\n      const version = path.basename(path.dirname(installDir));\n      const major = semver.major(version);\n      const minor = semver.minor(version);\n\n      const userScriptsDir = path.join(\n        process.env['APPDATA'] || '',\n        'Python',\n        `Python${major}${minor}`,\n        'Scripts'\n      );\n      core.addPath(userScriptsDir);\n    }\n    // On Linux and macOS, pip will create the --user directory and add it to PATH as needed.\n  }\n\n  const installed = versionFromPath(installDir);\n  core.setOutput('python-version', installed);\n  core.setOutput('python-path', pythonPath);\n\n  return {impl: 'CPython', version: installed};\n}\n\n/** Convert versions like `3.8-dev` to a version like `~3.8.0-0`. */\nfunction desugarDevVersion(versionSpec: string) {\n  const devVersion = /^(\\d+)\\.(\\d+)-dev$/;\n  return versionSpec.replace(devVersion, '~$1.$2.0-0');\n}\n\n/** Extracts python version from install path from hosted tool cache as described in README.md */\nfunction versionFromPath(installDir: string) {\n  const parts = installDir.split(path.sep);\n  const idx = parts.findIndex(part => part === 'PyPy' || part === 'Python');\n\n  return parts[idx + 1] || '';\n}\n\ninterface InstalledVersion {\n  impl: string;\n  version: string;\n}\n\n/**\n * Python's prelease versions look like `3.7.0b2`.\n * This is the one part of Python versioning that does not look like semantic versioning, which specifies `3.7.0-b2`.\n * If the version spec contains prerelease versions, we need to convert them to the semantic version equivalent.\n *\n * For easier use of the action, we also map 'x.y' to allow pre-release before 'x.y.0' release if allowPreReleases is true\n */\nexport function pythonVersionToSemantic(\n  versionSpec: string,\n  allowPreReleases: boolean\n) {\n  const prereleaseVersion = /(\\d+\\.\\d+\\.\\d+)((?:a|b|rc)\\d*)/g;\n  const majorMinor = /^(\\d+)\\.(\\d+)$/;\n  let result = versionSpec.replace(prereleaseVersion, '$1-$2');\n  if (allowPreReleases) {\n    result = result.replace(majorMinor, '~$1.$2.0-0');\n  }\n  return result;\n}\n","import path, { join } from \"path\"\nimport { fileURLToPath } from \"url\"\nimport { debug } from \"@actions/core\"\nimport { GITHUB_ACTIONS } from \"ci-info\"\nimport { info, warning } from \"ci-log\"\nimport { pathExists } from \"path-exists\"\nimport { findPyPyVersion } from \"setup-python/src/find-pypy.js\"\nimport { useCpythonVersion } from \"setup-python/src/find-python.js\"\nimport { IS_MAC } from \"setup-python/src/utils.js\"\n\nconst dirname = typeof __dirname === \"string\" ? __dirname : path.dirname(fileURLToPath(import.meta.url))\n\nfunction isPyPyVersion(versionSpec: string) {\n  return versionSpec.startsWith(\"pypy\")\n}\n\nconst checkLatest = false\n\nexport async function setupActionsPython(version: string, _setupDir: string, arch: string) {\n  if (IS_MAC) {\n    process.env.AGENT_TOOLSDIRECTORY = \"/Users/runner/hostedtoolcache\"\n  }\n\n  const agent_toolsdirectory = process.env.AGENT_TOOLSDIRECTORY?.trim()\n  if (typeof agent_toolsdirectory === \"string\" && agent_toolsdirectory !== \"\") {\n    process.env.RUNNER_TOOL_CACHE = process.env.AGENT_TOOLSDIRECTORY\n  }\n\n  debug(`Python is expected to be installed into ${process.env.RUNNER_TOOL_CACHE}`)\n\n  if (version) {\n    let pythonVersion: string\n    if (isPyPyVersion(version)) {\n      const installed = await findPyPyVersion(version, arch, true, checkLatest, false)\n      pythonVersion = `${installed.resolvedPyPyVersion}-${installed.resolvedPythonVersion}`\n      info(`Successfully set up PyPy ${installed.resolvedPyPyVersion} with Python (${installed.resolvedPythonVersion})`)\n    } else {\n      const installed = await useCpythonVersion(version, arch, true, checkLatest, false)\n      pythonVersion = installed.version\n      info(`Successfully set up ${installed.impl} (${pythonVersion})`)\n    }\n\n    // const cache = false\n    // if (cache) {\n    //   const { cacheDependencies } = await import(\"setup-python/src/cache-dependencies\")\n    //   await cacheDependencies(\"pip\", pythonVersion)\n    // }\n  }\n\n  if (GITHUB_ACTIONS) {\n    await addPythonLoggingMatcher()\n  }\n\n  return undefined\n}\n\nasync function addPythonLoggingMatcher() {\n  const matcherPath = join(dirname, \"python_matcher.json\")\n  if (!(await pathExists(matcherPath))) {\n    return warning(\"the python_matcher.json file does not exist in the same folder as setup-cpp.js\")\n  }\n  info(`::add-matcher::${matcherPath}`)\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._readLinuxVersionFile = exports._getOsVersion = exports._findMatch = void 0;\nconst semver = __importStar(require(\"semver\"));\nconst core_1 = require(\"@actions/core\");\n// needs to be require for core node modules to be mocked\n/* eslint @typescript-eslint/no-require-imports: 0 */\nconst os = require(\"os\");\nconst cp = require(\"child_process\");\nconst fs = require(\"fs\");\nfunction _findMatch(versionSpec, stable, candidates, archFilter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const platFilter = os.platform();\n        let result;\n        let match;\n        let file;\n        for (const candidate of candidates) {\n            const version = candidate.version;\n            core_1.debug(`check ${version} satisfies ${versionSpec}`);\n            if (semver.satisfies(version, versionSpec) &&\n                (!stable || candidate.stable === stable)) {\n                file = candidate.files.find(item => {\n                    core_1.debug(`${item.arch}===${archFilter} && ${item.platform}===${platFilter}`);\n                    let chk = item.arch === archFilter && item.platform === platFilter;\n                    if (chk && item.platform_version) {\n                        const osVersion = module.exports._getOsVersion();\n                        if (osVersion === item.platform_version) {\n                            chk = true;\n                        }\n                        else {\n                            chk = semver.satisfies(osVersion, item.platform_version);\n                        }\n                    }\n                    return chk;\n                });\n                if (file) {\n                    core_1.debug(`matched ${candidate.version}`);\n                    match = candidate;\n                    break;\n                }\n            }\n        }\n        if (match && file) {\n            // clone since we're mutating the file list to be only the file that matches\n            result = Object.assign({}, match);\n            result.files = [file];\n        }\n        return result;\n    });\n}\nexports._findMatch = _findMatch;\nfunction _getOsVersion() {\n    // TODO: add windows and other linux, arm variants\n    // right now filtering on version is only an ubuntu and macos scenario for tools we build for hosted (python)\n    const plat = os.platform();\n    let version = '';\n    if (plat === 'darwin') {\n        version = cp.execSync('sw_vers -productVersion').toString();\n    }\n    else if (plat === 'linux') {\n        // lsb_release process not in some containers, readfile\n        // Run cat /etc/lsb-release\n        // DISTRIB_ID=Ubuntu\n        // DISTRIB_RELEASE=18.04\n        // DISTRIB_CODENAME=bionic\n        // DISTRIB_DESCRIPTION=\"Ubuntu 18.04.4 LTS\"\n        const lsbContents = module.exports._readLinuxVersionFile();\n        if (lsbContents) {\n            const lines = lsbContents.split('\\n');\n            for (const line of lines) {\n                const parts = line.split('=');\n                if (parts.length === 2 &&\n                    (parts[0].trim() === 'VERSION_ID' ||\n                        parts[0].trim() === 'DISTRIB_RELEASE')) {\n                    version = parts[1]\n                        .trim()\n                        .replace(/^\"/, '')\n                        .replace(/\"$/, '');\n                    break;\n                }\n            }\n        }\n    }\n    return version;\n}\nexports._getOsVersion = _getOsVersion;\nfunction _readLinuxVersionFile() {\n    const lsbReleaseFile = '/etc/lsb-release';\n    const osReleaseFile = '/etc/os-release';\n    let contents = '';\n    if (fs.existsSync(lsbReleaseFile)) {\n        contents = fs.readFileSync(lsbReleaseFile).toString();\n    }\n    else if (fs.existsSync(osReleaseFile)) {\n        contents = fs.readFileSync(osReleaseFile).toString();\n    }\n    return contents;\n}\nexports._readLinuxVersionFile = _readLinuxVersionFile;\n//# sourceMappingURL=manifest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst pm = require(\"./proxy\");\nlet tunnel;\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    let proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return new Promise(async (resolve, reject) => {\n            let output = Buffer.alloc(0);\n            this.message.on('data', (chunk) => {\n                output = Buffer.concat([output, chunk]);\n            });\n            this.message.on('end', () => {\n                resolve(output.toString());\n            });\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    let parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n    }\n    get(requestUrl, additionalHeaders) {\n        return this.request('GET', requestUrl, null, additionalHeaders || {});\n    }\n    del(requestUrl, additionalHeaders) {\n        return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return this.request('POST', requestUrl, data, additionalHeaders || {});\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return this.request('PUT', requestUrl, data, additionalHeaders || {});\n    }\n    head(requestUrl, additionalHeaders) {\n        return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return this.request(verb, requestUrl, stream, additionalHeaders);\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    async getJson(requestUrl, additionalHeaders = {}) {\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        let res = await this.get(requestUrl, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async postJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.post(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async putJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.put(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async patchJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.patch(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    async request(verb, requestUrl, data, headers) {\n        if (this._disposed) {\n            throw new Error('Client has already been disposed.');\n        }\n        let parsedUrl = new URL(requestUrl);\n        let info = this._prepareRequest(verb, parsedUrl, headers);\n        // Only perform retries on reads since writes may not be idempotent.\n        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1\n            ? this._maxRetries + 1\n            : 1;\n        let numTries = 0;\n        let response;\n        while (numTries < maxTries) {\n            response = await this.requestRaw(info, data);\n            // Check if it's an authentication challenge\n            if (response &&\n                response.message &&\n                response.message.statusCode === HttpCodes.Unauthorized) {\n                let authenticationHandler;\n                for (let i = 0; i < this.handlers.length; i++) {\n                    if (this.handlers[i].canHandleAuthentication(response)) {\n                        authenticationHandler = this.handlers[i];\n                        break;\n                    }\n                }\n                if (authenticationHandler) {\n                    return authenticationHandler.handleAuthentication(this, info, data);\n                }\n                else {\n                    // We have received an unauthorized response but have no handlers to handle it.\n                    // Let the response return to the caller.\n                    return response;\n                }\n            }\n            let redirectsRemaining = this._maxRedirects;\n            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&\n                this._allowRedirects &&\n                redirectsRemaining > 0) {\n                const redirectUrl = response.message.headers['location'];\n                if (!redirectUrl) {\n                    // if there's no location to redirect to, we won't\n                    break;\n                }\n                let parsedRedirectUrl = new URL(redirectUrl);\n                if (parsedUrl.protocol == 'https:' &&\n                    parsedUrl.protocol != parsedRedirectUrl.protocol &&\n                    !this._allowRedirectDowngrade) {\n                    throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                }\n                // we need to finish reading the response before reassigning response\n                // which will leak the open socket.\n                await response.readBody();\n                // strip authorization header if redirected to a different hostname\n                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                    for (let header in headers) {\n                        // header names are case insensitive\n                        if (header.toLowerCase() === 'authorization') {\n                            delete headers[header];\n                        }\n                    }\n                }\n                // let's make the request with the new redirectUrl\n                info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                response = await this.requestRaw(info, data);\n                redirectsRemaining--;\n            }\n            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {\n                // If not a retry code, return immediately instead of retrying\n                return response;\n            }\n            numTries += 1;\n            if (numTries < maxTries) {\n                await response.readBody();\n                await this._performExponentialBackoff(numTries);\n            }\n        }\n        return response;\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return new Promise((resolve, reject) => {\n            let callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                resolve(res);\n            };\n            this.requestRawWithCallback(info, data, callbackForResult);\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        let socket;\n        if (typeof data === 'string') {\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        let handleResult = (err, res) => {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        };\n        let req = info.httpModule.request(info.options, (msg) => {\n            let res = new HttpClientResponse(msg);\n            handleResult(null, res);\n        });\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error('Request timeout: ' + info.options.path), null);\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err, null);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        let parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            this.handlers.forEach(handler => {\n                handler.prepareRequest(info.options);\n            });\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        let proxyUrl = pm.getProxyUrl(parsedUrl);\n        let useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (!!agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (!!this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        if (useProxy) {\n            // If using proxy, need tunnel\n            if (!tunnel) {\n                tunnel = require('tunnel');\n            }\n            const agentOptions = {\n                maxSockets: maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: {\n                    ...((proxyUrl.username || proxyUrl.password) && {\n                        proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                    }),\n                    host: proxyUrl.hostname,\n                    port: proxyUrl.port\n                }\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n        return new Promise(resolve => setTimeout(() => resolve(), ms));\n    }\n    static dateTimeDeserializer(key, value) {\n        if (typeof value === 'string') {\n            let a = new Date(value);\n            if (!isNaN(a.valueOf())) {\n                return a;\n            }\n        }\n        return value;\n    }\n    async _processResponse(res, options) {\n        return new Promise(async (resolve, reject) => {\n            const statusCode = res.message.statusCode;\n            const response = {\n                statusCode: statusCode,\n                result: null,\n                headers: {}\n            };\n            // not found leads to null obj returned\n            if (statusCode == HttpCodes.NotFound) {\n                resolve(response);\n            }\n            let obj;\n            let contents;\n            // get the result from the body\n            try {\n                contents = await res.readBody();\n                if (contents && contents.length > 0) {\n                    if (options && options.deserializeDates) {\n                        obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);\n                    }\n                    else {\n                        obj = JSON.parse(contents);\n                    }\n                    response.result = obj;\n                }\n                response.headers = res.message.headers;\n            }\n            catch (err) {\n                // Invalid resource (contents not json);  leaving result obj null\n            }\n            // note that 3xx redirects are handled by the http layer.\n            if (statusCode > 299) {\n                let msg;\n                // if exception/error in body, attempt to get better error\n                if (obj && obj.message) {\n                    msg = obj.message;\n                }\n                else if (contents && contents.length > 0) {\n                    // it may be the case that the exception is in the body message as string\n                    msg = contents;\n                }\n                else {\n                    msg = 'Failed request: (' + statusCode + ')';\n                }\n                let err = new HttpClientError(msg, statusCode);\n                err.result = response.result;\n                reject(err);\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n}\nexports.HttpClient = HttpClient;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryHelper = void 0;\nconst core = __importStar(require(\"@actions/core\"));\n/**\n * Internal class for retries\n */\nclass RetryHelper {\n    constructor(maxAttempts, minSeconds, maxSeconds) {\n        if (maxAttempts < 1) {\n            throw new Error('max attempts should be greater than or equal to 1');\n        }\n        this.maxAttempts = maxAttempts;\n        this.minSeconds = Math.floor(minSeconds);\n        this.maxSeconds = Math.floor(maxSeconds);\n        if (this.minSeconds > this.maxSeconds) {\n            throw new Error('min seconds should be less than or equal to max seconds');\n        }\n    }\n    execute(action, isRetryable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let attempt = 1;\n            while (attempt < this.maxAttempts) {\n                // Try\n                try {\n                    return yield action();\n                }\n                catch (err) {\n                    if (isRetryable && !isRetryable(err)) {\n                        throw err;\n                    }\n                    core.info(err.message);\n                }\n                // Sleep\n                const seconds = this.getSleepAmount();\n                core.info(`Waiting ${seconds} seconds before trying again`);\n                yield this.sleep(seconds);\n                attempt++;\n            }\n            // Last attempt\n            return yield action();\n        });\n    }\n    getSleepAmount() {\n        return (Math.floor(Math.random() * (this.maxSeconds - this.minSeconds + 1)) +\n            this.minSeconds);\n    }\n    sleep(seconds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n        });\n    }\n}\nexports.RetryHelper = RetryHelper;\n//# sourceMappingURL=retry-helper.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MatchKind = void 0;\n/**\n * Indicates whether a pattern matches a path\n */\nvar MatchKind;\n(function (MatchKind) {\n    /** Not matched */\n    MatchKind[MatchKind[\"None\"] = 0] = \"None\";\n    /** Matched if the path is a directory */\n    MatchKind[MatchKind[\"Directory\"] = 1] = \"Directory\";\n    /** Matched if the path is a regular file */\n    MatchKind[MatchKind[\"File\"] = 2] = \"File\";\n    /** Matched */\n    MatchKind[MatchKind[\"All\"] = 3] = \"All\";\n})(MatchKind = exports.MatchKind || (exports.MatchKind = {}));\n//# sourceMappingURL=internal-match-kind.js.map","module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Path = void 0;\nconst path = __importStar(require(\"path\"));\nconst pathHelper = __importStar(require(\"./internal-path-helper\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst IS_WINDOWS = process.platform === 'win32';\n/**\n * Helper class for parsing paths into segments\n */\nclass Path {\n    /**\n     * Constructs a Path\n     * @param itemPath Path or array of segments\n     */\n    constructor(itemPath) {\n        this.segments = [];\n        // String\n        if (typeof itemPath === 'string') {\n            assert_1.default(itemPath, `Parameter 'itemPath' must not be empty`);\n            // Normalize slashes and trim unnecessary trailing slash\n            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);\n            // Not rooted\n            if (!pathHelper.hasRoot(itemPath)) {\n                this.segments = itemPath.split(path.sep);\n            }\n            // Rooted\n            else {\n                // Add all segments, while not at the root\n                let remaining = itemPath;\n                let dir = pathHelper.dirname(remaining);\n                while (dir !== remaining) {\n                    // Add the segment\n                    const basename = path.basename(remaining);\n                    this.segments.unshift(basename);\n                    // Truncate the last segment\n                    remaining = dir;\n                    dir = pathHelper.dirname(remaining);\n                }\n                // Remainder is the root\n                this.segments.unshift(remaining);\n            }\n        }\n        // Array\n        else {\n            // Must not be empty\n            assert_1.default(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);\n            // Each segment\n            for (let i = 0; i < itemPath.length; i++) {\n                let segment = itemPath[i];\n                // Must not be empty\n                assert_1.default(segment, `Parameter 'itemPath' must not contain any empty segments`);\n                // Normalize slashes\n                segment = pathHelper.normalizeSeparators(itemPath[i]);\n                // Root segment\n                if (i === 0 && pathHelper.hasRoot(segment)) {\n                    segment = pathHelper.safeTrimTrailingSeparator(segment);\n                    assert_1.default(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);\n                    this.segments.push(segment);\n                }\n                // All other segments\n                else {\n                    // Must not contain slash\n                    assert_1.default(!segment.includes(path.sep), `Parameter 'itemPath' contains unexpected path separators`);\n                    this.segments.push(segment);\n                }\n            }\n        }\n    }\n    /**\n     * Converts the path to it's string representation\n     */\n    toString() {\n        // First segment\n        let result = this.segments[0];\n        // All others\n        let skipSlash = result.endsWith(path.sep) || (IS_WINDOWS && /^[A-Z]:$/i.test(result));\n        for (let i = 1; i < this.segments.length; i++) {\n            if (skipSlash) {\n                skipSlash = false;\n            }\n            else {\n                result += path.sep;\n            }\n            result += this.segments[i];\n        }\n        return result;\n    }\n}\nexports.Path = Path;\n//# sourceMappingURL=internal-path.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Pattern = void 0;\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst pathHelper = __importStar(require(\"./internal-path-helper\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst minimatch_1 = require(\"minimatch\");\nconst internal_match_kind_1 = require(\"./internal-match-kind\");\nconst internal_path_1 = require(\"./internal-path\");\nconst IS_WINDOWS = process.platform === 'win32';\nclass Pattern {\n    constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {\n        /**\n         * Indicates whether matches should be excluded from the result set\n         */\n        this.negate = false;\n        // Pattern overload\n        let pattern;\n        if (typeof patternOrNegate === 'string') {\n            pattern = patternOrNegate.trim();\n        }\n        // Segments overload\n        else {\n            // Convert to pattern\n            segments = segments || [];\n            assert_1.default(segments.length, `Parameter 'segments' must not empty`);\n            const root = Pattern.getLiteral(segments[0]);\n            assert_1.default(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);\n            pattern = new internal_path_1.Path(segments).toString().trim();\n            if (patternOrNegate) {\n                pattern = `!${pattern}`;\n            }\n        }\n        // Negate\n        while (pattern.startsWith('!')) {\n            this.negate = !this.negate;\n            pattern = pattern.substr(1).trim();\n        }\n        // Normalize slashes and ensures absolute root\n        pattern = Pattern.fixupPattern(pattern, homedir);\n        // Segments\n        this.segments = new internal_path_1.Path(pattern).segments;\n        // Trailing slash indicates the pattern should only match directories, not regular files\n        this.trailingSeparator = pathHelper\n            .normalizeSeparators(pattern)\n            .endsWith(path.sep);\n        pattern = pathHelper.safeTrimTrailingSeparator(pattern);\n        // Search path (literal path prior to the first glob segment)\n        let foundGlob = false;\n        const searchSegments = this.segments\n            .map(x => Pattern.getLiteral(x))\n            .filter(x => !foundGlob && !(foundGlob = x === ''));\n        this.searchPath = new internal_path_1.Path(searchSegments).toString();\n        // Root RegExp (required when determining partial match)\n        this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? 'i' : '');\n        this.isImplicitPattern = isImplicitPattern;\n        // Create minimatch\n        const minimatchOptions = {\n            dot: true,\n            nobrace: true,\n            nocase: IS_WINDOWS,\n            nocomment: true,\n            noext: true,\n            nonegate: true\n        };\n        pattern = IS_WINDOWS ? pattern.replace(/\\\\/g, '/') : pattern;\n        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);\n    }\n    /**\n     * Matches the pattern against the specified path\n     */\n    match(itemPath) {\n        // Last segment is globstar?\n        if (this.segments[this.segments.length - 1] === '**') {\n            // Normalize slashes\n            itemPath = pathHelper.normalizeSeparators(itemPath);\n            // Append a trailing slash. Otherwise Minimatch will not match the directory immediately\n            // preceding the globstar. For example, given the pattern `/foo/**`, Minimatch returns\n            // false for `/foo` but returns true for `/foo/`. Append a trailing slash to handle that quirk.\n            if (!itemPath.endsWith(path.sep) && this.isImplicitPattern === false) {\n                // Note, this is safe because the constructor ensures the pattern has an absolute root.\n                // For example, formats like C: and C:foo on Windows are resolved to an absolute root.\n                itemPath = `${itemPath}${path.sep}`;\n            }\n        }\n        else {\n            // Normalize slashes and trim unnecessary trailing slash\n            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);\n        }\n        // Match\n        if (this.minimatch.match(itemPath)) {\n            return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;\n        }\n        return internal_match_kind_1.MatchKind.None;\n    }\n    /**\n     * Indicates whether the pattern may match descendants of the specified path\n     */\n    partialMatch(itemPath) {\n        // Normalize slashes and trim unnecessary trailing slash\n        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);\n        // matchOne does not handle root path correctly\n        if (pathHelper.dirname(itemPath) === itemPath) {\n            return this.rootRegExp.test(itemPath);\n        }\n        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\\\+/ : /\\/+/), this.minimatch.set[0], true);\n    }\n    /**\n     * Escapes glob patterns within a path\n     */\n    static globEscape(s) {\n        return (IS_WINDOWS ? s : s.replace(/\\\\/g, '\\\\\\\\')) // escape '\\' on Linux/macOS\n            .replace(/(\\[)(?=[^/]+\\])/g, '[[]') // escape '[' when ']' follows within the path segment\n            .replace(/\\?/g, '[?]') // escape '?'\n            .replace(/\\*/g, '[*]'); // escape '*'\n    }\n    /**\n     * Normalizes slashes and ensures absolute root\n     */\n    static fixupPattern(pattern, homedir) {\n        // Empty\n        assert_1.default(pattern, 'pattern cannot be empty');\n        // Must not contain `.` segment, unless first segment\n        // Must not contain `..` segment\n        const literalSegments = new internal_path_1.Path(pattern).segments.map(x => Pattern.getLiteral(x));\n        assert_1.default(literalSegments.every((x, i) => (x !== '.' || i === 0) && x !== '..'), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);\n        // Must not contain globs in root, e.g. Windows UNC path \\\\foo\\b*r\n        assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);\n        // Normalize slashes\n        pattern = pathHelper.normalizeSeparators(pattern);\n        // Replace leading `.` segment\n        if (pattern === '.' || pattern.startsWith(`.${path.sep}`)) {\n            pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1);\n        }\n        // Replace leading `~` segment\n        else if (pattern === '~' || pattern.startsWith(`~${path.sep}`)) {\n            homedir = homedir || os.homedir();\n            assert_1.default(homedir, 'Unable to determine HOME directory');\n            assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);\n            pattern = Pattern.globEscape(homedir) + pattern.substr(1);\n        }\n        // Replace relative drive root, e.g. pattern is C: or C:foo\n        else if (IS_WINDOWS &&\n            (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\\\]/i))) {\n            let root = pathHelper.ensureAbsoluteRoot('C:\\\\dummy-root', pattern.substr(0, 2));\n            if (pattern.length > 2 && !root.endsWith('\\\\')) {\n                root += '\\\\';\n            }\n            pattern = Pattern.globEscape(root) + pattern.substr(2);\n        }\n        // Replace relative root, e.g. pattern is \\ or \\foo\n        else if (IS_WINDOWS && (pattern === '\\\\' || pattern.match(/^\\\\[^\\\\]/))) {\n            let root = pathHelper.ensureAbsoluteRoot('C:\\\\dummy-root', '\\\\');\n            if (!root.endsWith('\\\\')) {\n                root += '\\\\';\n            }\n            pattern = Pattern.globEscape(root) + pattern.substr(1);\n        }\n        // Otherwise ensure absolute root\n        else {\n            pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);\n        }\n        return pathHelper.normalizeSeparators(pattern);\n    }\n    /**\n     * Attempts to unescape a pattern segment to create a literal path segment.\n     * Otherwise returns empty string.\n     */\n    static getLiteral(segment) {\n        let literal = '';\n        for (let i = 0; i < segment.length; i++) {\n            const c = segment[i];\n            // Escape\n            if (c === '\\\\' && !IS_WINDOWS && i + 1 < segment.length) {\n                literal += segment[++i];\n                continue;\n            }\n            // Wildcard\n            else if (c === '*' || c === '?') {\n                return '';\n            }\n            // Character set\n            else if (c === '[' && i + 1 < segment.length) {\n                let set = '';\n                let closed = -1;\n                for (let i2 = i + 1; i2 < segment.length; i2++) {\n                    const c2 = segment[i2];\n                    // Escape\n                    if (c2 === '\\\\' && !IS_WINDOWS && i2 + 1 < segment.length) {\n                        set += segment[++i2];\n                        continue;\n                    }\n                    // Closed\n                    else if (c2 === ']') {\n                        closed = i2;\n                        break;\n                    }\n                    // Otherwise\n                    else {\n                        set += c2;\n                    }\n                }\n                // Closed?\n                if (closed >= 0) {\n                    // Cannot convert\n                    if (set.length > 1) {\n                        return '';\n                    }\n                    // Convert to literal\n                    if (set) {\n                        literal += set;\n                        i = closed;\n                        continue;\n                    }\n                }\n                // Otherwise fall thru\n            }\n            // Append\n            literal += c;\n        }\n        return literal;\n    }\n    /**\n     * Escapes regexp special characters\n     * https://javascript.info/regexp-escaping\n     */\n    static regExpEscape(s) {\n        return s.replace(/[[\\\\^$.|?*+()]/g, '\\\\$&');\n    }\n}\nexports.Pattern = Pattern;\n//# sourceMappingURL=internal-pattern.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SearchState = void 0;\nclass SearchState {\n    constructor(path, level) {\n        this.path = path;\n        this.level = level;\n    }\n}\nexports.SearchState = SearchState;\n//# sourceMappingURL=internal-search-state.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGlobber = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst fs = __importStar(require(\"fs\"));\nconst globOptionsHelper = __importStar(require(\"./internal-glob-options-helper\"));\nconst path = __importStar(require(\"path\"));\nconst patternHelper = __importStar(require(\"./internal-pattern-helper\"));\nconst internal_match_kind_1 = require(\"./internal-match-kind\");\nconst internal_pattern_1 = require(\"./internal-pattern\");\nconst internal_search_state_1 = require(\"./internal-search-state\");\nconst IS_WINDOWS = process.platform === 'win32';\nclass DefaultGlobber {\n    constructor(options) {\n        this.patterns = [];\n        this.searchPaths = [];\n        this.options = globOptionsHelper.getOptions(options);\n    }\n    getSearchPaths() {\n        // Return a copy\n        return this.searchPaths.slice();\n    }\n    glob() {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = [];\n            try {\n                for (var _b = __asyncValues(this.globGenerator()), _c; _c = yield _b.next(), !_c.done;) {\n                    const itemPath = _c.value;\n                    result.push(itemPath);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return result;\n        });\n    }\n    globGenerator() {\n        return __asyncGenerator(this, arguments, function* globGenerator_1() {\n            // Fill in defaults options\n            const options = globOptionsHelper.getOptions(this.options);\n            // Implicit descendants?\n            const patterns = [];\n            for (const pattern of this.patterns) {\n                patterns.push(pattern);\n                if (options.implicitDescendants &&\n                    (pattern.trailingSeparator ||\n                        pattern.segments[pattern.segments.length - 1] !== '**')) {\n                    patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat('**')));\n                }\n            }\n            // Push the search paths\n            const stack = [];\n            for (const searchPath of patternHelper.getSearchPaths(patterns)) {\n                core.debug(`Search path '${searchPath}'`);\n                // Exists?\n                try {\n                    // Intentionally using lstat. Detection for broken symlink\n                    // will be performed later (if following symlinks).\n                    yield __await(fs.promises.lstat(searchPath));\n                }\n                catch (err) {\n                    if (err.code === 'ENOENT') {\n                        continue;\n                    }\n                    throw err;\n                }\n                stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));\n            }\n            // Search\n            const traversalChain = []; // used to detect cycles\n            while (stack.length) {\n                // Pop\n                const item = stack.pop();\n                // Match?\n                const match = patternHelper.match(patterns, item.path);\n                const partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);\n                if (!match && !partialMatch) {\n                    continue;\n                }\n                // Stat\n                const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain)\n                // Broken symlink, or symlink cycle detected, or no longer exists\n                );\n                // Broken symlink, or symlink cycle detected, or no longer exists\n                if (!stats) {\n                    continue;\n                }\n                // Directory\n                if (stats.isDirectory()) {\n                    // Matched\n                    if (match & internal_match_kind_1.MatchKind.Directory) {\n                        yield yield __await(item.path);\n                    }\n                    // Descend?\n                    else if (!partialMatch) {\n                        continue;\n                    }\n                    // Push the child items in reverse\n                    const childLevel = item.level + 1;\n                    const childItems = (yield __await(fs.promises.readdir(item.path))).map(x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel));\n                    stack.push(...childItems.reverse());\n                }\n                // File\n                else if (match & internal_match_kind_1.MatchKind.File) {\n                    yield yield __await(item.path);\n                }\n            }\n        });\n    }\n    /**\n     * Constructs a DefaultGlobber\n     */\n    static create(patterns, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = new DefaultGlobber(options);\n            if (IS_WINDOWS) {\n                patterns = patterns.replace(/\\r\\n/g, '\\n');\n                patterns = patterns.replace(/\\r/g, '\\n');\n            }\n            const lines = patterns.split('\\n').map(x => x.trim());\n            for (const line of lines) {\n                // Empty or comment\n                if (!line || line.startsWith('#')) {\n                    continue;\n                }\n                // Pattern\n                else {\n                    result.patterns.push(new internal_pattern_1.Pattern(line));\n                }\n            }\n            result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));\n            return result;\n        });\n    }\n    static stat(item, options, traversalChain) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Note:\n            // `stat` returns info about the target of a symlink (or symlink chain)\n            // `lstat` returns info about a symlink itself\n            let stats;\n            if (options.followSymbolicLinks) {\n                try {\n                    // Use `stat` (following symlinks)\n                    stats = yield fs.promises.stat(item.path);\n                }\n                catch (err) {\n                    if (err.code === 'ENOENT') {\n                        if (options.omitBrokenSymbolicLinks) {\n                            core.debug(`Broken symlink '${item.path}'`);\n                            return undefined;\n                        }\n                        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);\n                    }\n                    throw err;\n                }\n            }\n            else {\n                // Use `lstat` (not following symlinks)\n                stats = yield fs.promises.lstat(item.path);\n            }\n            // Note, isDirectory() returns false for the lstat of a symlink\n            if (stats.isDirectory() && options.followSymbolicLinks) {\n                // Get the realpath\n                const realPath = yield fs.promises.realpath(item.path);\n                // Fixup the traversal chain to match the item level\n                while (traversalChain.length >= item.level) {\n                    traversalChain.pop();\n                }\n                // Test for a cycle\n                if (traversalChain.some((x) => x === realPath)) {\n                    core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);\n                    return undefined;\n                }\n                // Update the traversal chain\n                traversalChain.push(realPath);\n            }\n            return stats;\n        });\n    }\n}\nexports.DefaultGlobber = DefaultGlobber;\n//# sourceMappingURL=internal-globber.js.map","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ManifestFilename = exports.TarFilename = exports.SystemTarPathOnWindows = exports.GnuTarPathOnWindows = exports.SocketTimeout = exports.DefaultRetryDelay = exports.DefaultRetryAttempts = exports.ArchiveToolType = exports.CompressionMethod = exports.CacheFilename = void 0;\nvar CacheFilename;\n(function (CacheFilename) {\n    CacheFilename[\"Gzip\"] = \"cache.tgz\";\n    CacheFilename[\"Zstd\"] = \"cache.tzst\";\n})(CacheFilename || (exports.CacheFilename = CacheFilename = {}));\nvar CompressionMethod;\n(function (CompressionMethod) {\n    CompressionMethod[\"Gzip\"] = \"gzip\";\n    // Long range mode was added to zstd in v1.3.2.\n    // This enum is for earlier version of zstd that does not have --long support\n    CompressionMethod[\"ZstdWithoutLong\"] = \"zstd-without-long\";\n    CompressionMethod[\"Zstd\"] = \"zstd\";\n})(CompressionMethod || (exports.CompressionMethod = CompressionMethod = {}));\nvar ArchiveToolType;\n(function (ArchiveToolType) {\n    ArchiveToolType[\"GNU\"] = \"gnu\";\n    ArchiveToolType[\"BSD\"] = \"bsd\";\n})(ArchiveToolType || (exports.ArchiveToolType = ArchiveToolType = {}));\n// The default number of retry attempts.\nexports.DefaultRetryAttempts = 2;\n// The default delay in milliseconds between retry attempts.\nexports.DefaultRetryDelay = 5000;\n// Socket timeout in milliseconds during download.  If no traffic is received\n// over the socket during this period, the socket is destroyed and the download\n// is aborted.\nexports.SocketTimeout = 5000;\n// The default path of GNUtar on hosted Windows runners\nexports.GnuTarPathOnWindows = `${process.env['PROGRAMFILES']}\\\\Git\\\\usr\\\\bin\\\\tar.exe`;\n// The default path of BSDtar on hosted Windows runners\nexports.SystemTarPathOnWindows = `${process.env['SYSTEMDRIVE']}\\\\Windows\\\\System32\\\\tar.exe`;\nexports.TarFilename = 'cache.tar';\nexports.ManifestFilename = 'manifest.txt';\n//# sourceMappingURL=constants.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-rest-pipeline\");\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n//# sourceMappingURL=AbortError.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a, _b, _c, _d;\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nexport const isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker = typeof self === \"object\" &&\n    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === \"function\" &&\n    (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"DedicatedWorkerGlobalScope\" ||\n        ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"ServiceWorkerGlobalScope\" ||\n        ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === \"SharedWorkerGlobalScope\");\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno = typeof Deno !== \"undefined\" &&\n    typeof Deno.version !== \"undefined\" &&\n    typeof Deno.version.deno !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike = typeof globalThis.process !== \"undefined\" &&\n    Boolean(globalThis.process.version) &&\n    Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nexport const isNode = isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = isNodeLike && !isBun && !isDeno;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nexport const isReactNative = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === \"ReactNative\";\n//# sourceMappingURL=checkEnvironment.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObject } from \"@azure/core-util\";\nconst RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"WWW-Authenticate\",\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nexport class Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [], } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || isObject(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null || value === \"\") {\n            return value;\n        }\n        const url = new URL(value);\n        if (!url.search) {\n            return value;\n        }\n        for (const [key] of url.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url.searchParams.set(key, RedactedString);\n            }\n        }\n        return url.toString();\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n}\n//# sourceMappingURL=sanitizer.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const SDK_VERSION = \"1.17.0\";\nexport const DEFAULT_RETRY_POLICY_COUNT = 3;\n//# sourceMappingURL=constants.js.map","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Agent = void 0;\nconst net = __importStar(require(\"net\"));\nconst http = __importStar(require(\"http\"));\nconst https_1 = require(\"https\");\n__exportStar(require(\"./helpers\"), exports);\nconst INTERNAL = Symbol('AgentBaseInternalState');\nclass Agent extends http.Agent {\n    constructor(opts) {\n        super(opts);\n        this[INTERNAL] = {};\n    }\n    /**\n     * Determine whether this is an `http` or `https` request.\n     */\n    isSecureEndpoint(options) {\n        if (options) {\n            // First check the `secureEndpoint` property explicitly, since this\n            // means that a parent `Agent` is \"passing through\" to this instance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof options.secureEndpoint === 'boolean') {\n                return options.secureEndpoint;\n            }\n            // If no explicit `secure` endpoint, check if `protocol` property is\n            // set. This will usually be the case since using a full string URL\n            // or `URL` instance should be the most common usage.\n            if (typeof options.protocol === 'string') {\n                return options.protocol === 'https:';\n            }\n        }\n        // Finally, if no `protocol` property was set, then fall back to\n        // checking the stack trace of the current call stack, and try to\n        // detect the \"https\" module.\n        const { stack } = new Error();\n        if (typeof stack !== 'string')\n            return false;\n        return stack\n            .split('\\n')\n            .some((l) => l.indexOf('(https.js:') !== -1 ||\n            l.indexOf('node:https:') !== -1);\n    }\n    // In order to support async signatures in `connect()` and Node's native\n    // connection pooling in `http.Agent`, the array of sockets for each origin\n    // has to be updated synchronously. This is so the length of the array is\n    // accurate when `addRequest()` is next called. We achieve this by creating a\n    // fake socket and adding it to `sockets[origin]` and incrementing\n    // `totalSocketCount`.\n    incrementSockets(name) {\n        // If `maxSockets` and `maxTotalSockets` are both Infinity then there is no\n        // need to create a fake socket because Node.js native connection pooling\n        // will never be invoked.\n        if (this.maxSockets === Infinity && this.maxTotalSockets === Infinity) {\n            return null;\n        }\n        // All instances of `sockets` are expected TypeScript errors. The\n        // alternative is to add it as a private property of this class but that\n        // will break TypeScript subclassing.\n        if (!this.sockets[name]) {\n            // @ts-expect-error `sockets` is readonly in `@types/node`\n            this.sockets[name] = [];\n        }\n        const fakeSocket = new net.Socket({ writable: false });\n        this.sockets[name].push(fakeSocket);\n        // @ts-expect-error `totalSocketCount` isn't defined in `@types/node`\n        this.totalSocketCount++;\n        return fakeSocket;\n    }\n    decrementSockets(name, socket) {\n        if (!this.sockets[name] || socket === null) {\n            return;\n        }\n        const sockets = this.sockets[name];\n        const index = sockets.indexOf(socket);\n        if (index !== -1) {\n            sockets.splice(index, 1);\n            // @ts-expect-error  `totalSocketCount` isn't defined in `@types/node`\n            this.totalSocketCount--;\n            if (sockets.length === 0) {\n                // @ts-expect-error `sockets` is readonly in `@types/node`\n                delete this.sockets[name];\n            }\n        }\n    }\n    // In order to properly update the socket pool, we need to call `getName()` on\n    // the core `https.Agent` if it is a secureEndpoint.\n    getName(options) {\n        const secureEndpoint = typeof options.secureEndpoint === 'boolean'\n            ? options.secureEndpoint\n            : this.isSecureEndpoint(options);\n        if (secureEndpoint) {\n            // @ts-expect-error `getName()` isn't defined in `@types/node`\n            return https_1.Agent.prototype.getName.call(this, options);\n        }\n        // @ts-expect-error `getName()` isn't defined in `@types/node`\n        return super.getName(options);\n    }\n    createSocket(req, options, cb) {\n        const connectOpts = {\n            ...options,\n            secureEndpoint: this.isSecureEndpoint(options),\n        };\n        const name = this.getName(connectOpts);\n        const fakeSocket = this.incrementSockets(name);\n        Promise.resolve()\n            .then(() => this.connect(req, connectOpts))\n            .then((socket) => {\n            this.decrementSockets(name, fakeSocket);\n            if (socket instanceof http.Agent) {\n                // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n                return socket.addRequest(req, connectOpts);\n            }\n            this[INTERNAL].currentSocket = socket;\n            // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n            super.createSocket(req, options, cb);\n        }, (err) => {\n            this.decrementSockets(name, fakeSocket);\n            cb(err);\n        });\n    }\n    createConnection() {\n        const socket = this[INTERNAL].currentSocket;\n        this[INTERNAL].currentSocket = undefined;\n        if (!socket) {\n            throw new Error('No socket was returned in the `connect()` function');\n        }\n        return socket;\n    }\n    get defaultPort() {\n        return (this[INTERNAL].defaultPort ??\n            (this.protocol === 'https:' ? 443 : 80));\n    }\n    set defaultPort(v) {\n        if (this[INTERNAL]) {\n            this[INTERNAL].defaultPort = v;\n        }\n    }\n    get protocol() {\n        return (this[INTERNAL].protocol ??\n            (this.isSecureEndpoint() ? 'https:' : 'http:'));\n    }\n    set protocol(v) {\n        if (this[INTERNAL]) {\n            this[INTERNAL].protocol = v;\n        }\n    }\n}\nexports.Agent = Agent;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.state = void 0;\n/**\n * @internal\n *\n * Holds the singleton instrumenter, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    instrumenterImplementation: undefined,\n};\n//# sourceMappingURL=state-cjs.cjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\nimport { state as cjsState } from \"../commonjs/state.js\";\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */\nexport const state = cjsState;\n//# sourceMappingURL=state.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { inspect } from \"node:util\";\nexport const custom = inspect.custom;\n//# sourceMappingURL=inspect.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n//# sourceMappingURL=interfaces.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.state = void 0;\n/**\n * Holds the singleton operationRequestMap, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    operationRequestMap: new WeakMap(),\n};\n//# sourceMappingURL=state-cjs.cjs.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\nimport { state as cjsState } from \"../commonjs/state.js\";\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */\nexport const state = cjsState;\n//# sourceMappingURL=state.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-client\");\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createDisableKeepAlivePolicy, pipelineContainsDisableKeepAlivePolicy, } from \"./policies/disableKeepAlivePolicy.js\";\nimport { redirectPolicyName } from \"@azure/core-rest-pipeline\";\nimport { ServiceClient, } from \"@azure/core-client\";\nimport { toCompatResponse } from \"./response.js\";\n/**\n * Client to provide compatability between core V1 & V2.\n */\nexport class ExtendedServiceClient extends ServiceClient {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false &&\n            !pipelineContainsDisableKeepAlivePolicy(this.pipeline)) {\n            this.pipeline.addPolicy(createDisableKeepAlivePolicy());\n        }\n        if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {\n            this.pipeline.removePolicy({\n                name: redirectPolicyName,\n            });\n        }\n    }\n    /**\n     * Compatible send operation request function.\n     *\n     * @param operationArguments - Operation arguments\n     * @param operationSpec - Operation Spec\n     * @returns\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        var _a;\n        const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n        let lastResponse;\n        function onResponse(rawResponse, flatResponse, error) {\n            lastResponse = rawResponse;\n            if (userProvidedCallBack) {\n                userProvidedCallBack(rawResponse, flatResponse, error);\n            }\n        }\n        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });\n        const result = await super.sendOperationRequest(operationArguments, operationSpec);\n        if (lastResponse) {\n            Object.defineProperty(result, \"_response\", {\n                value: toCompatResponse(lastResponse),\n            });\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=extendedClient.js.map","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n//# sourceMappingURL=xml.common.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\n/**\n * The `@azure/logger` configuration for this package.\n */\nexport const logger = createClientLogger(\"storage-blob\");\n//# sourceMappingURL=log.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    constructor(parentSignals) {\n        this._signal = new AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            // eslint-disable-next-line prefer-rest-params\n            parentSignals = arguments;\n        }\n        for (const parentSignal of parentSignals) {\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            }\n            else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", () => {\n                    this.abort();\n                });\n            }\n        }\n    }\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     */\n    get signal() {\n        return this._signal;\n    }\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */\n    abort() {\n        abortSignal(this._signal);\n    }\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */\n    static timeout(ms) {\n        const signal = new AbortSignal();\n        const timer = setTimeout(abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    }\n}\n//# sourceMappingURL=AbortController.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The base class from which all request policies derive.\n */\nexport class BaseRequestPolicy {\n    /**\n     * The main method to implement that manipulates a request/response.\n     */\n    constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    _nextPolicy, \n    /**\n     * The options that can be passed to a given request policy.\n     */\n    _options) {\n        this._nextPolicy = _nextPolicy;\n        this._options = _options;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel - The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    shouldLog(logLevel) {\n        return this._options.shouldLog(logLevel);\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n    log(logLevel, message) {\n        this._options.log(logLevel, message);\n    }\n}\n//# sourceMappingURL=RequestPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport const SDK_VERSION = \"12.24.0\";\nexport const SERVICE_VERSION = \"2024-08-04\";\nexport const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB\nexport const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB\nexport const BLOCK_BLOB_MAX_BLOCKS = 50000;\nexport const DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB\nexport const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB\nexport const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;\nexport const REQUEST_TIMEOUT = 100 * 1000; // In ms\n/**\n * The OAuth scope to use with Azure Storage.\n */\nexport const StorageOAuthScopes = \"https://storage.azure.com/.default\";\nexport const URLConstants = {\n    Parameters: {\n        FORCE_BROWSER_NO_CACHE: \"_\",\n        SIGNATURE: \"sig\",\n        SNAPSHOT: \"snapshot\",\n        VERSIONID: \"versionid\",\n        TIMEOUT: \"timeout\",\n    },\n};\nexport const HTTPURLConnection = {\n    HTTP_ACCEPTED: 202,\n    HTTP_CONFLICT: 409,\n    HTTP_NOT_FOUND: 404,\n    HTTP_PRECON_FAILED: 412,\n    HTTP_RANGE_NOT_SATISFIABLE: 416,\n};\nexport const HeaderConstants = {\n    AUTHORIZATION: \"Authorization\",\n    AUTHORIZATION_SCHEME: \"Bearer\",\n    CONTENT_ENCODING: \"Content-Encoding\",\n    CONTENT_ID: \"Content-ID\",\n    CONTENT_LANGUAGE: \"Content-Language\",\n    CONTENT_LENGTH: \"Content-Length\",\n    CONTENT_MD5: \"Content-Md5\",\n    CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n    CONTENT_TYPE: \"Content-Type\",\n    COOKIE: \"Cookie\",\n    DATE: \"date\",\n    IF_MATCH: \"if-match\",\n    IF_MODIFIED_SINCE: \"if-modified-since\",\n    IF_NONE_MATCH: \"if-none-match\",\n    IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n    PREFIX_FOR_STORAGE: \"x-ms-\",\n    RANGE: \"Range\",\n    USER_AGENT: \"User-Agent\",\n    X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n    X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n    X_MS_DATE: \"x-ms-date\",\n    X_MS_ERROR_CODE: \"x-ms-error-code\",\n    X_MS_VERSION: \"x-ms-version\",\n    X_MS_CopySourceErrorCode: \"x-ms-copy-source-error-code\",\n};\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\nexport const SIZE_1_MB = 1 * 1024 * 1024;\nexport const BATCH_MAX_REQUEST = 256;\nexport const BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;\nexport const HTTP_LINE_ENDING = \"\\r\\n\";\nexport const HTTP_VERSION_1_1 = \"HTTP/1.1\";\nexport const EncryptionAlgorithmAES25 = \"AES256\";\nexport const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\nexport const StorageBlobLoggingAllowedHeaderNames = [\n    \"Access-Control-Allow-Origin\",\n    \"Cache-Control\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"Request-Id\",\n    \"traceparent\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"x-ms-client-request-id\",\n    \"x-ms-date\",\n    \"x-ms-error-code\",\n    \"x-ms-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-version\",\n    \"Accept-Ranges\",\n    \"Content-Disposition\",\n    \"Content-Encoding\",\n    \"Content-Language\",\n    \"Content-MD5\",\n    \"Content-Range\",\n    \"ETag\",\n    \"Last-Modified\",\n    \"Server\",\n    \"Vary\",\n    \"x-ms-content-crc64\",\n    \"x-ms-copy-action\",\n    \"x-ms-copy-completion-time\",\n    \"x-ms-copy-id\",\n    \"x-ms-copy-progress\",\n    \"x-ms-copy-status\",\n    \"x-ms-has-immutability-policy\",\n    \"x-ms-has-legal-hold\",\n    \"x-ms-lease-state\",\n    \"x-ms-lease-status\",\n    \"x-ms-range\",\n    \"x-ms-request-server-encrypted\",\n    \"x-ms-server-encrypted\",\n    \"x-ms-snapshot\",\n    \"x-ms-source-range\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"x-ms-access-tier\",\n    \"x-ms-access-tier-change-time\",\n    \"x-ms-access-tier-inferred\",\n    \"x-ms-account-kind\",\n    \"x-ms-archive-status\",\n    \"x-ms-blob-append-offset\",\n    \"x-ms-blob-cache-control\",\n    \"x-ms-blob-committed-block-count\",\n    \"x-ms-blob-condition-appendpos\",\n    \"x-ms-blob-condition-maxsize\",\n    \"x-ms-blob-content-disposition\",\n    \"x-ms-blob-content-encoding\",\n    \"x-ms-blob-content-language\",\n    \"x-ms-blob-content-length\",\n    \"x-ms-blob-content-md5\",\n    \"x-ms-blob-content-type\",\n    \"x-ms-blob-public-access\",\n    \"x-ms-blob-sequence-number\",\n    \"x-ms-blob-type\",\n    \"x-ms-copy-destination-snapshot\",\n    \"x-ms-creation-time\",\n    \"x-ms-default-encryption-scope\",\n    \"x-ms-delete-snapshots\",\n    \"x-ms-delete-type-permanent\",\n    \"x-ms-deny-encryption-scope-override\",\n    \"x-ms-encryption-algorithm\",\n    \"x-ms-if-sequence-number-eq\",\n    \"x-ms-if-sequence-number-le\",\n    \"x-ms-if-sequence-number-lt\",\n    \"x-ms-incremental-copy\",\n    \"x-ms-lease-action\",\n    \"x-ms-lease-break-period\",\n    \"x-ms-lease-duration\",\n    \"x-ms-lease-id\",\n    \"x-ms-lease-time\",\n    \"x-ms-page-write\",\n    \"x-ms-proposed-lease-id\",\n    \"x-ms-range-get-content-md5\",\n    \"x-ms-rehydrate-priority\",\n    \"x-ms-sequence-number-action\",\n    \"x-ms-sku-name\",\n    \"x-ms-source-content-md5\",\n    \"x-ms-source-if-match\",\n    \"x-ms-source-if-modified-since\",\n    \"x-ms-source-if-none-match\",\n    \"x-ms-source-if-unmodified-since\",\n    \"x-ms-tag-count\",\n    \"x-ms-encryption-key-sha256\",\n    \"x-ms-copy-source-error-code\",\n    \"x-ms-copy-source-status-code\",\n    \"x-ms-if-tags\",\n    \"x-ms-source-if-tags\",\n];\nexport const StorageBlobLoggingAllowedQueryParameters = [\n    \"comp\",\n    \"maxresults\",\n    \"rscc\",\n    \"rscd\",\n    \"rsce\",\n    \"rscl\",\n    \"rsct\",\n    \"se\",\n    \"si\",\n    \"sip\",\n    \"sp\",\n    \"spr\",\n    \"sr\",\n    \"srt\",\n    \"ss\",\n    \"st\",\n    \"sv\",\n    \"include\",\n    \"marker\",\n    \"prefix\",\n    \"copyid\",\n    \"restype\",\n    \"blockid\",\n    \"blocklisttype\",\n    \"delimiter\",\n    \"prevsnapshot\",\n    \"ske\",\n    \"skoid\",\n    \"sks\",\n    \"skt\",\n    \"sktid\",\n    \"skv\",\n    \"snapshot\",\n];\nexport const BlobUsesCustomerSpecifiedEncryptionMsg = \"BlobUsesCustomerSpecifiedEncryption\";\nexport const BlobDoesNotUseCustomerSpecifiedEncryption = \"BlobDoesNotUseCustomerSpecifiedEncryption\";\n/// List of ports used for path style addressing.\n/// Path style addressing means that storage account is put in URI's Path segment in instead of in host.\nexport const PathStylePorts = [\n    \"10000\",\n    \"10001\",\n    \"10002\",\n    \"10003\",\n    \"10004\",\n    \"10100\",\n    \"10101\",\n    \"10102\",\n    \"10103\",\n    \"10104\",\n    \"11000\",\n    \"11001\",\n    \"11002\",\n    \"11003\",\n    \"11004\",\n    \"11100\",\n    \"11101\",\n    \"11102\",\n    \"11103\",\n    \"11104\",\n];\n//# sourceMappingURL=constants.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"./RequestPolicy\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions) {\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n        },\n    };\n}\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of RetryPolicy.\n     *\n     * @param nextPolicy -\n     * @param options -\n     * @param retryOptions -\n     */\n    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n        super(nextPolicy, options);\n        // Initialize retry options\n        this.retryOptions = {\n            retryPolicyType: retryOptions.retryPolicyType\n                ? retryOptions.retryPolicyType\n                : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1\n                ? Math.floor(retryOptions.maxTries)\n                : DEFAULT_RETRY_OPTIONS.maxTries,\n            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n                ? retryOptions.tryTimeoutInMs\n                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs\n                    ? retryOptions.maxRetryDelayInMs\n                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)\n                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n            secondaryHost: retryOptions.secondaryHost\n                ? retryOptions.secondaryHost\n                : DEFAULT_RETRY_OPTIONS.secondaryHost,\n        };\n    }\n    /**\n     * Sends request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        return this.attemptSendRequest(request, false, 1);\n    }\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n    async attemptSendRequest(request, secondaryHas404, attempt) {\n        const newRequest = request.clone();\n        const isPrimaryRetry = secondaryHas404 ||\n            !this.retryOptions.secondaryHost ||\n            !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n            attempt % 2 === 1;\n        if (!isPrimaryRetry) {\n            newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n        }\n        // Set the server-side timeout query parameter \"timeout=[seconds]\"\n        if (this.retryOptions.tryTimeoutInMs) {\n            newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n        }\n        let response;\n        try {\n            logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n            response = await this._nextPolicy.sendRequest(newRequest);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                return response;\n            }\n            secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n        }\n        catch (err) {\n            logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n                throw err;\n            }\n        }\n        await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n        return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n    }\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n    shouldRetry(isPrimaryRetry, attempt, response, err) {\n        if (attempt >= this.retryOptions.maxTries) {\n            logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n                .maxTries}, no further try.`);\n            return false;\n        }\n        // Handle network failures, you may need to customize the list when you implement\n        // your own http client\n        const retriableErrors = [\n            \"ETIMEDOUT\",\n            \"ESOCKETTIMEDOUT\",\n            \"ECONNREFUSED\",\n            \"ECONNRESET\",\n            \"ENOENT\",\n            \"ENOTFOUND\",\n            \"TIMEOUT\",\n            \"EPIPE\",\n            \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n        ];\n        if (err) {\n            for (const retriableError of retriableErrors) {\n                if (err.name.toUpperCase().includes(retriableError) ||\n                    err.message.toUpperCase().includes(retriableError) ||\n                    (err.code && err.code.toString().toUpperCase() === retriableError)) {\n                    logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || err) {\n            const statusCode = response ? response.status : err ? err.statusCode : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n            logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n    async delay(isPrimaryRetry, attempt, abortSignal) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (this.retryOptions.retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = this.retryOptions.retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageRetryPolicy, StorageRetryPolicyType } from \"./policies/StorageRetryPolicy\";\nexport { StorageRetryPolicyType, StorageRetryPolicy };\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nexport class StorageRetryPolicyFactory {\n    /**\n     * Creates an instance of StorageRetryPolicyFactory.\n     * @param retryOptions -\n     */\n    constructor(retryOptions) {\n        this.retryOptions = retryOptions;\n    }\n    /**\n     * Creates a StorageRetryPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicyFactory.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./RequestPolicy\";\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nexport class CredentialPolicy extends BaseRequestPolicy {\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    sendRequest(request) {\n        return this._nextPolicy.sendRequest(this.signRequest(request));\n    }\n    /**\n     * Child classes must implement this method with request signing. This method\n     * will be executed in {@link sendRequest}.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        // Child classes must override this method with request signing. This method\n        // will be executed in sendRequest().\n        return request;\n    }\n}\n//# sourceMappingURL=CredentialPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HeaderConstants } from \"../utils/constants\";\nimport { getURLPath, getURLQueries } from \"../utils/utils.common\";\nimport { CredentialPolicy } from \"./CredentialPolicy\";\nimport { compareHeader } from \"../utils/SharedKeyComparator\";\n/**\n * StorageSharedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.\n */\nexport class StorageSharedKeyCredentialPolicy extends CredentialPolicy {\n    /**\n     * Creates an instance of StorageSharedKeyCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     * @param factory -\n     */\n    constructor(nextPolicy, options, factory) {\n        super(nextPolicy, options);\n        this.factory = factory;\n    }\n    /**\n     * Signs request.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        request.headers.set(HeaderConstants.X_MS_DATE, new Date().toUTCString());\n        if (request.body &&\n            (typeof request.body === \"string\" || request.body !== undefined) &&\n            request.body.length > 0) {\n            request.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n        const stringToSign = [\n            request.method.toUpperCase(),\n            this.getHeaderValueToSign(request, HeaderConstants.CONTENT_LANGUAGE),\n            this.getHeaderValueToSign(request, HeaderConstants.CONTENT_ENCODING),\n            this.getHeaderValueToSign(request, HeaderConstants.CONTENT_LENGTH),\n            this.getHeaderValueToSign(request, HeaderConstants.CONTENT_MD5),\n            this.getHeaderValueToSign(request, HeaderConstants.CONTENT_TYPE),\n            this.getHeaderValueToSign(request, HeaderConstants.DATE),\n            this.getHeaderValueToSign(request, HeaderConstants.IF_MODIFIED_SINCE),\n            this.getHeaderValueToSign(request, HeaderConstants.IF_MATCH),\n            this.getHeaderValueToSign(request, HeaderConstants.IF_NONE_MATCH),\n            this.getHeaderValueToSign(request, HeaderConstants.IF_UNMODIFIED_SINCE),\n            this.getHeaderValueToSign(request, HeaderConstants.RANGE),\n        ].join(\"\\n\") +\n            \"\\n\" +\n            this.getCanonicalizedHeadersString(request) +\n            this.getCanonicalizedResourceString(request);\n        const signature = this.factory.computeHMACSHA256(stringToSign);\n        request.headers.set(HeaderConstants.AUTHORIZATION, `SharedKey ${this.factory.accountName}:${signature}`);\n        // console.log(`[URL]:${request.url}`);\n        // console.log(`[HEADERS]:${request.headers.toString()}`);\n        // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n        // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n        return request;\n    }\n    /**\n     * Retrieve header value according to shared key sign rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n     *\n     * @param request -\n     * @param headerName -\n     */\n    getHeaderValueToSign(request, headerName) {\n        const value = request.headers.get(headerName);\n        if (!value) {\n            return \"\";\n        }\n        // When using version 2015-02-21 or later, if Content-Length is zero, then\n        // set the Content-Length part of the StringToSign to an empty string.\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n        if (headerName === HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n            return \"\";\n        }\n        return value;\n    }\n    /**\n     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n     * 2. Convert each HTTP header name to lowercase.\n     * 3. Sort the headers lexicographically by header name, in ascending order.\n     *    Each header may appear only once in the string.\n     * 4. Replace any linear whitespace in the header value with a single space.\n     * 5. Trim any whitespace around the colon in the header.\n     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n     *\n     * @param request -\n     */\n    getCanonicalizedHeadersString(request) {\n        let headersArray = request.headers.headersArray().filter((value) => {\n            return value.name.toLowerCase().startsWith(HeaderConstants.PREFIX_FOR_STORAGE);\n        });\n        headersArray.sort((a, b) => {\n            return compareHeader(a.name.toLowerCase(), b.name.toLowerCase());\n        });\n        // Remove duplicate headers\n        headersArray = headersArray.filter((value, index, array) => {\n            if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        let canonicalizedHeadersStringToSign = \"\";\n        headersArray.forEach((header) => {\n            canonicalizedHeadersStringToSign += `${header.name\n                .toLowerCase()\n                .trimRight()}:${header.value.trimLeft()}\\n`;\n        });\n        return canonicalizedHeadersStringToSign;\n    }\n    /**\n     * Retrieves the webResource canonicalized resource string.\n     *\n     * @param request -\n     */\n    getCanonicalizedResourceString(request) {\n        const path = getURLPath(request.url) || \"/\";\n        let canonicalizedResourceString = \"\";\n        canonicalizedResourceString += `/${this.factory.accountName}${path}`;\n        const queries = getURLQueries(request.url);\n        const lowercaseQueries = {};\n        if (queries) {\n            const queryKeys = [];\n            for (const key in queries) {\n                if (Object.prototype.hasOwnProperty.call(queries, key)) {\n                    const lowercaseKey = key.toLowerCase();\n                    lowercaseQueries[lowercaseKey] = queries[key];\n                    queryKeys.push(lowercaseKey);\n                }\n            }\n            queryKeys.sort();\n            for (const key of queryKeys) {\n                canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n            }\n        }\n        return canonicalizedResourceString;\n    }\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nexport class Credential {\n    /**\n     * Creates a RequestPolicy object.\n     *\n     * @param _nextPolicy -\n     * @param _options -\n     */\n    create(_nextPolicy, _options) {\n        throw new Error(\"Method should be implemented in children classes.\");\n    }\n}\n//# sourceMappingURL=Credential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHmac } from \"crypto\";\nimport { StorageSharedKeyCredentialPolicy } from \"../policies/StorageSharedKeyCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * StorageSharedKeyCredential for account key authorization of Azure Storage service.\n */\nexport class StorageSharedKeyCredential extends Credential {\n    /**\n     * Creates an instance of StorageSharedKeyCredential.\n     * @param accountName -\n     * @param accountKey -\n     */\n    constructor(accountName, accountKey) {\n        super();\n        this.accountName = accountName;\n        this.accountKey = Buffer.from(accountKey, \"base64\");\n    }\n    /**\n     * Creates a StorageSharedKeyCredentialPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new StorageSharedKeyCredentialPolicy(nextPolicy, options, this);\n    }\n    /**\n     * Generates a hash signature for an HTTP request or for a SAS.\n     *\n     * @param stringToSign -\n     */\n    computeHMACSHA256(stringToSign) {\n        return createHmac(\"sha256\", this.accountKey).update(stringToSign, \"utf8\").digest(\"base64\");\n    }\n}\n//# sourceMappingURL=StorageSharedKeyCredential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n    /**\n     * Creates an instance of AnonymousCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredentialPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nexport class AnonymousCredential extends Credential {\n    /**\n     * Creates an {@link AnonymousCredentialPolicy} object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new AnonymousCredentialPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./RequestPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of StorageBrowserPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (isNode) {\n            return this._nextPolicy.sendRequest(request);\n        }\n        if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n            request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n        }\n        request.headers.remove(HeaderConstants.COOKIE);\n        // According to XHR standards, content-length should be fully controlled by browsers\n        request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicy.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageBrowserPolicy } from \"./policies/StorageBrowserPolicy\";\nexport { StorageBrowserPolicy };\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nexport class StorageBrowserPolicyFactory {\n    /**\n     * Creates a StorageBrowserPolicyFactory object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new StorageBrowserPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicyFactory.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nexport const BlobServiceProperties = {\n    serializedName: \"BlobServiceProperties\",\n    xmlName: \"StorageServiceProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceProperties\",\n        modelProperties: {\n            blobAnalyticsLogging: {\n                serializedName: \"Logging\",\n                xmlName: \"Logging\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Logging\",\n                },\n            },\n            hourMetrics: {\n                serializedName: \"HourMetrics\",\n                xmlName: \"HourMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            minuteMetrics: {\n                serializedName: \"MinuteMetrics\",\n                xmlName: \"MinuteMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            cors: {\n                serializedName: \"Cors\",\n                xmlName: \"Cors\",\n                xmlIsWrapped: true,\n                xmlElementName: \"CorsRule\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"CorsRule\",\n                        },\n                    },\n                },\n            },\n            defaultServiceVersion: {\n                serializedName: \"DefaultServiceVersion\",\n                xmlName: \"DefaultServiceVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteRetentionPolicy: {\n                serializedName: \"DeleteRetentionPolicy\",\n                xmlName: \"DeleteRetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n            staticWebsite: {\n                serializedName: \"StaticWebsite\",\n                xmlName: \"StaticWebsite\",\n                type: {\n                    name: \"Composite\",\n                    className: \"StaticWebsite\",\n                },\n            },\n        },\n    },\n};\nexport const Logging = {\n    serializedName: \"Logging\",\n    type: {\n        name: \"Composite\",\n        className: \"Logging\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                required: true,\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteProperty: {\n                serializedName: \"Delete\",\n                required: true,\n                xmlName: \"Delete\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            read: {\n                serializedName: \"Read\",\n                required: true,\n                xmlName: \"Read\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            write: {\n                serializedName: \"Write\",\n                required: true,\n                xmlName: \"Write\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nexport const RetentionPolicy = {\n    serializedName: \"RetentionPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"RetentionPolicy\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            days: {\n                constraints: {\n                    InclusiveMinimum: 1,\n                },\n                serializedName: \"Days\",\n                xmlName: \"Days\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const Metrics = {\n    serializedName: \"Metrics\",\n    type: {\n        name: \"Composite\",\n        className: \"Metrics\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            includeAPIs: {\n                serializedName: \"IncludeAPIs\",\n                xmlName: \"IncludeAPIs\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nexport const CorsRule = {\n    serializedName: \"CorsRule\",\n    type: {\n        name: \"Composite\",\n        className: \"CorsRule\",\n        modelProperties: {\n            allowedOrigins: {\n                serializedName: \"AllowedOrigins\",\n                required: true,\n                xmlName: \"AllowedOrigins\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedMethods: {\n                serializedName: \"AllowedMethods\",\n                required: true,\n                xmlName: \"AllowedMethods\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedHeaders: {\n                serializedName: \"AllowedHeaders\",\n                required: true,\n                xmlName: \"AllowedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            exposedHeaders: {\n                serializedName: \"ExposedHeaders\",\n                required: true,\n                xmlName: \"ExposedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxAgeInSeconds: {\n                constraints: {\n                    InclusiveMinimum: 0,\n                },\n                serializedName: \"MaxAgeInSeconds\",\n                required: true,\n                xmlName: \"MaxAgeInSeconds\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const StaticWebsite = {\n    serializedName: \"StaticWebsite\",\n    type: {\n        name: \"Composite\",\n        className: \"StaticWebsite\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            indexDocument: {\n                serializedName: \"IndexDocument\",\n                xmlName: \"IndexDocument\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorDocument404Path: {\n                serializedName: \"ErrorDocument404Path\",\n                xmlName: \"ErrorDocument404Path\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            defaultIndexDocumentPath: {\n                serializedName: \"DefaultIndexDocumentPath\",\n                xmlName: \"DefaultIndexDocumentPath\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const StorageError = {\n    serializedName: \"StorageError\",\n    type: {\n        name: \"Composite\",\n        className: \"StorageError\",\n        modelProperties: {\n            message: {\n                serializedName: \"Message\",\n                xmlName: \"Message\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            code: {\n                serializedName: \"Code\",\n                xmlName: \"Code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            authenticationErrorDetail: {\n                serializedName: \"AuthenticationErrorDetail\",\n                xmlName: \"AuthenticationErrorDetail\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobServiceStatistics = {\n    serializedName: \"BlobServiceStatistics\",\n    xmlName: \"StorageServiceStats\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceStatistics\",\n        modelProperties: {\n            geoReplication: {\n                serializedName: \"GeoReplication\",\n                xmlName: \"GeoReplication\",\n                type: {\n                    name: \"Composite\",\n                    className: \"GeoReplication\",\n                },\n            },\n        },\n    },\n};\nexport const GeoReplication = {\n    serializedName: \"GeoReplication\",\n    type: {\n        name: \"Composite\",\n        className: \"GeoReplication\",\n        modelProperties: {\n            status: {\n                serializedName: \"Status\",\n                required: true,\n                xmlName: \"Status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"live\", \"bootstrap\", \"unavailable\"],\n                },\n            },\n            lastSyncOn: {\n                serializedName: \"LastSyncTime\",\n                required: true,\n                xmlName: \"LastSyncTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ListContainersSegmentResponse = {\n    serializedName: \"ListContainersSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListContainersSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            containerItems: {\n                serializedName: \"ContainerItems\",\n                required: true,\n                xmlName: \"Containers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Container\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ContainerItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerItem = {\n    serializedName: \"ContainerItem\",\n    xmlName: \"Container\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ContainerProperties\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n        },\n    },\n};\nexport const ContainerProperties = {\n    serializedName: \"ContainerProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerProperties\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            publicAccess: {\n                serializedName: \"PublicAccess\",\n                xmlName: \"PublicAccess\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"HasImmutabilityPolicy\",\n                xmlName: \"HasImmutabilityPolicy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"HasLegalHold\",\n                xmlName: \"HasLegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"DefaultEncryptionScope\",\n                xmlName: \"DefaultEncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            preventEncryptionScopeOverride: {\n                serializedName: \"DenyEncryptionScopeOverride\",\n                xmlName: \"DenyEncryptionScopeOverride\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"ImmutableStorageWithVersioningEnabled\",\n                xmlName: \"ImmutableStorageWithVersioningEnabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const KeyInfo = {\n    serializedName: \"KeyInfo\",\n    type: {\n        name: \"Composite\",\n        className: \"KeyInfo\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                required: true,\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const UserDelegationKey = {\n    serializedName: \"UserDelegationKey\",\n    type: {\n        name: \"Composite\",\n        className: \"UserDelegationKey\",\n        modelProperties: {\n            signedObjectId: {\n                serializedName: \"SignedOid\",\n                required: true,\n                xmlName: \"SignedOid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedTenantId: {\n                serializedName: \"SignedTid\",\n                required: true,\n                xmlName: \"SignedTid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedStartsOn: {\n                serializedName: \"SignedStart\",\n                required: true,\n                xmlName: \"SignedStart\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedExpiresOn: {\n                serializedName: \"SignedExpiry\",\n                required: true,\n                xmlName: \"SignedExpiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedService: {\n                serializedName: \"SignedService\",\n                required: true,\n                xmlName: \"SignedService\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedVersion: {\n                serializedName: \"SignedVersion\",\n                required: true,\n                xmlName: \"SignedVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const FilterBlobSegment = {\n    serializedName: \"FilterBlobSegment\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobSegment\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            where: {\n                serializedName: \"Where\",\n                required: true,\n                xmlName: \"Where\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobs: {\n                serializedName: \"Blobs\",\n                required: true,\n                xmlName: \"Blobs\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FilterBlobItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const FilterBlobItem = {\n    serializedName: \"FilterBlobItem\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            tags: {\n                serializedName: \"Tags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n        },\n    },\n};\nexport const BlobTags = {\n    serializedName: \"BlobTags\",\n    xmlName: \"Tags\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTags\",\n        modelProperties: {\n            blobTagSet: {\n                serializedName: \"BlobTagSet\",\n                required: true,\n                xmlName: \"TagSet\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Tag\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobTag\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlobTag = {\n    serializedName: \"BlobTag\",\n    xmlName: \"Tag\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTag\",\n        modelProperties: {\n            key: {\n                serializedName: \"Key\",\n                required: true,\n                xmlName: \"Key\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const SignedIdentifier = {\n    serializedName: \"SignedIdentifier\",\n    xmlName: \"SignedIdentifier\",\n    type: {\n        name: \"Composite\",\n        className: \"SignedIdentifier\",\n        modelProperties: {\n            id: {\n                serializedName: \"Id\",\n                required: true,\n                xmlName: \"Id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessPolicy: {\n                serializedName: \"AccessPolicy\",\n                xmlName: \"AccessPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"AccessPolicy\",\n                },\n            },\n        },\n    },\n};\nexport const AccessPolicy = {\n    serializedName: \"AccessPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"AccessPolicy\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            permissions: {\n                serializedName: \"Permission\",\n                xmlName: \"Permission\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ListBlobsFlatSegmentResponse = {\n    serializedName: \"ListBlobsFlatSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsFlatSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobFlatListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobFlatListSegment = {\n    serializedName: \"BlobFlatListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobFlatListSegment\",\n        modelProperties: {\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlobItemInternal = {\n    serializedName: \"BlobItemInternal\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobItemInternal\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                required: true,\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            snapshot: {\n                serializedName: \"Snapshot\",\n                required: true,\n                xmlName: \"Snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"VersionId\",\n                xmlName: \"VersionId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"IsCurrentVersion\",\n                xmlName: \"IsCurrentVersion\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobPropertiesInternal\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobTags: {\n                serializedName: \"BlobTags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n            objectReplicationMetadata: {\n                serializedName: \"ObjectReplicationMetadata\",\n                xmlName: \"OrMetadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            hasVersionsOnly: {\n                serializedName: \"HasVersionsOnly\",\n                xmlName: \"HasVersionsOnly\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const BlobName = {\n    serializedName: \"BlobName\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobName\",\n        modelProperties: {\n            encoded: {\n                serializedName: \"Encoded\",\n                xmlName: \"Encoded\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            content: {\n                serializedName: \"content\",\n                xmlName: \"content\",\n                xmlIsMsText: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobPropertiesInternal = {\n    serializedName: \"BlobPropertiesInternal\",\n    xmlName: \"Properties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPropertiesInternal\",\n        modelProperties: {\n            createdOn: {\n                serializedName: \"Creation-Time\",\n                xmlName: \"Creation-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLength: {\n                serializedName: \"Content-Length\",\n                xmlName: \"Content-Length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"Content-Type\",\n                xmlName: \"Content-Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"Content-Encoding\",\n                xmlName: \"Content-Encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"Content-Language\",\n                xmlName: \"Content-Language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"Content-MD5\",\n                xmlName: \"Content-MD5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"Content-Disposition\",\n                xmlName: \"Content-Disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"Cache-Control\",\n                xmlName: \"Cache-Control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"BlobType\",\n                xmlName: \"BlobType\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            copyId: {\n                serializedName: \"CopyId\",\n                xmlName: \"CopyId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"CopyStatus\",\n                xmlName: \"CopyStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            copySource: {\n                serializedName: \"CopySource\",\n                xmlName: \"CopySource\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"CopyProgress\",\n                xmlName: \"CopyProgress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"CopyCompletionTime\",\n                xmlName: \"CopyCompletionTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"CopyStatusDescription\",\n                xmlName: \"CopyStatusDescription\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            serverEncrypted: {\n                serializedName: \"ServerEncrypted\",\n                xmlName: \"ServerEncrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            incrementalCopy: {\n                serializedName: \"IncrementalCopy\",\n                xmlName: \"IncrementalCopy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"DestinationSnapshot\",\n                xmlName: \"DestinationSnapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            accessTier: {\n                serializedName: \"AccessTier\",\n                xmlName: \"AccessTier\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"P4\",\n                        \"P6\",\n                        \"P10\",\n                        \"P15\",\n                        \"P20\",\n                        \"P30\",\n                        \"P40\",\n                        \"P50\",\n                        \"P60\",\n                        \"P70\",\n                        \"P80\",\n                        \"Hot\",\n                        \"Cool\",\n                        \"Archive\",\n                        \"Cold\",\n                    ],\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"AccessTierInferred\",\n                xmlName: \"AccessTierInferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"ArchiveStatus\",\n                xmlName: \"ArchiveStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"rehydrate-pending-to-hot\",\n                        \"rehydrate-pending-to-cool\",\n                        \"rehydrate-pending-to-cold\",\n                    ],\n                },\n            },\n            customerProvidedKeySha256: {\n                serializedName: \"CustomerProvidedKeySha256\",\n                xmlName: \"CustomerProvidedKeySha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"EncryptionScope\",\n                xmlName: \"EncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"AccessTierChangeTime\",\n                xmlName: \"AccessTierChangeTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            tagCount: {\n                serializedName: \"TagCount\",\n                xmlName: \"TagCount\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry-Time\",\n                xmlName: \"Expiry-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"Sealed\",\n                xmlName: \"Sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"RehydratePriority\",\n                xmlName: \"RehydratePriority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessedOn: {\n                serializedName: \"LastAccessTime\",\n                xmlName: \"LastAccessTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"ImmutabilityPolicyUntilDate\",\n                xmlName: \"ImmutabilityPolicyUntilDate\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"ImmutabilityPolicyMode\",\n                xmlName: \"ImmutabilityPolicyMode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"LegalHold\",\n                xmlName: \"LegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const ListBlobsHierarchySegmentResponse = {\n    serializedName: \"ListBlobsHierarchySegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsHierarchySegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            delimiter: {\n                serializedName: \"Delimiter\",\n                xmlName: \"Delimiter\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobHierarchyListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobHierarchyListSegment = {\n    serializedName: \"BlobHierarchyListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobHierarchyListSegment\",\n        modelProperties: {\n            blobPrefixes: {\n                serializedName: \"BlobPrefixes\",\n                xmlName: \"BlobPrefixes\",\n                xmlElementName: \"BlobPrefix\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobPrefix\",\n                        },\n                    },\n                },\n            },\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlobPrefix = {\n    serializedName: \"BlobPrefix\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPrefix\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n        },\n    },\n};\nexport const BlockLookupList = {\n    serializedName: \"BlockLookupList\",\n    xmlName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockLookupList\",\n        modelProperties: {\n            committed: {\n                serializedName: \"Committed\",\n                xmlName: \"Committed\",\n                xmlElementName: \"Committed\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            uncommitted: {\n                serializedName: \"Uncommitted\",\n                xmlName: \"Uncommitted\",\n                xmlElementName: \"Uncommitted\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            latest: {\n                serializedName: \"Latest\",\n                xmlName: \"Latest\",\n                xmlElementName: \"Latest\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const BlockList = {\n    serializedName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockList\",\n        modelProperties: {\n            committedBlocks: {\n                serializedName: \"CommittedBlocks\",\n                xmlName: \"CommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n            uncommittedBlocks: {\n                serializedName: \"UncommittedBlocks\",\n                xmlName: \"UncommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const Block = {\n    serializedName: \"Block\",\n    type: {\n        name: \"Composite\",\n        className: \"Block\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            size: {\n                serializedName: \"Size\",\n                required: true,\n                xmlName: \"Size\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const PageList = {\n    serializedName: \"PageList\",\n    type: {\n        name: \"Composite\",\n        className: \"PageList\",\n        modelProperties: {\n            pageRange: {\n                serializedName: \"PageRange\",\n                xmlName: \"PageRange\",\n                xmlElementName: \"PageRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"PageRange\",\n                        },\n                    },\n                },\n            },\n            clearRange: {\n                serializedName: \"ClearRange\",\n                xmlName: \"ClearRange\",\n                xmlElementName: \"ClearRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ClearRange\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageRange = {\n    serializedName: \"PageRange\",\n    xmlName: \"PageRange\",\n    type: {\n        name: \"Composite\",\n        className: \"PageRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const ClearRange = {\n    serializedName: \"ClearRange\",\n    xmlName: \"ClearRange\",\n    type: {\n        name: \"Composite\",\n        className: \"ClearRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const QueryRequest = {\n    serializedName: \"QueryRequest\",\n    xmlName: \"QueryRequest\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryRequest\",\n        modelProperties: {\n            queryType: {\n                serializedName: \"QueryType\",\n                required: true,\n                xmlName: \"QueryType\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expression: {\n                serializedName: \"Expression\",\n                required: true,\n                xmlName: \"Expression\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            inputSerialization: {\n                serializedName: \"InputSerialization\",\n                xmlName: \"InputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n            outputSerialization: {\n                serializedName: \"OutputSerialization\",\n                xmlName: \"OutputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n        },\n    },\n};\nexport const QuerySerialization = {\n    serializedName: \"QuerySerialization\",\n    type: {\n        name: \"Composite\",\n        className: \"QuerySerialization\",\n        modelProperties: {\n            format: {\n                serializedName: \"Format\",\n                xmlName: \"Format\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QueryFormat\",\n                },\n            },\n        },\n    },\n};\nexport const QueryFormat = {\n    serializedName: \"QueryFormat\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryFormat\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"delimited\", \"json\", \"arrow\", \"parquet\"],\n                },\n            },\n            delimitedTextConfiguration: {\n                serializedName: \"DelimitedTextConfiguration\",\n                xmlName: \"DelimitedTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"DelimitedTextConfiguration\",\n                },\n            },\n            jsonTextConfiguration: {\n                serializedName: \"JsonTextConfiguration\",\n                xmlName: \"JsonTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"JsonTextConfiguration\",\n                },\n            },\n            arrowConfiguration: {\n                serializedName: \"ArrowConfiguration\",\n                xmlName: \"ArrowConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ArrowConfiguration\",\n                },\n            },\n            parquetTextConfiguration: {\n                serializedName: \"ParquetTextConfiguration\",\n                xmlName: \"ParquetTextConfiguration\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"any\" } },\n                },\n            },\n        },\n    },\n};\nexport const DelimitedTextConfiguration = {\n    serializedName: \"DelimitedTextConfiguration\",\n    xmlName: \"DelimitedTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"DelimitedTextConfiguration\",\n        modelProperties: {\n            columnSeparator: {\n                serializedName: \"ColumnSeparator\",\n                xmlName: \"ColumnSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            fieldQuote: {\n                serializedName: \"FieldQuote\",\n                xmlName: \"FieldQuote\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            escapeChar: {\n                serializedName: \"EscapeChar\",\n                xmlName: \"EscapeChar\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            headersPresent: {\n                serializedName: \"HeadersPresent\",\n                xmlName: \"HasHeaders\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const JsonTextConfiguration = {\n    serializedName: \"JsonTextConfiguration\",\n    xmlName: \"JsonTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"JsonTextConfiguration\",\n        modelProperties: {\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ArrowConfiguration = {\n    serializedName: \"ArrowConfiguration\",\n    xmlName: \"ArrowConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowConfiguration\",\n        modelProperties: {\n            schema: {\n                serializedName: \"Schema\",\n                required: true,\n                xmlName: \"Schema\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Field\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArrowField\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nexport const ArrowField = {\n    serializedName: \"ArrowField\",\n    xmlName: \"Field\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowField\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            precision: {\n                serializedName: \"Precision\",\n                xmlName: \"Precision\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            scale: {\n                serializedName: \"Scale\",\n                xmlName: \"Scale\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSetPropertiesHeaders = {\n    serializedName: \"Service_setPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSetPropertiesExceptionHeaders = {\n    serializedName: \"Service_setPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetPropertiesHeaders = {\n    serializedName: \"Service_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetPropertiesExceptionHeaders = {\n    serializedName: \"Service_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetStatisticsHeaders = {\n    serializedName: \"Service_getStatisticsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetStatisticsExceptionHeaders = {\n    serializedName: \"Service_getStatisticsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceListContainersSegmentHeaders = {\n    serializedName: \"Service_listContainersSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceListContainersSegmentExceptionHeaders = {\n    serializedName: \"Service_listContainersSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetUserDelegationKeyHeaders = {\n    serializedName: \"Service_getUserDelegationKeyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetUserDelegationKeyExceptionHeaders = {\n    serializedName: \"Service_getUserDelegationKeyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetAccountInfoHeaders = {\n    serializedName: \"Service_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceGetAccountInfoExceptionHeaders = {\n    serializedName: \"Service_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSubmitBatchHeaders = {\n    serializedName: \"Service_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceSubmitBatchExceptionHeaders = {\n    serializedName: \"Service_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceFilterBlobsHeaders = {\n    serializedName: \"Service_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ServiceFilterBlobsExceptionHeaders = {\n    serializedName: \"Service_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerCreateHeaders = {\n    serializedName: \"Container_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerCreateExceptionHeaders = {\n    serializedName: \"Container_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetPropertiesHeaders = {\n    serializedName: \"Container_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesHeaders\",\n        modelProperties: {\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"x-ms-has-immutability-policy\",\n                xmlName: \"x-ms-has-immutability-policy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"x-ms-has-legal-hold\",\n                xmlName: \"x-ms-has-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"x-ms-default-encryption-scope\",\n                xmlName: \"x-ms-default-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            denyEncryptionScopeOverride: {\n                serializedName: \"x-ms-deny-encryption-scope-override\",\n                xmlName: \"x-ms-deny-encryption-scope-override\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                xmlName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetPropertiesExceptionHeaders = {\n    serializedName: \"Container_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerDeleteHeaders = {\n    serializedName: \"Container_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerDeleteExceptionHeaders = {\n    serializedName: \"Container_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetMetadataHeaders = {\n    serializedName: \"Container_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetMetadataExceptionHeaders = {\n    serializedName: \"Container_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccessPolicyHeaders = {\n    serializedName: \"Container_getAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyHeaders\",\n        modelProperties: {\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_getAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetAccessPolicyHeaders = {\n    serializedName: \"Container_setAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_setAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRestoreHeaders = {\n    serializedName: \"Container_restoreHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRestoreExceptionHeaders = {\n    serializedName: \"Container_restoreExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenameHeaders = {\n    serializedName: \"Container_renameHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenameExceptionHeaders = {\n    serializedName: \"Container_renameExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSubmitBatchHeaders = {\n    serializedName: \"Container_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerSubmitBatchExceptionHeaders = {\n    serializedName: \"Container_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerFilterBlobsHeaders = {\n    serializedName: \"Container_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerFilterBlobsExceptionHeaders = {\n    serializedName: \"Container_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerAcquireLeaseHeaders = {\n    serializedName: \"Container_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerAcquireLeaseExceptionHeaders = {\n    serializedName: \"Container_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerReleaseLeaseHeaders = {\n    serializedName: \"Container_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerReleaseLeaseExceptionHeaders = {\n    serializedName: \"Container_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenewLeaseHeaders = {\n    serializedName: \"Container_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerRenewLeaseExceptionHeaders = {\n    serializedName: \"Container_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerBreakLeaseHeaders = {\n    serializedName: \"Container_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerBreakLeaseExceptionHeaders = {\n    serializedName: \"Container_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerChangeLeaseHeaders = {\n    serializedName: \"Container_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerChangeLeaseExceptionHeaders = {\n    serializedName: \"Container_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobFlatSegmentHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobFlatSegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobHierarchySegmentHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerListBlobHierarchySegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccountInfoHeaders = {\n    serializedName: \"Container_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const ContainerGetAccountInfoExceptionHeaders = {\n    serializedName: \"Container_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDownloadHeaders = {\n    serializedName: \"Blob_downloadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDownloadExceptionHeaders = {\n    serializedName: \"Blob_downloadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetPropertiesHeaders = {\n    serializedName: \"Blob_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            isIncrementalCopy: {\n                serializedName: \"x-ms-incremental-copy\",\n                xmlName: \"x-ms-incremental-copy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"x-ms-copy-destination-snapshot\",\n                xmlName: \"x-ms-copy-destination-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTier: {\n                serializedName: \"x-ms-access-tier\",\n                xmlName: \"x-ms-access-tier\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"x-ms-access-tier-inferred\",\n                xmlName: \"x-ms-access-tier-inferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"x-ms-archive-status\",\n                xmlName: \"x-ms-archive-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"x-ms-access-tier-change-time\",\n                xmlName: \"x-ms-access-tier-change-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"x-ms-expiry-time\",\n                xmlName: \"x-ms-expiry-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"x-ms-rehydrate-priority\",\n                xmlName: \"x-ms-rehydrate-priority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetPropertiesExceptionHeaders = {\n    serializedName: \"Blob_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteHeaders = {\n    serializedName: \"Blob_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteExceptionHeaders = {\n    serializedName: \"Blob_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobUndeleteHeaders = {\n    serializedName: \"Blob_undeleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobUndeleteExceptionHeaders = {\n    serializedName: \"Blob_undeleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetExpiryHeaders = {\n    serializedName: \"Blob_setExpiryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetExpiryExceptionHeaders = {\n    serializedName: \"Blob_setExpiryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetHttpHeadersHeaders = {\n    serializedName: \"Blob_setHttpHeadersHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetHttpHeadersExceptionHeaders = {\n    serializedName: \"Blob_setHttpHeadersExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiry: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n        },\n    },\n};\nexport const BlobSetImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobDeleteImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetLegalHoldHeaders = {\n    serializedName: \"Blob_setLegalHoldHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetLegalHoldExceptionHeaders = {\n    serializedName: \"Blob_setLegalHoldExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetMetadataHeaders = {\n    serializedName: \"Blob_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetMetadataExceptionHeaders = {\n    serializedName: \"Blob_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAcquireLeaseHeaders = {\n    serializedName: \"Blob_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAcquireLeaseExceptionHeaders = {\n    serializedName: \"Blob_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobReleaseLeaseHeaders = {\n    serializedName: \"Blob_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobReleaseLeaseExceptionHeaders = {\n    serializedName: \"Blob_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobRenewLeaseHeaders = {\n    serializedName: \"Blob_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobRenewLeaseExceptionHeaders = {\n    serializedName: \"Blob_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobChangeLeaseHeaders = {\n    serializedName: \"Blob_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobChangeLeaseExceptionHeaders = {\n    serializedName: \"Blob_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobBreakLeaseHeaders = {\n    serializedName: \"Blob_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nexport const BlobBreakLeaseExceptionHeaders = {\n    serializedName: \"Blob_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCreateSnapshotHeaders = {\n    serializedName: \"Blob_createSnapshotHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotHeaders\",\n        modelProperties: {\n            snapshot: {\n                serializedName: \"x-ms-snapshot\",\n                xmlName: \"x-ms-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCreateSnapshotExceptionHeaders = {\n    serializedName: \"Blob_createSnapshotExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobStartCopyFromURLHeaders = {\n    serializedName: \"Blob_startCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobStartCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_startCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCopyFromURLHeaders = {\n    serializedName: \"Blob_copyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                defaultValue: \"success\",\n                isConstant: true,\n                serializedName: \"x-ms-copy-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_copyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAbortCopyFromURLHeaders = {\n    serializedName: \"Blob_abortCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobAbortCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_abortCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTierHeaders = {\n    serializedName: \"Blob_setTierHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTierExceptionHeaders = {\n    serializedName: \"Blob_setTierExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetAccountInfoHeaders = {\n    serializedName: \"Blob_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetAccountInfoExceptionHeaders = {\n    serializedName: \"Blob_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobQueryHeaders = {\n    serializedName: \"Blob_queryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletionTime: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nexport const BlobQueryExceptionHeaders = {\n    serializedName: \"Blob_queryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetTagsHeaders = {\n    serializedName: \"Blob_getTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobGetTagsExceptionHeaders = {\n    serializedName: \"Blob_getTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTagsHeaders = {\n    serializedName: \"Blob_setTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlobSetTagsExceptionHeaders = {\n    serializedName: \"Blob_setTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCreateHeaders = {\n    serializedName: \"PageBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCreateExceptionHeaders = {\n    serializedName: \"PageBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesHeaders = {\n    serializedName: \"PageBlob_uploadPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobClearPagesHeaders = {\n    serializedName: \"PageBlob_clearPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobClearPagesExceptionHeaders = {\n    serializedName: \"PageBlob_clearPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesFromURLHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUploadPagesFromURLExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesHeaders = {\n    serializedName: \"PageBlob_getPageRangesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesDiffHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobGetPageRangesDiffExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobResizeHeaders = {\n    serializedName: \"PageBlob_resizeHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobResizeExceptionHeaders = {\n    serializedName: \"PageBlob_resizeExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUpdateSequenceNumberHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobUpdateSequenceNumberExceptionHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCopyIncrementalHeaders = {\n    serializedName: \"PageBlob_copyIncrementalHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const PageBlobCopyIncrementalExceptionHeaders = {\n    serializedName: \"PageBlob_copyIncrementalExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobCreateHeaders = {\n    serializedName: \"AppendBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobCreateExceptionHeaders = {\n    serializedName: \"AppendBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockHeaders = {\n    serializedName: \"AppendBlob_appendBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockFromUrlHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobAppendBlockFromUrlExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobSealHeaders = {\n    serializedName: \"AppendBlob_sealHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nexport const AppendBlobSealExceptionHeaders = {\n    serializedName: \"AppendBlob_sealExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobUploadHeaders = {\n    serializedName: \"BlockBlob_uploadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobUploadExceptionHeaders = {\n    serializedName: \"BlockBlob_uploadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobPutBlobFromUrlHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobPutBlobFromUrlExceptionHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockHeaders = {\n    serializedName: \"BlockBlob_stageBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockFromURLHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobStageBlockFromURLExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobCommitBlockListHeaders = {\n    serializedName: \"BlockBlob_commitBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobCommitBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_commitBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobGetBlockListHeaders = {\n    serializedName: \"BlockBlob_getBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nexport const BlockBlobGetBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_getBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\n//# sourceMappingURL=mappers.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { BlobServiceProperties as BlobServicePropertiesMapper, KeyInfo as KeyInfoMapper, QueryRequest as QueryRequestMapper, BlobTags as BlobTagsMapper, BlockLookupList as BlockLookupListMapper, } from \"../models/mappers\";\nexport const contentType = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobServiceProperties = {\n    parameterPath: \"blobServiceProperties\",\n    mapper: BlobServicePropertiesMapper,\n};\nexport const accept = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const url = {\n    parameterPath: \"url\",\n    mapper: {\n        serializedName: \"url\",\n        required: true,\n        xmlName: \"url\",\n        type: {\n            name: \"String\",\n        },\n    },\n    skipEncoding: true,\n};\nexport const restype = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"service\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"properties\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const timeoutInSeconds = {\n    parameterPath: [\"options\", \"timeoutInSeconds\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 0,\n        },\n        serializedName: \"timeout\",\n        xmlName: \"timeout\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const version = {\n    parameterPath: \"version\",\n    mapper: {\n        defaultValue: \"2024-08-04\",\n        isConstant: true,\n        serializedName: \"x-ms-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const requestId = {\n    parameterPath: [\"options\", \"requestId\"],\n    mapper: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const accept1 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp1 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"stats\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp2 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"list\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const prefix = {\n    parameterPath: [\"options\", \"prefix\"],\n    mapper: {\n        serializedName: \"prefix\",\n        xmlName: \"prefix\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const marker = {\n    parameterPath: [\"options\", \"marker\"],\n    mapper: {\n        serializedName: \"marker\",\n        xmlName: \"marker\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const maxPageSize = {\n    parameterPath: [\"options\", \"maxPageSize\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 1,\n        },\n        serializedName: \"maxresults\",\n        xmlName: \"maxresults\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const include = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListContainersIncludeType\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"metadata\", \"deleted\", \"system\"],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nexport const keyInfo = {\n    parameterPath: \"keyInfo\",\n    mapper: KeyInfoMapper,\n};\nexport const comp3 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"userdelegationkey\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const restype1 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"account\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const body = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nexport const comp4 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"batch\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const contentLength = {\n    parameterPath: \"contentLength\",\n    mapper: {\n        serializedName: \"Content-Length\",\n        required: true,\n        xmlName: \"Content-Length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const multipartContentType = {\n    parameterPath: \"multipartContentType\",\n    mapper: {\n        serializedName: \"Content-Type\",\n        required: true,\n        xmlName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp5 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blobs\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const where = {\n    parameterPath: [\"options\", \"where\"],\n    mapper: {\n        serializedName: \"where\",\n        xmlName: \"where\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const restype2 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"container\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const metadata = {\n    parameterPath: [\"options\", \"metadata\"],\n    mapper: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        headerCollectionPrefix: \"x-ms-meta-\",\n        type: {\n            name: \"Dictionary\",\n            value: { type: { name: \"String\" } },\n        },\n    },\n};\nexport const access = {\n    parameterPath: [\"options\", \"access\"],\n    mapper: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"container\", \"blob\"],\n        },\n    },\n};\nexport const defaultEncryptionScope = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"defaultEncryptionScope\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-default-encryption-scope\",\n        xmlName: \"x-ms-default-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const preventEncryptionScopeOverride = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"preventEncryptionScopeOverride\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-deny-encryption-scope-override\",\n        xmlName: \"x-ms-deny-encryption-scope-override\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const leaseId = {\n    parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifModifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n    mapper: {\n        serializedName: \"If-Modified-Since\",\n        xmlName: \"If-Modified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const ifUnmodifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n    mapper: {\n        serializedName: \"If-Unmodified-Since\",\n        xmlName: \"If-Unmodified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const comp6 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"metadata\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp7 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"acl\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const containerAcl = {\n    parameterPath: [\"options\", \"containerAcl\"],\n    mapper: {\n        serializedName: \"containerAcl\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Composite\",\n                    className: \"SignedIdentifier\",\n                },\n            },\n        },\n    },\n};\nexport const comp8 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"undelete\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const deletedContainerName = {\n    parameterPath: [\"options\", \"deletedContainerName\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-name\",\n        xmlName: \"x-ms-deleted-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const deletedContainerVersion = {\n    parameterPath: [\"options\", \"deletedContainerVersion\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-version\",\n        xmlName: \"x-ms-deleted-container-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp9 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"rename\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceContainerName = {\n    parameterPath: \"sourceContainerName\",\n    mapper: {\n        serializedName: \"x-ms-source-container-name\",\n        required: true,\n        xmlName: \"x-ms-source-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceLeaseId = {\n    parameterPath: [\"options\", \"sourceLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-source-lease-id\",\n        xmlName: \"x-ms-source-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp10 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"lease\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"acquire\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const duration = {\n    parameterPath: [\"options\", \"duration\"],\n    mapper: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const proposedLeaseId = {\n    parameterPath: [\"options\", \"proposedLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action1 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"release\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const leaseId1 = {\n    parameterPath: \"leaseId\",\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        required: true,\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action2 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"renew\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const action3 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"break\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const breakPeriod = {\n    parameterPath: [\"options\", \"breakPeriod\"],\n    mapper: {\n        serializedName: \"x-ms-lease-break-period\",\n        xmlName: \"x-ms-lease-break-period\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const action4 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"change\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const proposedLeaseId1 = {\n    parameterPath: \"proposedLeaseId\",\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        required: true,\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const include1 = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListBlobsIncludeItem\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"copy\",\n                        \"deleted\",\n                        \"metadata\",\n                        \"snapshots\",\n                        \"uncommittedblobs\",\n                        \"versions\",\n                        \"tags\",\n                        \"immutabilitypolicy\",\n                        \"legalhold\",\n                        \"deletedwithversions\",\n                    ],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nexport const delimiter = {\n    parameterPath: \"delimiter\",\n    mapper: {\n        serializedName: \"delimiter\",\n        required: true,\n        xmlName: \"delimiter\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const snapshot = {\n    parameterPath: [\"options\", \"snapshot\"],\n    mapper: {\n        serializedName: \"snapshot\",\n        xmlName: \"snapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const versionId = {\n    parameterPath: [\"options\", \"versionId\"],\n    mapper: {\n        serializedName: \"versionid\",\n        xmlName: \"versionid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const range = {\n    parameterPath: [\"options\", \"range\"],\n    mapper: {\n        serializedName: \"x-ms-range\",\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const rangeGetContentMD5 = {\n    parameterPath: [\"options\", \"rangeGetContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-md5\",\n        xmlName: \"x-ms-range-get-content-md5\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const rangeGetContentCRC64 = {\n    parameterPath: [\"options\", \"rangeGetContentCRC64\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-crc64\",\n        xmlName: \"x-ms-range-get-content-crc64\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const encryptionKey = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKey\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key\",\n        xmlName: \"x-ms-encryption-key\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const encryptionKeySha256 = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKeySha256\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const encryptionAlgorithm = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionAlgorithm\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-algorithm\",\n        xmlName: \"x-ms-encryption-algorithm\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n    mapper: {\n        serializedName: \"If-Match\",\n        xmlName: \"If-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifNoneMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n    mapper: {\n        serializedName: \"If-None-Match\",\n        xmlName: \"If-None-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifTags = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifTags\"],\n    mapper: {\n        serializedName: \"x-ms-if-tags\",\n        xmlName: \"x-ms-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const deleteSnapshots = {\n    parameterPath: [\"options\", \"deleteSnapshots\"],\n    mapper: {\n        serializedName: \"x-ms-delete-snapshots\",\n        xmlName: \"x-ms-delete-snapshots\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"include\", \"only\"],\n        },\n    },\n};\nexport const blobDeleteType = {\n    parameterPath: [\"options\", \"blobDeleteType\"],\n    mapper: {\n        serializedName: \"deletetype\",\n        xmlName: \"deletetype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp11 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"expiry\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const expiryOptions = {\n    parameterPath: \"expiryOptions\",\n    mapper: {\n        serializedName: \"x-ms-expiry-option\",\n        required: true,\n        xmlName: \"x-ms-expiry-option\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const expiresOn = {\n    parameterPath: [\"options\", \"expiresOn\"],\n    mapper: {\n        serializedName: \"x-ms-expiry-time\",\n        xmlName: \"x-ms-expiry-time\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobCacheControl = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobCacheControl\"],\n    mapper: {\n        serializedName: \"x-ms-blob-cache-control\",\n        xmlName: \"x-ms-blob-cache-control\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentType = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentType\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-type\",\n        xmlName: \"x-ms-blob-content-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentMD5 = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const blobContentEncoding = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentEncoding\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-encoding\",\n        xmlName: \"x-ms-blob-content-encoding\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentLanguage = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentLanguage\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-language\",\n        xmlName: \"x-ms-blob-content-language\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentDisposition = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentDisposition\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-disposition\",\n        xmlName: \"x-ms-blob-content-disposition\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp12 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"immutabilityPolicies\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const immutabilityPolicyExpiry = {\n    parameterPath: [\"options\", \"immutabilityPolicyExpiry\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const immutabilityPolicyMode = {\n    parameterPath: [\"options\", \"immutabilityPolicyMode\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n        },\n    },\n};\nexport const comp13 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"legalhold\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const legalHold = {\n    parameterPath: \"legalHold\",\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        required: true,\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const encryptionScope = {\n    parameterPath: [\"options\", \"encryptionScope\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp14 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"snapshot\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const tier = {\n    parameterPath: [\"options\", \"tier\"],\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nexport const rehydratePriority = {\n    parameterPath: [\"options\", \"rehydratePriority\"],\n    mapper: {\n        serializedName: \"x-ms-rehydrate-priority\",\n        xmlName: \"x-ms-rehydrate-priority\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"High\", \"Standard\"],\n        },\n    },\n};\nexport const sourceIfModifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfModifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-modified-since\",\n        xmlName: \"x-ms-source-if-modified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const sourceIfUnmodifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfUnmodifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-unmodified-since\",\n        xmlName: \"x-ms-source-if-unmodified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nexport const sourceIfMatch = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-match\",\n        xmlName: \"x-ms-source-if-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceIfNoneMatch = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfNoneMatch\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-none-match\",\n        xmlName: \"x-ms-source-if-none-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceIfTags = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfTags\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-tags\",\n        xmlName: \"x-ms-source-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copySource = {\n    parameterPath: \"copySource\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobTagsString = {\n    parameterPath: [\"options\", \"blobTagsString\"],\n    mapper: {\n        serializedName: \"x-ms-tags\",\n        xmlName: \"x-ms-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sealBlob = {\n    parameterPath: [\"options\", \"sealBlob\"],\n    mapper: {\n        serializedName: \"x-ms-seal-blob\",\n        xmlName: \"x-ms-seal-blob\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const legalHold1 = {\n    parameterPath: [\"options\", \"legalHold\"],\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const xMsRequiresSync = {\n    parameterPath: \"xMsRequiresSync\",\n    mapper: {\n        defaultValue: \"true\",\n        isConstant: true,\n        serializedName: \"x-ms-requires-sync\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceContentMD5 = {\n    parameterPath: [\"options\", \"sourceContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-md5\",\n        xmlName: \"x-ms-source-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const copySourceAuthorization = {\n    parameterPath: [\"options\", \"copySourceAuthorization\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-authorization\",\n        xmlName: \"x-ms-copy-source-authorization\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copySourceTags = {\n    parameterPath: [\"options\", \"copySourceTags\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-tag-option\",\n        xmlName: \"x-ms-copy-source-tag-option\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"REPLACE\", \"COPY\"],\n        },\n    },\n};\nexport const comp15 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"copy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copyActionAbortConstant = {\n    parameterPath: \"copyActionAbortConstant\",\n    mapper: {\n        defaultValue: \"abort\",\n        isConstant: true,\n        serializedName: \"x-ms-copy-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copyId = {\n    parameterPath: \"copyId\",\n    mapper: {\n        serializedName: \"copyid\",\n        required: true,\n        xmlName: \"copyid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp16 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tier\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const tier1 = {\n    parameterPath: \"tier\",\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        required: true,\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nexport const queryRequest = {\n    parameterPath: [\"options\", \"queryRequest\"],\n    mapper: QueryRequestMapper,\n};\nexport const comp17 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"query\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp18 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tags\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const tags = {\n    parameterPath: [\"options\", \"tags\"],\n    mapper: BlobTagsMapper,\n};\nexport const transactionalContentMD5 = {\n    parameterPath: [\"options\", \"transactionalContentMD5\"],\n    mapper: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const transactionalContentCrc64 = {\n    parameterPath: [\"options\", \"transactionalContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const blobType = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"PageBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobContentLength = {\n    parameterPath: \"blobContentLength\",\n    mapper: {\n        serializedName: \"x-ms-blob-content-length\",\n        required: true,\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const blobSequenceNumber = {\n    parameterPath: [\"options\", \"blobSequenceNumber\"],\n    mapper: {\n        defaultValue: 0,\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const contentType1 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const body1 = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nexport const accept2 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp19 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"page\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const pageWrite = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"update\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const ifSequenceNumberLessThanOrEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThanOrEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-le\",\n        xmlName: \"x-ms-if-sequence-number-le\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const ifSequenceNumberLessThan = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThan\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-lt\",\n        xmlName: \"x-ms-if-sequence-number-lt\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const ifSequenceNumberEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-eq\",\n        xmlName: \"x-ms-if-sequence-number-eq\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const pageWrite1 = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"clear\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceUrl = {\n    parameterPath: \"sourceUrl\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceRange = {\n    parameterPath: \"sourceRange\",\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        required: true,\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sourceContentCrc64 = {\n    parameterPath: [\"options\", \"sourceContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-crc64\",\n        xmlName: \"x-ms-source-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nexport const range1 = {\n    parameterPath: \"range\",\n    mapper: {\n        serializedName: \"x-ms-range\",\n        required: true,\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp20 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"pagelist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const prevsnapshot = {\n    parameterPath: [\"options\", \"prevsnapshot\"],\n    mapper: {\n        serializedName: \"prevsnapshot\",\n        xmlName: \"prevsnapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const prevSnapshotUrl = {\n    parameterPath: [\"options\", \"prevSnapshotUrl\"],\n    mapper: {\n        serializedName: \"x-ms-previous-snapshot-url\",\n        xmlName: \"x-ms-previous-snapshot-url\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const sequenceNumberAction = {\n    parameterPath: \"sequenceNumberAction\",\n    mapper: {\n        serializedName: \"x-ms-sequence-number-action\",\n        required: true,\n        xmlName: \"x-ms-sequence-number-action\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"max\", \"update\", \"increment\"],\n        },\n    },\n};\nexport const comp21 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"incrementalcopy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobType1 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"AppendBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp22 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"appendblock\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const maxSize = {\n    parameterPath: [\"options\", \"appendPositionAccessConditions\", \"maxSize\"],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-maxsize\",\n        xmlName: \"x-ms-blob-condition-maxsize\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const appendPosition = {\n    parameterPath: [\n        \"options\",\n        \"appendPositionAccessConditions\",\n        \"appendPosition\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-appendpos\",\n        xmlName: \"x-ms-blob-condition-appendpos\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nexport const sourceRange1 = {\n    parameterPath: [\"options\", \"sourceRange\"],\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const comp23 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"seal\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blobType2 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"BlockBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const copySourceBlobProperties = {\n    parameterPath: [\"options\", \"copySourceBlobProperties\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-blob-properties\",\n        xmlName: \"x-ms-copy-source-blob-properties\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nexport const comp24 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"block\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blockId = {\n    parameterPath: \"blockId\",\n    mapper: {\n        serializedName: \"blockid\",\n        required: true,\n        xmlName: \"blockid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const blocks = {\n    parameterPath: \"blocks\",\n    mapper: BlockLookupListMapper,\n};\nexport const comp25 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blocklist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nexport const listType = {\n    parameterPath: \"listType\",\n    mapper: {\n        defaultValue: \"committed\",\n        serializedName: \"blocklisttype\",\n        required: true,\n        xmlName: \"blocklisttype\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"committed\", \"uncommitted\", \"all\"],\n        },\n    },\n};\n//# sourceMappingURL=parameters.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing Service operations. */\nexport class ServiceImpl {\n    /**\n     * Initialize a new instance of the class Service class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n     * Analytics and CORS (Cross-Origin Resource Sharing) rules\n     * @param blobServiceProperties The StorageService properties.\n     * @param options The options parameters.\n     */\n    setProperties(blobServiceProperties, options) {\n        return this.client.sendOperationRequest({ blobServiceProperties, options }, setPropertiesOperationSpec);\n    }\n    /**\n     * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n     * and CORS (Cross-Origin Resource Sharing) rules.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only available on the\n     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n     * account.\n     * @param options The options parameters.\n     */\n    getStatistics(options) {\n        return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);\n    }\n    /**\n     * The List Containers Segment operation returns a list of the containers under the specified account\n     * @param options The options parameters.\n     */\n    listContainersSegment(options) {\n        return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);\n    }\n    /**\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     * @param keyInfo Key information\n     * @param options The options parameters.\n     */\n    getUserDelegationKey(keyInfo, options) {\n        return this.client.sendOperationRequest({ keyInfo, options }, getUserDelegationKeyOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n     * given search expression.  Filter blobs searches across all containers within a storage account but\n     * can be scoped within the expression to a single container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst setPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ServiceSetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.blobServiceProperties,\n    queryParameters: [\n        Parameters.restype,\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlobServiceProperties,\n            headersMapper: Mappers.ServiceGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.restype,\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getStatisticsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlobServiceStatistics,\n            headersMapper: Mappers.ServiceGetStatisticsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.restype,\n        Parameters.timeoutInSeconds,\n        Parameters.comp1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listContainersSegmentOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListContainersSegmentResponse,\n            headersMapper: Mappers.ServiceListContainersSegmentHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp2,\n        Parameters.prefix,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.include,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getUserDelegationKeyOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.UserDelegationKey,\n            headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.keyInfo,\n    queryParameters: [\n        Parameters.restype,\n        Parameters.timeoutInSeconds,\n        Parameters.comp3,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ServiceGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n        Parameters.restype1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.ServiceSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.FilterBlobSegment,\n            headersMapper: Mappers.ServiceFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.comp5,\n        Parameters.where,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=service.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing Container operations. */\nexport class ContainerImpl {\n    /**\n     * Initialize a new instance of the class Container class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * creates a new container under the specified account. If the container with the same name already\n     * exists, the operation fails\n     * @param options The options parameters.\n     */\n    create(options) {\n        return this.client.sendOperationRequest({ options }, createOperationSpec);\n    }\n    /**\n     * returns all user-defined metadata and system properties for the specified container. The data\n     * returned does not include the container's list of blobs\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * operation marks the specified container for deletion. The container and any blobs contained within\n     * it are later deleted during garbage collection\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * operation sets one or more user-defined name-value pairs for the specified container.\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * gets the permissions for the specified container. The permissions indicate whether container data\n     * may be accessed publicly.\n     * @param options The options parameters.\n     */\n    getAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);\n    }\n    /**\n     * sets the permissions for the specified container. The permissions indicate whether blobs in a\n     * container may be accessed publicly.\n     * @param options The options parameters.\n     */\n    setAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);\n    }\n    /**\n     * Restores a previously-deleted container.\n     * @param options The options parameters.\n     */\n    restore(options) {\n        return this.client.sendOperationRequest({ options }, restoreOperationSpec);\n    }\n    /**\n     * Renames an existing container.\n     * @param sourceContainerName Required.  Specifies the name of the container to rename.\n     * @param options The options parameters.\n     */\n    rename(sourceContainerName, options) {\n        return this.client.sendOperationRequest({ sourceContainerName, options }, renameOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n     * search expression.  Filter blobs searches within the given container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param options The options parameters.\n     */\n    listBlobFlatSegment(options) {\n        return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n     *                  character or a string.\n     * @param options The options parameters.\n     */\n    listBlobHierarchySegment(delimiter, options) {\n        return this.client.sendOperationRequest({ delimiter, options }, listBlobHierarchySegmentOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.ContainerCreateHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.access,\n        Parameters.defaultEncryptionScope,\n        Parameters.preventEncryptionScopeOverride,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ContainerDeleteHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp6,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: { name: \"Composite\", className: \"SignedIdentifier\" },\n                    },\n                },\n                serializedName: \"SignedIdentifiers\",\n                xmlName: \"SignedIdentifiers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"SignedIdentifier\",\n            },\n            headersMapper: Mappers.ContainerGetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp7,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerSetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.containerAcl,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp7,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.access,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst restoreOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.ContainerRestoreHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerRestoreExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp8,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.deletedContainerName,\n        Parameters.deletedContainerVersion,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renameOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerRenameHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerRenameExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp9,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.sourceContainerName,\n        Parameters.sourceLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.ContainerSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp4,\n        Parameters.restype2,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.FilterBlobSegment,\n            headersMapper: Mappers.ContainerFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.comp5,\n        Parameters.where,\n        Parameters.restype2,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.ContainerAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action,\n        Parameters.duration,\n        Parameters.proposedLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action1,\n        Parameters.leaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action2,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.ContainerBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action3,\n        Parameters.breakPeriod,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.restype2,\n        Parameters.comp10,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action4,\n        Parameters.proposedLeaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobFlatSegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n            headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp2,\n        Parameters.prefix,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.restype2,\n        Parameters.include1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobHierarchySegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n            headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp2,\n        Parameters.prefix,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.restype2,\n        Parameters.include1,\n        Parameters.delimiter,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.ContainerGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n        Parameters.restype1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=container.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing Blob operations. */\nexport class BlobImpl {\n    /**\n     * Initialize a new instance of the class Blob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Download operation reads or downloads a blob from the system, including its metadata and\n     * properties. You can also call Download to read a snapshot.\n     * @param options The options parameters.\n     */\n    download(options) {\n        return this.client.sendOperationRequest({ options }, downloadOperationSpec);\n    }\n    /**\n     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n     * properties for the blob. It does not return the content of the blob.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n     * permanently removed from the storage account. If the storage account's soft delete feature is\n     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n     * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n     * by the DeleteRetentionPolicy section of [Storage service properties]\n     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n     * permanently removed from the storage account. Note that you continue to be charged for the\n     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n     * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n     * (ResourceNotFound).\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * Undelete a blob that was previously soft deleted\n     * @param options The options parameters.\n     */\n    undelete(options) {\n        return this.client.sendOperationRequest({ options }, undeleteOperationSpec);\n    }\n    /**\n     * Sets the time a blob will expire and be deleted.\n     * @param expiryOptions Required. Indicates mode of the expiry time\n     * @param options The options parameters.\n     */\n    setExpiry(expiryOptions, options) {\n        return this.client.sendOperationRequest({ expiryOptions, options }, setExpiryOperationSpec);\n    }\n    /**\n     * The Set HTTP Headers operation sets system properties on the blob\n     * @param options The options parameters.\n     */\n    setHttpHeaders(options) {\n        return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);\n    }\n    /**\n     * The Set Immutability Policy operation sets the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    setImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Delete Immutability Policy operation deletes the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    deleteImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Set Legal Hold operation sets a legal hold on the blob.\n     * @param legalHold Specified if a legal hold should be set on the blob.\n     * @param options The options parameters.\n     */\n    setLegalHold(legalHold, options) {\n        return this.client.sendOperationRequest({ legalHold, options }, setLegalHoldOperationSpec);\n    }\n    /**\n     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n     * name-value pairs\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * The Create Snapshot operation creates a read-only snapshot of a blob\n     * @param options The options parameters.\n     */\n    createSnapshot(options) {\n        return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);\n    }\n    /**\n     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    startCopyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, startCopyFromURLOperationSpec);\n    }\n    /**\n     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n     * a response until the copy is complete.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyFromURLOperationSpec);\n    }\n    /**\n     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n     * blob with zero length and full metadata.\n     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n     *               operation.\n     * @param options The options parameters.\n     */\n    abortCopyFromURL(copyId, options) {\n        return this.client.sendOperationRequest({ copyId, options }, abortCopyFromURLOperationSpec);\n    }\n    /**\n     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n     * ETag.\n     * @param tier Indicates the tier to be set on the blob.\n     * @param options The options parameters.\n     */\n    setTier(tier, options) {\n        return this.client.sendOperationRequest({ tier, options }, setTierOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Query operation enables users to select/project on blob data by providing simple query\n     * expressions.\n     * @param options The options parameters.\n     */\n    query(options) {\n        return this.client.sendOperationRequest({ options }, queryOperationSpec);\n    }\n    /**\n     * The Get Tags operation enables users to get the tags associated with a blob.\n     * @param options The options parameters.\n     */\n    getTags(options) {\n        return this.client.sendOperationRequest({ options }, getTagsOperationSpec);\n    }\n    /**\n     * The Set Tags operation enables users to set tags on a blob.\n     * @param options The options parameters.\n     */\n    setTags(options) {\n        return this.client.sendOperationRequest({ options }, setTagsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst downloadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobDownloadHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobDownloadHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobDownloadExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.rangeGetContentMD5,\n        Parameters.rangeGetContentCRC64,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobDeleteHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.blobDeleteType,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.deleteSnapshots,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst undeleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobUndeleteHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobUndeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setExpiryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetExpiryHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetExpiryExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.expiryOptions,\n        Parameters.expiresOn,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setHttpHeadersOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetHttpHeadersHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifUnmodifiedSince,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setLegalHoldOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetLegalHoldHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.legalHold,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlobAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action,\n        Parameters.duration,\n        Parameters.proposedLeaseId,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action1,\n        Parameters.leaseId1,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action2,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.leaseId1,\n        Parameters.action4,\n        Parameters.proposedLeaseId1,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.action3,\n        Parameters.breakPeriod,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst createSnapshotOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlobCreateSnapshotHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst startCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobStartCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.tier,\n        Parameters.rehydratePriority,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceIfTags,\n        Parameters.copySource,\n        Parameters.blobTagsString,\n        Parameters.sealBlob,\n        Parameters.legalHold1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.BlobCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.copySource,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.xMsRequiresSync,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.copySourceTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst abortCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: Mappers.BlobAbortCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp15,\n        Parameters.copyId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.copyActionAbortConstant,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTierOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobSetTierHeaders,\n        },\n        202: {\n            headersMapper: Mappers.BlobSetTierHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetTierExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp16,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifTags,\n        Parameters.rehydratePriority,\n        Parameters.tier1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: Mappers.BlobGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.comp,\n        Parameters.timeoutInSeconds,\n        Parameters.restype1,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst queryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobQueryHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: Mappers.BlobQueryHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobQueryExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.queryRequest,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.comp17,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlobTags,\n            headersMapper: Mappers.BlobGetTagsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobGetTagsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.versionId,\n        Parameters.comp18,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: Mappers.BlobSetTagsHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlobSetTagsExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.tags,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.versionId,\n        Parameters.comp18,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.leaseId,\n        Parameters.ifTags,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing PageBlob operations. */\nexport class PageBlobImpl {\n    /**\n     * Initialize a new instance of the class PageBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create operation creates a new page blob.\n     * @param contentLength The length of the request.\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    create(contentLength, blobContentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, blobContentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    uploadPages(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadPagesOperationSpec);\n    }\n    /**\n     * The Clear Pages operation clears a set of pages from a page blob\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    clearPages(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, clearPagesOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n     * URL\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param sourceRange Bytes of source data in the specified range. The length of this range should\n     *                    match the ContentLength header and x-ms-range/Range destination range header.\n     * @param contentLength The length of the request.\n     * @param range The range of bytes to which the source range would be written. The range should be 512\n     *              aligned and range-end is required.\n     * @param options The options parameters.\n     */\n    uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n        return this.client.sendOperationRequest({ sourceUrl, sourceRange, contentLength, range, options }, uploadPagesFromURLOperationSpec);\n    }\n    /**\n     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n     * page blob\n     * @param options The options parameters.\n     */\n    getPageRanges(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);\n    }\n    /**\n     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n     * changed between target blob and previous snapshot.\n     * @param options The options parameters.\n     */\n    getPageRangesDiff(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);\n    }\n    /**\n     * Resize the Blob\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    resize(blobContentLength, options) {\n        return this.client.sendOperationRequest({ blobContentLength, options }, resizeOperationSpec);\n    }\n    /**\n     * Update the sequence number of the blob\n     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n     *                             This property applies to page blobs only. This property indicates how the service should modify the\n     *                             blob's sequence number\n     * @param options The options parameters.\n     */\n    updateSequenceNumber(sequenceNumberAction, options) {\n        return this.client.sendOperationRequest({ sequenceNumberAction, options }, updateSequenceNumberOperationSpec);\n    }\n    /**\n     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n     * The snapshot is copied such that only the differential changes between the previously copied\n     * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n     * original snapshot and can be read or copied from as usual. This API is supported since REST version\n     * 2016-05-31.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyIncremental(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyIncrementalOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.blobType,\n        Parameters.blobContentLength,\n        Parameters.blobSequenceNumber,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobUploadPagesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n        Parameters.pageWrite,\n        Parameters.ifSequenceNumberLessThanOrEqualTo,\n        Parameters.ifSequenceNumberLessThan,\n        Parameters.ifSequenceNumberEqualTo,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst clearPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobClearPagesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobClearPagesExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.ifSequenceNumberLessThanOrEqualTo,\n        Parameters.ifSequenceNumberLessThan,\n        Parameters.ifSequenceNumberEqualTo,\n        Parameters.pageWrite1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.pageWrite,\n        Parameters.ifSequenceNumberLessThanOrEqualTo,\n        Parameters.ifSequenceNumberLessThan,\n        Parameters.ifSequenceNumberEqualTo,\n        Parameters.sourceUrl,\n        Parameters.sourceRange,\n        Parameters.sourceContentCrc64,\n        Parameters.range1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.PageList,\n            headersMapper: Mappers.PageBlobGetPageRangesHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.snapshot,\n        Parameters.comp20,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesDiffOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.PageList,\n            headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.marker,\n        Parameters.maxPageSize,\n        Parameters.snapshot,\n        Parameters.comp20,\n        Parameters.prevsnapshot,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.range,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.prevSnapshotUrl,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst resizeOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.PageBlobResizeHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobResizeExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.blobContentLength,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst updateSequenceNumberOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobSequenceNumber,\n        Parameters.sequenceNumberAction,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyIncrementalOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: Mappers.PageBlobCopyIncrementalHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.copySource,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=pageBlob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing AppendBlob operations. */\nexport class AppendBlobImpl {\n    /**\n     * Initialize a new instance of the class AppendBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create Append Blob operation creates a new append blob.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    create(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob. The\n     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    appendBlock(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, appendBlockOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob where\n     * the contents are read from a source url. The Append Block operation is permitted only if the blob\n     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n     * 2015-02-21 version or later.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    appendBlockFromUrl(sourceUrl, contentLength, options) {\n        return this.client.sendOperationRequest({ sourceUrl, contentLength, options }, appendBlockFromUrlOperationSpec);\n    }\n    /**\n     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n     * 2019-12-12 version or later.\n     * @param options The options parameters.\n     */\n    seal(options) {\n        return this.client.sendOperationRequest({ options }, sealOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.AppendBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.blobType1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst appendBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.AppendBlobAppendBlockHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n        Parameters.maxSize,\n        Parameters.appendPosition,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst appendBlockFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.encryptionScope,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.transactionalContentMD5,\n        Parameters.sourceUrl,\n        Parameters.sourceContentCrc64,\n        Parameters.maxSize,\n        Parameters.appendPosition,\n        Parameters.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst sealOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: Mappers.AppendBlobSealHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.AppendBlobSealExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.appendPosition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=appendBlob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing BlockBlob operations. */\nexport class BlockBlobImpl {\n    /**\n     * Initialize a new instance of the class BlockBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n     * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n     * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n     * partial update of the content of a block blob, use the Put Block List operation.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    upload(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadOperationSpec);\n    }\n    /**\n     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,\n     * use the Put Block from URL API in conjunction with Put Block List.\n     * @param contentLength The length of the request.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    putBlobFromUrl(contentLength, copySource, options) {\n        return this.client.sendOperationRequest({ contentLength, copySource, options }, putBlobFromUrlOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    stageBlock(blockId, contentLength, body, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, body, options }, stageBlockOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n     * are read from a URL.\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param options The options parameters.\n     */\n    stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, sourceUrl, options }, stageBlockFromURLOperationSpec);\n    }\n    /**\n     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n     * blob. In order to be written as part of a blob, a block must have been successfully written to the\n     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n     * only those blocks that have changed, then committing the new and existing blocks together. You can\n     * do this by specifying whether to commit a block from the committed block list or from the\n     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n     * it may belong to.\n     * @param blocks Blob Blocks.\n     * @param options The options parameters.\n     */\n    commitBlockList(blocks, options) {\n        return this.client.sendOperationRequest({ blocks, options }, commitBlockListOperationSpec);\n    }\n    /**\n     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n     * blob\n     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n     *                 blocks, or both lists together.\n     * @param options The options parameters.\n     */\n    getBlockList(listType, options) {\n        return this.client.sendOperationRequest({ listType, options }, getBlockListOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\nconst uploadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobUploadHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobUploadExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n        Parameters.blobType2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst putBlobFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [Parameters.timeoutInSeconds],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceIfTags,\n        Parameters.copySource,\n        Parameters.blobTagsString,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.copySourceTags,\n        Parameters.transactionalContentMD5,\n        Parameters.blobType2,\n        Parameters.copySourceBlobProperties,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst stageBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobStageBlockHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.body1,\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp24,\n        Parameters.blockId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.encryptionScope,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n        Parameters.contentType1,\n        Parameters.accept2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst stageBlockFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.comp24,\n        Parameters.blockId,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.contentLength,\n        Parameters.leaseId,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.encryptionScope,\n        Parameters.sourceIfModifiedSince,\n        Parameters.sourceIfUnmodifiedSince,\n        Parameters.sourceIfMatch,\n        Parameters.sourceIfNoneMatch,\n        Parameters.sourceContentMD5,\n        Parameters.copySourceAuthorization,\n        Parameters.sourceUrl,\n        Parameters.sourceContentCrc64,\n        Parameters.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst commitBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: Mappers.BlockBlobCommitBlockListHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders,\n        },\n    },\n    requestBody: Parameters.blocks,\n    queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.contentType,\n        Parameters.accept,\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.metadata,\n        Parameters.leaseId,\n        Parameters.ifModifiedSince,\n        Parameters.ifUnmodifiedSince,\n        Parameters.encryptionKey,\n        Parameters.encryptionKeySha256,\n        Parameters.encryptionAlgorithm,\n        Parameters.ifMatch,\n        Parameters.ifNoneMatch,\n        Parameters.ifTags,\n        Parameters.blobCacheControl,\n        Parameters.blobContentType,\n        Parameters.blobContentMD5,\n        Parameters.blobContentEncoding,\n        Parameters.blobContentLanguage,\n        Parameters.blobContentDisposition,\n        Parameters.immutabilityPolicyExpiry,\n        Parameters.immutabilityPolicyMode,\n        Parameters.encryptionScope,\n        Parameters.tier,\n        Parameters.blobTagsString,\n        Parameters.legalHold1,\n        Parameters.transactionalContentMD5,\n        Parameters.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Mappers.BlockList,\n            headersMapper: Mappers.BlockBlobGetBlockListHeaders,\n        },\n        default: {\n            bodyMapper: Mappers.StorageError,\n            headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        Parameters.timeoutInSeconds,\n        Parameters.snapshot,\n        Parameters.comp25,\n        Parameters.listType,\n    ],\n    urlParameters: [Parameters.url],\n    headerParameters: [\n        Parameters.version,\n        Parameters.requestId,\n        Parameters.accept1,\n        Parameters.leaseId,\n        Parameters.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blockBlob.js.map","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttpCompat from \"@azure/core-http-compat\";\nimport { ServiceImpl, ContainerImpl, BlobImpl, PageBlobImpl, AppendBlobImpl, BlockBlobImpl, } from \"./operations\";\nexport class StorageClient extends coreHttpCompat.ExtendedServiceClient {\n    /**\n     * Initializes a new instance of the StorageClient class.\n     * @param url The URL of the service account, container, or blob that is the target of the desired\n     *            operation.\n     * @param options The parameter options\n     */\n    constructor(url, options) {\n        var _a, _b;\n        if (url === undefined) {\n            throw new Error(\"'url' cannot be null\");\n        }\n        // Initializing default values for options\n        if (!options) {\n            options = {};\n        }\n        const defaults = {\n            requestContentType: \"application/json; charset=utf-8\",\n        };\n        const packageDetails = `azsdk-js-azure-storage-blob/12.24.0`;\n        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {\n                userAgentPrefix,\n            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{url}\" });\n        super(optionsWithDefaults);\n        // Parameter assignments\n        this.url = url;\n        // Assigning values to Constant parameters\n        this.version = options.version || \"2024-08-04\";\n        this.service = new ServiceImpl(this);\n        this.container = new ContainerImpl(this);\n        this.blob = new BlobImpl(this);\n        this.pageBlob = new PageBlobImpl(this);\n        this.appendBlob = new AppendBlobImpl(this);\n        this.blockBlob = new BlockBlobImpl(this);\n    }\n}\n//# sourceMappingURL=storageClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageClient } from \"./generated/src\";\n/**\n * @internal\n */\nexport class StorageContextClient extends StorageClient {\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const operationSpecToSend = Object.assign({}, operationSpec);\n        if (operationSpecToSend.path === \"/{containerName}\" ||\n            operationSpecToSend.path === \"/{containerName}/{blob}\") {\n            operationSpecToSend.path = \"\";\n        }\n        return super.sendOperationRequest(operationArguments, operationSpecToSend);\n    }\n}\n//# sourceMappingURL=StorageContextClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageContextClient } from \"./StorageContextClient\";\nimport { getCoreClientOptions, getCredentialFromPipeline } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport class StorageClient {\n    /**\n     * Creates an instance of StorageClient.\n     * @param url - url to resource\n     * @param pipeline - request policy pipeline.\n     */\n    constructor(url, pipeline) {\n        // URL should be encoded and only once, protocol layer shouldn't encode URL again\n        this.url = escapeURLPath(url);\n        this.accountName = getAccountNameFromUrl(url);\n        this.pipeline = pipeline;\n        this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline));\n        this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n        this.credential = getCredentialFromPipeline(pipeline);\n        // Override protocol layer's default content-type\n        const storageClientContext = this.storageClientContext;\n        storageClientContext.requestContentType = undefined;\n    }\n}\n//# sourceMappingURL=StorageClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const tracingClient = createTracingClient({\n    packageName: \"@azure/storage-blob\",\n    packageVersion: SDK_VERSION,\n    namespace: \"Microsoft.Storage\",\n});\n//# sourceMappingURL=tracing.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const blobSASPermissions = new BlobSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    blobSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    blobSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    blobSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    blobSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    blobSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    blobSASPermissions.deleteVersion = true;\n                    break;\n                case \"t\":\n                    blobSASPermissions.tag = true;\n                    break;\n                case \"m\":\n                    blobSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    blobSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    blobSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    blobSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission: ${char}`);\n            }\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const blobSASPermissions = new BlobSASPermissions();\n        if (permissionLike.read) {\n            blobSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            blobSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            blobSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            blobSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            blobSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            blobSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            blobSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            blobSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            blobSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            blobSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            blobSASPermissions.permanentDelete = true;\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * @returns A string which represents the BlobSASPermissions\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=BlobSASPermissions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specifies List access granted.\n         */\n        this.list = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n        /**\n         * Specifies that Filter Blobs by Tags is permitted.\n         */\n        this.filterByTags = false;\n    }\n    /**\n     * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    containerSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    containerSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    containerSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    containerSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    containerSASPermissions.delete = true;\n                    break;\n                case \"l\":\n                    containerSASPermissions.list = true;\n                    break;\n                case \"t\":\n                    containerSASPermissions.tag = true;\n                    break;\n                case \"x\":\n                    containerSASPermissions.deleteVersion = true;\n                    break;\n                case \"m\":\n                    containerSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    containerSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    containerSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    containerSASPermissions.permanentDelete = true;\n                    break;\n                case \"f\":\n                    containerSASPermissions.filterByTags = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission ${char}`);\n            }\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        if (permissionLike.read) {\n            containerSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            containerSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            containerSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            containerSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            containerSASPermissions.delete = true;\n        }\n        if (permissionLike.list) {\n            containerSASPermissions.list = true;\n        }\n        if (permissionLike.deleteVersion) {\n            containerSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            containerSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            containerSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            containerSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            containerSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            containerSASPermissions.permanentDelete = true;\n        }\n        if (permissionLike.filterByTags) {\n            containerSASPermissions.filterByTags = true;\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * The order of the characters should be as specified here to ensure correctness.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        if (this.filterByTags) {\n            permissions.push(\"f\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=ContainerSASPermissions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHmac } from \"crypto\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * UserDelegationKeyCredential is only used for generation of user delegation SAS.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-user-delegation-sas\n */\nexport class UserDelegationKeyCredential {\n    /**\n     * Creates an instance of UserDelegationKeyCredential.\n     * @param accountName -\n     * @param userDelegationKey -\n     */\n    constructor(accountName, userDelegationKey) {\n        this.accountName = accountName;\n        this.userDelegationKey = userDelegationKey;\n        this.key = Buffer.from(userDelegationKey.value, \"base64\");\n    }\n    /**\n     * Generates a hash signature for an HTTP request or for a SAS.\n     *\n     * @param stringToSign -\n     */\n    computeHMACSHA256(stringToSign) {\n        // console.log(`stringToSign: ${JSON.stringify(stringToSign)}`);\n        return createHmac(\"sha256\", this.key).update(stringToSign, \"utf8\").digest(\"base64\");\n    }\n}\n//# sourceMappingURL=UserDelegationKeyCredential.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ipRangeToString } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n/**\n * Protocols for generated SAS.\n */\nexport var SASProtocol;\n(function (SASProtocol) {\n    /**\n     * Protocol that allows HTTPS only\n     */\n    SASProtocol[\"Https\"] = \"https\";\n    /**\n     * Protocol that allows both HTTPS and HTTP\n     */\n    SASProtocol[\"HttpsAndHttp\"] = \"https,http\";\n})(SASProtocol || (SASProtocol = {}));\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nexport class SASQueryParameters {\n    /**\n     * Optional. IP range allowed for this SAS.\n     *\n     * @readonly\n     */\n    get ipRange() {\n        if (this.ipRangeInner) {\n            return {\n                end: this.ipRangeInner.end,\n                start: this.ipRangeInner.start,\n            };\n        }\n        return undefined;\n    }\n    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {\n        this.version = version;\n        this.signature = signature;\n        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n            // SASQueryParametersOptions\n            this.permissions = permissionsOrOptions.permissions;\n            this.services = permissionsOrOptions.services;\n            this.resourceTypes = permissionsOrOptions.resourceTypes;\n            this.protocol = permissionsOrOptions.protocol;\n            this.startsOn = permissionsOrOptions.startsOn;\n            this.expiresOn = permissionsOrOptions.expiresOn;\n            this.ipRangeInner = permissionsOrOptions.ipRange;\n            this.identifier = permissionsOrOptions.identifier;\n            this.encryptionScope = permissionsOrOptions.encryptionScope;\n            this.resource = permissionsOrOptions.resource;\n            this.cacheControl = permissionsOrOptions.cacheControl;\n            this.contentDisposition = permissionsOrOptions.contentDisposition;\n            this.contentEncoding = permissionsOrOptions.contentEncoding;\n            this.contentLanguage = permissionsOrOptions.contentLanguage;\n            this.contentType = permissionsOrOptions.contentType;\n            if (permissionsOrOptions.userDelegationKey) {\n                this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n                this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n                this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n                this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n                this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n                this.correlationId = permissionsOrOptions.correlationId;\n            }\n        }\n        else {\n            this.services = services;\n            this.resourceTypes = resourceTypes;\n            this.expiresOn = expiresOn;\n            this.permissions = permissionsOrOptions;\n            this.protocol = protocol;\n            this.startsOn = startsOn;\n            this.ipRangeInner = ipRange;\n            this.encryptionScope = encryptionScope;\n            this.identifier = identifier;\n            this.resource = resource;\n            this.cacheControl = cacheControl;\n            this.contentDisposition = contentDisposition;\n            this.contentEncoding = contentEncoding;\n            this.contentLanguage = contentLanguage;\n            this.contentType = contentType;\n            if (userDelegationKey) {\n                this.signedOid = userDelegationKey.signedObjectId;\n                this.signedTenantId = userDelegationKey.signedTenantId;\n                this.signedStartsOn = userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n                this.signedService = userDelegationKey.signedService;\n                this.signedVersion = userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n                this.correlationId = correlationId;\n            }\n        }\n    }\n    /**\n     * Encodes all SAS query parameters into a string that can be appended to a URL.\n     *\n     */\n    toString() {\n        const params = [\n            \"sv\",\n            \"ss\",\n            \"srt\",\n            \"spr\",\n            \"st\",\n            \"se\",\n            \"sip\",\n            \"si\",\n            \"ses\",\n            \"skoid\", // Signed object ID\n            \"sktid\", // Signed tenant ID\n            \"skt\", // Signed key start time\n            \"ske\", // Signed key expiry time\n            \"sks\", // Signed key service\n            \"skv\", // Signed key version\n            \"sr\",\n            \"sp\",\n            \"sig\",\n            \"rscc\",\n            \"rscd\",\n            \"rsce\",\n            \"rscl\",\n            \"rsct\",\n            \"saoid\",\n            \"scid\",\n        ];\n        const queries = [];\n        for (const param of params) {\n            switch (param) {\n                case \"sv\":\n                    this.tryAppendQueryParameter(queries, param, this.version);\n                    break;\n                case \"ss\":\n                    this.tryAppendQueryParameter(queries, param, this.services);\n                    break;\n                case \"srt\":\n                    this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n                    break;\n                case \"spr\":\n                    this.tryAppendQueryParameter(queries, param, this.protocol);\n                    break;\n                case \"st\":\n                    this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined);\n                    break;\n                case \"se\":\n                    this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined);\n                    break;\n                case \"sip\":\n                    this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : undefined);\n                    break;\n                case \"si\":\n                    this.tryAppendQueryParameter(queries, param, this.identifier);\n                    break;\n                case \"ses\":\n                    this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n                    break;\n                case \"skoid\": // Signed object ID\n                    this.tryAppendQueryParameter(queries, param, this.signedOid);\n                    break;\n                case \"sktid\": // Signed tenant ID\n                    this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n                    break;\n                case \"skt\": // Signed key start time\n                    this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined);\n                    break;\n                case \"ske\": // Signed key expiry time\n                    this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined);\n                    break;\n                case \"sks\": // Signed key service\n                    this.tryAppendQueryParameter(queries, param, this.signedService);\n                    break;\n                case \"skv\": // Signed key version\n                    this.tryAppendQueryParameter(queries, param, this.signedVersion);\n                    break;\n                case \"sr\":\n                    this.tryAppendQueryParameter(queries, param, this.resource);\n                    break;\n                case \"sp\":\n                    this.tryAppendQueryParameter(queries, param, this.permissions);\n                    break;\n                case \"sig\":\n                    this.tryAppendQueryParameter(queries, param, this.signature);\n                    break;\n                case \"rscc\":\n                    this.tryAppendQueryParameter(queries, param, this.cacheControl);\n                    break;\n                case \"rscd\":\n                    this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n                    break;\n                case \"rsce\":\n                    this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n                    break;\n                case \"rscl\":\n                    this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n                    break;\n                case \"rsct\":\n                    this.tryAppendQueryParameter(queries, param, this.contentType);\n                    break;\n                case \"saoid\":\n                    this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n                    break;\n                case \"scid\":\n                    this.tryAppendQueryParameter(queries, param, this.correlationId);\n                    break;\n            }\n        }\n        return queries.join(\"&\");\n    }\n    /**\n     * A private helper method used to filter and append query key/value pairs into an array.\n     *\n     * @param queries -\n     * @param key -\n     * @param value -\n     */\n    tryAppendQueryParameter(queries, key, value) {\n        if (!value) {\n            return;\n        }\n        key = encodeURIComponent(key);\n        value = encodeURIComponent(value);\n        if (key.length > 0 && value.length > 0) {\n            queries.push(`${key}=${value}`);\n        }\n    }\n}\n//# sourceMappingURL=SASQueryParameters.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { randomUUID } from \"@azure/core-util\";\nimport { ETagNone } from \"./utils/constants\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { assertResponse } from \"./utils/utils.common\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     */\n    get leaseId() {\n        return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Creates an instance of BlobLeaseClient.\n     * @param client - The client to make the lease operation requests.\n     * @param leaseId - Initial proposed lease id.\n     */\n    constructor(client, leaseId) {\n        const clientContext = client.storageClientContext;\n        this._url = client.url;\n        if (client.name === undefined) {\n            this._isContainer = true;\n            this._containerOrBlobOperation = clientContext.container;\n        }\n        else {\n            this._isContainer = false;\n            this._containerOrBlobOperation = clientContext.blob;\n        }\n        if (!leaseId) {\n            leaseId = randomUUID();\n        }\n        this._leaseId = leaseId;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n    async acquireLease(duration, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-acquireLease\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this._containerOrBlobOperation.acquireLease({\n                abortSignal: options.abortSignal,\n                duration,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                proposedLeaseId: this._leaseId,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n    async changeLease(proposedLeaseId, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-changeLease\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            this._leaseId = proposedLeaseId;\n            return response;\n        });\n    }\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n    async releaseLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-releaseLease\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n    async renewLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async (updatedOptions) => {\n            var _a;\n            return this._containerOrBlobOperation.renewLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            });\n        });\n    }\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n    async breakLease(breakPeriod, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async (updatedOptions) => {\n            var _a;\n            const operationOptions = {\n                abortSignal: options.abortSignal,\n                breakPeriod,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            };\n            return assertResponse(await this._containerOrBlobOperation.breakLease(operationOptions));\n        });\n    }\n}\n//# sourceMappingURL=BlobLeaseClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Readable } from \"stream\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js ReadableStream will internally retry when internal ReadableStream unexpected ends.\n */\nexport class RetriableReadableStream extends Readable {\n    /**\n     * Creates an instance of RetriableReadableStream.\n     *\n     * @param source - The current ReadableStream returned from getter\n     * @param getter - A method calling downloading request returning\n     *                                      a new ReadableStream from specified offset\n     * @param offset - Offset position in original data source to read\n     * @param count - How much data in original data source to read\n     * @param options -\n     */\n    constructor(source, getter, offset, count, options = {}) {\n        super({ highWaterMark: options.highWaterMark });\n        this.retries = 0;\n        this.sourceDataHandler = (data) => {\n            if (this.options.doInjectErrorOnce) {\n                this.options.doInjectErrorOnce = undefined;\n                this.source.pause();\n                this.sourceErrorOrEndHandler();\n                this.source.destroy();\n                return;\n            }\n            // console.log(\n            //   `Offset: ${this.offset}, Received ${data.length} from internal stream`\n            // );\n            this.offset += data.length;\n            if (this.onProgress) {\n                this.onProgress({ loadedBytes: this.offset - this.start });\n            }\n            if (!this.push(data)) {\n                this.source.pause();\n            }\n        };\n        this.sourceAbortedHandler = () => {\n            const abortError = new AbortError(\"The operation was aborted.\");\n            this.destroy(abortError);\n        };\n        this.sourceErrorOrEndHandler = (err) => {\n            if (err && err.name === \"AbortError\") {\n                this.destroy(err);\n                return;\n            }\n            // console.log(\n            //   `Source stream emits end or error, offset: ${\n            //     this.offset\n            //   }, dest end : ${this.end}`\n            // );\n            this.removeSourceEventHandlers();\n            if (this.offset - 1 === this.end) {\n                this.push(null);\n            }\n            else if (this.offset <= this.end) {\n                // console.log(\n                //   `retries: ${this.retries}, max retries: ${this.maxRetries}`\n                // );\n                if (this.retries < this.maxRetryRequests) {\n                    this.retries += 1;\n                    this.getter(this.offset)\n                        .then((newSource) => {\n                        this.source = newSource;\n                        this.setSourceEventHandlers();\n                        return;\n                    })\n                        .catch((error) => {\n                        this.destroy(error);\n                    });\n                }\n                else {\n                    this.destroy(new Error(`Data corruption failure: received less data than required and reached maxRetires limitation. Received data offset: ${this.offset - 1}, data needed offset: ${this.end}, retries: ${this.retries}, max retries: ${this.maxRetryRequests}`));\n                }\n            }\n            else {\n                this.destroy(new Error(`Data corruption failure: Received more data than original request, data needed offset is ${this.end}, received offset: ${this.offset - 1}`));\n            }\n        };\n        this.getter = getter;\n        this.source = source;\n        this.start = offset;\n        this.offset = offset;\n        this.end = offset + count - 1;\n        this.maxRetryRequests =\n            options.maxRetryRequests && options.maxRetryRequests >= 0 ? options.maxRetryRequests : 0;\n        this.onProgress = options.onProgress;\n        this.options = options;\n        this.setSourceEventHandlers();\n    }\n    _read() {\n        this.source.resume();\n    }\n    setSourceEventHandlers() {\n        this.source.on(\"data\", this.sourceDataHandler);\n        this.source.on(\"end\", this.sourceErrorOrEndHandler);\n        this.source.on(\"error\", this.sourceErrorOrEndHandler);\n        // needed for Node14\n        this.source.on(\"aborted\", this.sourceAbortedHandler);\n    }\n    removeSourceEventHandlers() {\n        this.source.removeListener(\"data\", this.sourceDataHandler);\n        this.source.removeListener(\"end\", this.sourceErrorOrEndHandler);\n        this.source.removeListener(\"error\", this.sourceErrorOrEndHandler);\n        this.source.removeListener(\"aborted\", this.sourceAbortedHandler);\n    }\n    _destroy(error, callback) {\n        // remove listener from source and release source\n        this.removeSourceEventHandlers();\n        this.source.destroy();\n        callback(error === null ? undefined : error);\n    }\n}\n//# sourceMappingURL=RetriableReadableStream.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode } from \"@azure/core-util\";\nimport { RetriableReadableStream, } from \"./utils/RetriableReadableStream\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobDownloadResponse implements BlobDownloadResponseParsed interface, and in Node.js runtime it will\n * automatically retry when internal read stream unexpected ends. (This kind of unexpected ends cannot\n * trigger retries defined in pipeline retry policy.)\n *\n * The {@link readableStreamBody} stream will retry underlayer, you can just use it as a normal Node.js\n * Readable stream.\n */\nexport class BlobDownloadResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return this.originalResponse.copyCompletedOn;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The number of tags associated with the blob\n     *\n     * @readonly\n     */\n    get tagCount() {\n        return this.originalResponse.tagCount;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * Returns the UTC date and time generated by the service that indicates the time at which the blob was\n     * last read or written to.\n     *\n     * @readonly\n     */\n    get lastAccessed() {\n        return this.originalResponse.lastAccessed;\n    }\n    /**\n     * Returns the date and time the blob was created.\n     *\n     * @readonly\n     */\n    get createdOn() {\n        return this.originalResponse.createdOn;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the Blob service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * Indicates the versionId of the downloaded blob version.\n     *\n     * @readonly\n     */\n    get versionId() {\n        return this.originalResponse.versionId;\n    }\n    /**\n     * Indicates whether version of this blob is a current version.\n     *\n     * @readonly\n     */\n    get isCurrentVersion() {\n        return this.originalResponse.isCurrentVersion;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * Object Replication Policy Id of the destination blob.\n     *\n     * @readonly\n     */\n    get objectReplicationDestinationPolicyId() {\n        return this.originalResponse.objectReplicationDestinationPolicyId;\n    }\n    /**\n     * Parsed Object Replication Policy Id, Rule Id(s) and status of the source blob.\n     *\n     * @readonly\n     */\n    get objectReplicationSourceProperties() {\n        return this.originalResponse.objectReplicationSourceProperties;\n    }\n    /**\n     * If this blob has been sealed.\n     *\n     * @readonly\n     */\n    get isSealed() {\n        return this.originalResponse.isSealed;\n    }\n    /**\n     * UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.\n     *\n     * @readonly\n     */\n    get immutabilityPolicyExpiresOn() {\n        return this.originalResponse.immutabilityPolicyExpiresOn;\n    }\n    /**\n     * Indicates immutability policy mode.\n     *\n     * @readonly\n     */\n    get immutabilityPolicyMode() {\n        return this.originalResponse.immutabilityPolicyMode;\n    }\n    /**\n     * Indicates if a legal hold is present on the blob.\n     *\n     * @readonly\n     */\n    get legalHold() {\n        return this.originalResponse.legalHold;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get contentAsBlob() {\n        return this.originalResponse.blobBody;\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * It will automatically retry when internal read stream unexpected ends.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return isNode ? this.blobDownloadStream : undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobDownloadResponse.\n     *\n     * @param originalResponse -\n     * @param getter -\n     * @param offset -\n     * @param count -\n     * @param options -\n     */\n    constructor(originalResponse, getter, offset, count, options = {}) {\n        this.originalResponse = originalResponse;\n        this.blobDownloadStream = new RetriableReadableStream(this.originalResponse.readableStreamBody, getter, offset, count, options);\n    }\n}\n//# sourceMappingURL=BlobDownloadResponse.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport const AVRO_SYNC_MARKER_SIZE = 16;\nexport const AVRO_INIT_BYTES = new Uint8Array([79, 98, 106, 1]);\nexport const AVRO_CODEC_KEY = \"avro.codec\";\nexport const AVRO_SCHEMA_KEY = \"avro.schema\";\n//# sourceMappingURL=AvroConstants.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport class AvroParser {\n    /**\n     * Reads a fixed number of bytes from the stream.\n     *\n     * @param stream -\n     * @param length -\n     * @param options -\n     */\n    static async readFixedBytes(stream, length, options = {}) {\n        const bytes = await stream.read(length, { abortSignal: options.abortSignal });\n        if (bytes.length !== length) {\n            throw new Error(\"Hit stream end.\");\n        }\n        return bytes;\n    }\n    /**\n     * Reads a single byte from the stream.\n     *\n     * @param stream -\n     * @param options -\n     */\n    static async readByte(stream, options = {}) {\n        const buf = await AvroParser.readFixedBytes(stream, 1, options);\n        return buf[0];\n    }\n    // int and long are stored in variable-length zig-zag coding.\n    // variable-length: https://lucene.apache.org/core/3_5_0/fileformats.html#VInt\n    // zig-zag: https://developers.google.com/protocol-buffers/docs/encoding?csw=1#types\n    static async readZigZagLong(stream, options = {}) {\n        let zigZagEncoded = 0;\n        let significanceInBit = 0;\n        let byte, haveMoreByte, significanceInFloat;\n        do {\n            byte = await AvroParser.readByte(stream, options);\n            haveMoreByte = byte & 0x80;\n            zigZagEncoded |= (byte & 0x7f) << significanceInBit;\n            significanceInBit += 7;\n        } while (haveMoreByte && significanceInBit < 28); // bitwise operation only works for 32-bit integers\n        if (haveMoreByte) {\n            // Switch to float arithmetic\n            // eslint-disable-next-line no-self-assign\n            zigZagEncoded = zigZagEncoded;\n            significanceInFloat = 268435456; // 2 ** 28.\n            do {\n                byte = await AvroParser.readByte(stream, options);\n                zigZagEncoded += (byte & 0x7f) * significanceInFloat;\n                significanceInFloat *= 128; // 2 ** 7\n            } while (byte & 0x80);\n            const res = (zigZagEncoded % 2 ? -(zigZagEncoded + 1) : zigZagEncoded) / 2;\n            if (res < Number.MIN_SAFE_INTEGER || res > Number.MAX_SAFE_INTEGER) {\n                throw new Error(\"Integer overflow.\");\n            }\n            return res;\n        }\n        return (zigZagEncoded >> 1) ^ -(zigZagEncoded & 1);\n    }\n    static async readLong(stream, options = {}) {\n        return AvroParser.readZigZagLong(stream, options);\n    }\n    static async readInt(stream, options = {}) {\n        return AvroParser.readZigZagLong(stream, options);\n    }\n    static async readNull() {\n        return null;\n    }\n    static async readBoolean(stream, options = {}) {\n        const b = await AvroParser.readByte(stream, options);\n        if (b === 1) {\n            return true;\n        }\n        else if (b === 0) {\n            return false;\n        }\n        else {\n            throw new Error(\"Byte was not a boolean.\");\n        }\n    }\n    static async readFloat(stream, options = {}) {\n        const u8arr = await AvroParser.readFixedBytes(stream, 4, options);\n        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);\n        return view.getFloat32(0, true); // littleEndian = true\n    }\n    static async readDouble(stream, options = {}) {\n        const u8arr = await AvroParser.readFixedBytes(stream, 8, options);\n        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);\n        return view.getFloat64(0, true); // littleEndian = true\n    }\n    static async readBytes(stream, options = {}) {\n        const size = await AvroParser.readLong(stream, options);\n        if (size < 0) {\n            throw new Error(\"Bytes size was negative.\");\n        }\n        return stream.read(size, { abortSignal: options.abortSignal });\n    }\n    static async readString(stream, options = {}) {\n        const u8arr = await AvroParser.readBytes(stream, options);\n        const utf8decoder = new TextDecoder();\n        return utf8decoder.decode(u8arr);\n    }\n    static async readMapPair(stream, readItemMethod, options = {}) {\n        const key = await AvroParser.readString(stream, options);\n        // FUTURE: this won't work with readFixed (currently not supported) which needs a length as the parameter.\n        const value = await readItemMethod(stream, options);\n        return { key, value };\n    }\n    static async readMap(stream, readItemMethod, options = {}) {\n        const readPairMethod = (s, opts = {}) => {\n            return AvroParser.readMapPair(s, readItemMethod, opts);\n        };\n        const pairs = await AvroParser.readArray(stream, readPairMethod, options);\n        const dict = {};\n        for (const pair of pairs) {\n            dict[pair.key] = pair.value;\n        }\n        return dict;\n    }\n    static async readArray(stream, readItemMethod, options = {}) {\n        const items = [];\n        for (let count = await AvroParser.readLong(stream, options); count !== 0; count = await AvroParser.readLong(stream, options)) {\n            if (count < 0) {\n                // Ignore block sizes\n                await AvroParser.readLong(stream, options);\n                count = -count;\n            }\n            while (count--) {\n                const item = await readItemMethod(stream, options);\n                items.push(item);\n            }\n        }\n        return items;\n    }\n}\nvar AvroComplex;\n(function (AvroComplex) {\n    AvroComplex[\"RECORD\"] = \"record\";\n    AvroComplex[\"ENUM\"] = \"enum\";\n    AvroComplex[\"ARRAY\"] = \"array\";\n    AvroComplex[\"MAP\"] = \"map\";\n    AvroComplex[\"UNION\"] = \"union\";\n    AvroComplex[\"FIXED\"] = \"fixed\";\n})(AvroComplex || (AvroComplex = {}));\nvar AvroPrimitive;\n(function (AvroPrimitive) {\n    AvroPrimitive[\"NULL\"] = \"null\";\n    AvroPrimitive[\"BOOLEAN\"] = \"boolean\";\n    AvroPrimitive[\"INT\"] = \"int\";\n    AvroPrimitive[\"LONG\"] = \"long\";\n    AvroPrimitive[\"FLOAT\"] = \"float\";\n    AvroPrimitive[\"DOUBLE\"] = \"double\";\n    AvroPrimitive[\"BYTES\"] = \"bytes\";\n    AvroPrimitive[\"STRING\"] = \"string\";\n})(AvroPrimitive || (AvroPrimitive = {}));\nexport class AvroType {\n    /**\n     * Determines the AvroType from the Avro Schema.\n     */\n    static fromSchema(schema) {\n        if (typeof schema === \"string\") {\n            return AvroType.fromStringSchema(schema);\n        }\n        else if (Array.isArray(schema)) {\n            return AvroType.fromArraySchema(schema);\n        }\n        else {\n            return AvroType.fromObjectSchema(schema);\n        }\n    }\n    static fromStringSchema(schema) {\n        switch (schema) {\n            case AvroPrimitive.NULL:\n            case AvroPrimitive.BOOLEAN:\n            case AvroPrimitive.INT:\n            case AvroPrimitive.LONG:\n            case AvroPrimitive.FLOAT:\n            case AvroPrimitive.DOUBLE:\n            case AvroPrimitive.BYTES:\n            case AvroPrimitive.STRING:\n                return new AvroPrimitiveType(schema);\n            default:\n                throw new Error(`Unexpected Avro type ${schema}`);\n        }\n    }\n    static fromArraySchema(schema) {\n        return new AvroUnionType(schema.map(AvroType.fromSchema));\n    }\n    static fromObjectSchema(schema) {\n        const type = schema.type;\n        // Primitives can be defined as strings or objects\n        try {\n            return AvroType.fromStringSchema(type);\n        }\n        catch (err) {\n            // eslint-disable-line no-empty\n        }\n        switch (type) {\n            case AvroComplex.RECORD:\n                if (schema.aliases) {\n                    throw new Error(`aliases currently is not supported, schema: ${schema}`);\n                }\n                if (!schema.name) {\n                    throw new Error(`Required attribute 'name' doesn't exist on schema: ${schema}`);\n                }\n                // eslint-disable-next-line no-case-declarations\n                const fields = {};\n                if (!schema.fields) {\n                    throw new Error(`Required attribute 'fields' doesn't exist on schema: ${schema}`);\n                }\n                for (const field of schema.fields) {\n                    fields[field.name] = AvroType.fromSchema(field.type);\n                }\n                return new AvroRecordType(fields, schema.name);\n            case AvroComplex.ENUM:\n                if (schema.aliases) {\n                    throw new Error(`aliases currently is not supported, schema: ${schema}`);\n                }\n                if (!schema.symbols) {\n                    throw new Error(`Required attribute 'symbols' doesn't exist on schema: ${schema}`);\n                }\n                return new AvroEnumType(schema.symbols);\n            case AvroComplex.MAP:\n                if (!schema.values) {\n                    throw new Error(`Required attribute 'values' doesn't exist on schema: ${schema}`);\n                }\n                return new AvroMapType(AvroType.fromSchema(schema.values));\n            case AvroComplex.ARRAY: // Unused today\n            case AvroComplex.FIXED: // Unused today\n            default:\n                throw new Error(`Unexpected Avro type ${type} in ${schema}`);\n        }\n    }\n}\nclass AvroPrimitiveType extends AvroType {\n    constructor(primitive) {\n        super();\n        this._primitive = primitive;\n    }\n    read(stream, options = {}) {\n        switch (this._primitive) {\n            case AvroPrimitive.NULL:\n                return AvroParser.readNull();\n            case AvroPrimitive.BOOLEAN:\n                return AvroParser.readBoolean(stream, options);\n            case AvroPrimitive.INT:\n                return AvroParser.readInt(stream, options);\n            case AvroPrimitive.LONG:\n                return AvroParser.readLong(stream, options);\n            case AvroPrimitive.FLOAT:\n                return AvroParser.readFloat(stream, options);\n            case AvroPrimitive.DOUBLE:\n                return AvroParser.readDouble(stream, options);\n            case AvroPrimitive.BYTES:\n                return AvroParser.readBytes(stream, options);\n            case AvroPrimitive.STRING:\n                return AvroParser.readString(stream, options);\n            default:\n                throw new Error(\"Unknown Avro Primitive\");\n        }\n    }\n}\nclass AvroEnumType extends AvroType {\n    constructor(symbols) {\n        super();\n        this._symbols = symbols;\n    }\n    async read(stream, options = {}) {\n        const value = await AvroParser.readInt(stream, options);\n        return this._symbols[value];\n    }\n}\nclass AvroUnionType extends AvroType {\n    constructor(types) {\n        super();\n        this._types = types;\n    }\n    async read(stream, options = {}) {\n        // eslint-disable-line @typescript-eslint/ban-types\n        const typeIndex = await AvroParser.readInt(stream, options);\n        return this._types[typeIndex].read(stream, options);\n    }\n}\nclass AvroMapType extends AvroType {\n    constructor(itemType) {\n        super();\n        this._itemType = itemType;\n    }\n    read(stream, options = {}) {\n        const readItemMethod = (s, opts) => {\n            return this._itemType.read(s, opts);\n        };\n        return AvroParser.readMap(stream, readItemMethod, options);\n    }\n}\nclass AvroRecordType extends AvroType {\n    constructor(fields, name) {\n        super();\n        this._fields = fields;\n        this._name = name;\n    }\n    async read(stream, options = {}) {\n        const record = {};\n        record[\"$schema\"] = this._name;\n        for (const key in this._fields) {\n            if (Object.prototype.hasOwnProperty.call(this._fields, key)) {\n                record[key] = await this._fields[key].read(stream, options);\n            }\n        }\n        return record;\n    }\n}\n//# sourceMappingURL=AvroParser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __asyncGenerator, __await } from \"tslib\";\n// TODO: Do a review of non-interfaces\n/* eslint-disable @azure/azure-sdk/ts-use-interface-parameters */\nimport { AVRO_CODEC_KEY, AVRO_INIT_BYTES, AVRO_SCHEMA_KEY, AVRO_SYNC_MARKER_SIZE, } from \"./AvroConstants\";\nimport { AvroParser, AvroType } from \"./AvroParser\";\nimport { arraysEqual } from \"./utils/utils.common\";\nexport class AvroReader {\n    get blockOffset() {\n        return this._blockOffset;\n    }\n    get objectIndex() {\n        return this._objectIndex;\n    }\n    constructor(dataStream, headerStream, currentBlockOffset, indexWithinCurrentBlock) {\n        this._dataStream = dataStream;\n        this._headerStream = headerStream || dataStream;\n        this._initialized = false;\n        this._blockOffset = currentBlockOffset || 0;\n        this._objectIndex = indexWithinCurrentBlock || 0;\n        this._initialBlockOffset = currentBlockOffset || 0;\n    }\n    async initialize(options = {}) {\n        const header = await AvroParser.readFixedBytes(this._headerStream, AVRO_INIT_BYTES.length, {\n            abortSignal: options.abortSignal,\n        });\n        if (!arraysEqual(header, AVRO_INIT_BYTES)) {\n            throw new Error(\"Stream is not an Avro file.\");\n        }\n        // File metadata is written as if defined by the following map schema:\n        // { \"type\": \"map\", \"values\": \"bytes\"}\n        this._metadata = await AvroParser.readMap(this._headerStream, AvroParser.readString, {\n            abortSignal: options.abortSignal,\n        });\n        // Validate codec\n        const codec = this._metadata[AVRO_CODEC_KEY];\n        if (!(codec === undefined || codec === null || codec === \"null\")) {\n            throw new Error(\"Codecs are not supported\");\n        }\n        // The 16-byte, randomly-generated sync marker for this file.\n        this._syncMarker = await AvroParser.readFixedBytes(this._headerStream, AVRO_SYNC_MARKER_SIZE, {\n            abortSignal: options.abortSignal,\n        });\n        // Parse the schema\n        const schema = JSON.parse(this._metadata[AVRO_SCHEMA_KEY]);\n        this._itemType = AvroType.fromSchema(schema);\n        if (this._blockOffset === 0) {\n            this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n        }\n        this._itemsRemainingInBlock = await AvroParser.readLong(this._dataStream, {\n            abortSignal: options.abortSignal,\n        });\n        // skip block length\n        await AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal });\n        this._initialized = true;\n        if (this._objectIndex && this._objectIndex > 0) {\n            for (let i = 0; i < this._objectIndex; i++) {\n                await this._itemType.read(this._dataStream, { abortSignal: options.abortSignal });\n                this._itemsRemainingInBlock--;\n            }\n        }\n    }\n    hasNext() {\n        return !this._initialized || this._itemsRemainingInBlock > 0;\n    }\n    parseObjects() {\n        return __asyncGenerator(this, arguments, function* parseObjects_1(options = {}) {\n            if (!this._initialized) {\n                yield __await(this.initialize(options));\n            }\n            while (this.hasNext()) {\n                const result = yield __await(this._itemType.read(this._dataStream, {\n                    abortSignal: options.abortSignal,\n                }));\n                this._itemsRemainingInBlock--;\n                this._objectIndex++;\n                if (this._itemsRemainingInBlock === 0) {\n                    const marker = yield __await(AvroParser.readFixedBytes(this._dataStream, AVRO_SYNC_MARKER_SIZE, {\n                        abortSignal: options.abortSignal,\n                    }));\n                    this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n                    this._objectIndex = 0;\n                    if (!arraysEqual(this._syncMarker, marker)) {\n                        throw new Error(\"Stream is not a valid Avro file.\");\n                    }\n                    try {\n                        this._itemsRemainingInBlock = yield __await(AvroParser.readLong(this._dataStream, {\n                            abortSignal: options.abortSignal,\n                        }));\n                    }\n                    catch (err) {\n                        // We hit the end of the stream.\n                        this._itemsRemainingInBlock = 0;\n                    }\n                    if (this._itemsRemainingInBlock > 0) {\n                        // Ignore block size\n                        yield __await(AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal }));\n                    }\n                }\n                yield yield __await(result);\n            }\n        });\n    }\n}\n//# sourceMappingURL=AvroReader.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport class AvroReadable {\n}\n//# sourceMappingURL=AvroReadable.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AvroReadable } from \"./AvroReadable\";\nimport { AbortError } from \"@azure/abort-controller\";\nconst ABORT_ERROR = new AbortError(\"Reading from the avro stream was aborted.\");\nexport class AvroReadableFromStream extends AvroReadable {\n    toUint8Array(data) {\n        if (typeof data === \"string\") {\n            return Buffer.from(data);\n        }\n        return data;\n    }\n    constructor(readable) {\n        super();\n        this._readable = readable;\n        this._position = 0;\n    }\n    get position() {\n        return this._position;\n    }\n    async read(size, options = {}) {\n        var _a;\n        if ((_a = options.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n            throw ABORT_ERROR;\n        }\n        if (size < 0) {\n            throw new Error(`size parameter should be positive: ${size}`);\n        }\n        if (size === 0) {\n            return new Uint8Array();\n        }\n        if (!this._readable.readable) {\n            throw new Error(\"Stream no longer readable.\");\n        }\n        // See if there is already enough data.\n        const chunk = this._readable.read(size);\n        if (chunk) {\n            this._position += chunk.length;\n            // chunk.length maybe less than desired size if the stream ends.\n            return this.toUint8Array(chunk);\n        }\n        else {\n            // register callback to wait for enough data to read\n            return new Promise((resolve, reject) => {\n                /* eslint-disable @typescript-eslint/no-use-before-define */\n                const cleanUp = () => {\n                    this._readable.removeListener(\"readable\", readableCallback);\n                    this._readable.removeListener(\"error\", rejectCallback);\n                    this._readable.removeListener(\"end\", rejectCallback);\n                    this._readable.removeListener(\"close\", rejectCallback);\n                    if (options.abortSignal) {\n                        options.abortSignal.removeEventListener(\"abort\", abortHandler);\n                    }\n                };\n                const readableCallback = () => {\n                    const callbackChunk = this._readable.read(size);\n                    if (callbackChunk) {\n                        this._position += callbackChunk.length;\n                        cleanUp();\n                        // callbackChunk.length maybe less than desired size if the stream ends.\n                        resolve(this.toUint8Array(callbackChunk));\n                    }\n                };\n                const rejectCallback = () => {\n                    cleanUp();\n                    reject();\n                };\n                const abortHandler = () => {\n                    cleanUp();\n                    reject(ABORT_ERROR);\n                };\n                this._readable.on(\"readable\", readableCallback);\n                this._readable.once(\"error\", rejectCallback);\n                this._readable.once(\"end\", rejectCallback);\n                this._readable.once(\"close\", rejectCallback);\n                if (options.abortSignal) {\n                    options.abortSignal.addEventListener(\"abort\", abortHandler);\n                }\n                /* eslint-enable @typescript-eslint/no-use-before-define */\n            });\n        }\n    }\n}\n//# sourceMappingURL=AvroReadableFromStream.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Readable } from \"stream\";\nimport { AvroReadableFromStream, AvroReader } from \"../../../storage-internal-avro/src\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js BlobQuickQueryStream will internally parse avro data stream for blob query.\n */\nexport class BlobQuickQueryStream extends Readable {\n    /**\n     * Creates an instance of BlobQuickQueryStream.\n     *\n     * @param source - The current ReadableStream returned from getter\n     * @param options -\n     */\n    constructor(source, options = {}) {\n        super();\n        this.avroPaused = true;\n        this.source = source;\n        this.onProgress = options.onProgress;\n        this.onError = options.onError;\n        this.avroReader = new AvroReader(new AvroReadableFromStream(this.source));\n        this.avroIter = this.avroReader.parseObjects({ abortSignal: options.abortSignal });\n    }\n    _read() {\n        if (this.avroPaused) {\n            this.readInternal().catch((err) => {\n                this.emit(\"error\", err);\n            });\n        }\n    }\n    async readInternal() {\n        this.avroPaused = false;\n        let avroNext;\n        do {\n            avroNext = await this.avroIter.next();\n            if (avroNext.done) {\n                break;\n            }\n            const obj = avroNext.value;\n            const schema = obj.$schema;\n            if (typeof schema !== \"string\") {\n                throw Error(\"Missing schema in avro record.\");\n            }\n            switch (schema) {\n                case \"com.microsoft.azure.storage.queryBlobContents.resultData\":\n                    {\n                        const data = obj.data;\n                        if (data instanceof Uint8Array === false) {\n                            throw Error(\"Invalid data in avro result record.\");\n                        }\n                        if (!this.push(Buffer.from(data))) {\n                            this.avroPaused = true;\n                        }\n                    }\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.progress\":\n                    {\n                        const bytesScanned = obj.bytesScanned;\n                        if (typeof bytesScanned !== \"number\") {\n                            throw Error(\"Invalid bytesScanned in avro progress record.\");\n                        }\n                        if (this.onProgress) {\n                            this.onProgress({ loadedBytes: bytesScanned });\n                        }\n                    }\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.end\":\n                    if (this.onProgress) {\n                        const totalBytes = obj.totalBytes;\n                        if (typeof totalBytes !== \"number\") {\n                            throw Error(\"Invalid totalBytes in avro end record.\");\n                        }\n                        this.onProgress({ loadedBytes: totalBytes });\n                    }\n                    this.push(null);\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.error\":\n                    if (this.onError) {\n                        const fatal = obj.fatal;\n                        if (typeof fatal !== \"boolean\") {\n                            throw Error(\"Invalid fatal in avro error record.\");\n                        }\n                        const name = obj.name;\n                        if (typeof name !== \"string\") {\n                            throw Error(\"Invalid name in avro error record.\");\n                        }\n                        const description = obj.description;\n                        if (typeof description !== \"string\") {\n                            throw Error(\"Invalid description in avro error record.\");\n                        }\n                        const position = obj.position;\n                        if (typeof position !== \"number\") {\n                            throw Error(\"Invalid position in avro error record.\");\n                        }\n                        this.onError({\n                            position,\n                            name,\n                            isFatal: fatal,\n                            description,\n                        });\n                    }\n                    break;\n                default:\n                    throw Error(`Unknown schema ${schema} in avro progress record.`);\n            }\n        } while (!avroNext.done && !this.avroPaused);\n    }\n}\n//# sourceMappingURL=BlobQuickQueryStream.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode } from \"@azure/core-util\";\nimport { BlobQuickQueryStream } from \"./utils/BlobQuickQueryStream\";\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobQueryResponse implements BlobDownloadResponseModel interface, and in Node.js runtime it will\n * parse avor data returned by blob query.\n */\nexport class BlobQueryResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return undefined;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the File service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get blobBody() {\n        return undefined;\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * It will parse avor data returned by blob query.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return isNode ? this.blobDownloadStream : undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobQueryResponse.\n     *\n     * @param originalResponse -\n     * @param options -\n     */\n    constructor(originalResponse, options = {}) {\n        this.originalResponse = originalResponse;\n        this.blobDownloadStream = new BlobQuickQueryStream(this.originalResponse.readableStreamBody, options);\n    }\n}\n//# sourceMappingURL=BlobQueryResponse.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerStoppedError\";\n        Object.setPrototypeOf(this, PollerStoppedError.prototype);\n    }\n}\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nexport class PollerCancelledError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerCancelledError\";\n        Object.setPrototypeOf(this, PollerCancelledError.prototype);\n    }\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nexport class Poller {\n    /**\n     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n     *\n     * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n     * operation has already been defined, at least its basic properties. The code below shows how to approach\n     * the definition of the constructor of a new custom poller.\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor({\n     *     // Anything you might need outside of the basics\n     *   }) {\n     *     let state: MyOperationState = {\n     *       privateProperty: private,\n     *       publicProperty: public,\n     *     };\n     *\n     *     const operation = {\n     *       state,\n     *       update,\n     *       cancel,\n     *       toString\n     *     }\n     *\n     *     // Sending the operation to the parent's constructor.\n     *     super(operation);\n     *\n     *     // You can assign more local properties here.\n     *   }\n     * }\n     * ```\n     *\n     * Inside of this constructor, a new promise is created. This will be used to\n     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n     * resolve and reject methods are also used internally to control when to resolve\n     * or reject anyone waiting for the poller to finish.\n     *\n     * The constructor of a custom implementation of a poller is where any serialized version of\n     * a previous poller's operation should be deserialized into the operation sent to the\n     * base constructor. For example:\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor(\n     *     baseOperation: string | undefined\n     *   ) {\n     *     let state: MyOperationState = {};\n     *     if (baseOperation) {\n     *       state = {\n     *         ...JSON.parse(baseOperation).state,\n     *         ...state\n     *       };\n     *     }\n     *     const operation = {\n     *       state,\n     *       // ...\n     *     }\n     *     super(operation);\n     *   }\n     * }\n     * ```\n     *\n     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n     */\n    constructor(operation) {\n        /** controls whether to throw an error if the operation failed or was canceled. */\n        this.resolveOnUnsuccessful = false;\n        this.stopped = true;\n        this.pollProgressCallbacks = [];\n        this.operation = operation;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n        // The above warning would get thrown if `poller.poll` is called, it returns an error,\n        // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n        this.promise.catch(() => {\n            /* intentionally blank */\n        });\n    }\n    /**\n     * Starts a loop that will break only if the poller is done\n     * or if the poller is stopped.\n     */\n    async startPolling(pollOptions = {}) {\n        if (this.stopped) {\n            this.stopped = false;\n        }\n        while (!this.isStopped() && !this.isDone()) {\n            await this.poll(pollOptions);\n            await this.delay();\n        }\n    }\n    /**\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    async pollOnce(options = {}) {\n        if (!this.isDone()) {\n            this.operation = await this.operation.update({\n                abortSignal: options.abortSignal,\n                fireProgress: this.fireProgress.bind(this),\n            });\n        }\n        this.processUpdatedState();\n    }\n    /**\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n    fireProgress(state) {\n        for (const callback of this.pollProgressCallbacks) {\n            callback(state);\n        }\n    }\n    /**\n     * Invokes the underlying operation's cancel method.\n     */\n    async cancelOnce(options = {}) {\n        this.operation = await this.operation.cancel(options);\n    }\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    poll(options = {}) {\n        if (!this.pollOncePromise) {\n            this.pollOncePromise = this.pollOnce(options);\n            const clearPollOncePromise = () => {\n                this.pollOncePromise = undefined;\n            };\n            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n        }\n        return this.pollOncePromise;\n    }\n    processUpdatedState() {\n        if (this.operation.state.error) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                this.reject(this.operation.state.error);\n                throw this.operation.state.error;\n            }\n        }\n        if (this.operation.state.isCancelled) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                const error = new PollerCancelledError(\"Operation was canceled\");\n                this.reject(error);\n                throw error;\n            }\n        }\n        if (this.isDone() && this.resolve) {\n            // If the poller has finished polling, this means we now have a result.\n            // However, it can be the case that TResult is instantiated to void, so\n            // we are not expecting a result anyway. To assert that we might not\n            // have a result eventually after finishing polling, we cast the result\n            // to TResult.\n            this.resolve(this.getResult());\n        }\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n    async pollUntilDone(pollOptions = {}) {\n        if (this.stopped) {\n            this.startPolling(pollOptions).catch(this.reject);\n        }\n        // This is needed because the state could have been updated by\n        // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n        this.processUpdatedState();\n        return this.promise;\n    }\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n    onProgress(callback) {\n        this.pollProgressCallbacks.push(callback);\n        return () => {\n            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n        };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n    isDone() {\n        const state = this.operation.state;\n        return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n    stopPolling() {\n        if (!this.stopped) {\n            this.stopped = true;\n            if (this.reject) {\n                this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n            }\n        }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n    isStopped() {\n        return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    cancelOperation(options = {}) {\n        if (!this.cancelPromise) {\n            this.cancelPromise = this.cancelOnce(options);\n        }\n        else if (options.abortSignal) {\n            throw new Error(\"A cancel request is currently pending\");\n        }\n        return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n    getOperationState() {\n        return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n    getResult() {\n        const state = this.operation.state;\n        return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n    toString() {\n        return this.operation.toString();\n    }\n}\n//# sourceMappingURL=poller.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n/**\n * States for Batch.\n */\nvar BatchStates;\n(function (BatchStates) {\n    BatchStates[BatchStates[\"Good\"] = 0] = \"Good\";\n    BatchStates[BatchStates[\"Error\"] = 1] = \"Error\";\n})(BatchStates || (BatchStates = {}));\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nexport class Batch {\n    /**\n     * Creates an instance of Batch.\n     * @param concurrency -\n     */\n    constructor(concurrency = 5) {\n        /**\n         * Number of active operations under execution.\n         */\n        this.actives = 0;\n        /**\n         * Number of completed operations under execution.\n         */\n        this.completed = 0;\n        /**\n         * Offset of next operation to be executed.\n         */\n        this.offset = 0;\n        /**\n         * Operation array to be executed.\n         */\n        this.operations = [];\n        /**\n         * States of Batch. When an error happens, state will turn into error.\n         * Batch will stop execute left operations.\n         */\n        this.state = BatchStates.Good;\n        if (concurrency < 1) {\n            throw new RangeError(\"concurrency must be larger than 0\");\n        }\n        this.concurrency = concurrency;\n        this.emitter = new EventEmitter();\n    }\n    /**\n     * Add a operation into queue.\n     *\n     * @param operation -\n     */\n    addOperation(operation) {\n        this.operations.push(async () => {\n            try {\n                this.actives++;\n                await operation();\n                this.actives--;\n                this.completed++;\n                this.parallelExecute();\n            }\n            catch (error) {\n                this.emitter.emit(\"error\", error);\n            }\n        });\n    }\n    /**\n     * Start execute operations in the queue.\n     *\n     */\n    async do() {\n        if (this.operations.length === 0) {\n            return Promise.resolve();\n        }\n        this.parallelExecute();\n        return new Promise((resolve, reject) => {\n            this.emitter.on(\"finish\", resolve);\n            this.emitter.on(\"error\", (error) => {\n                this.state = BatchStates.Error;\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Get next operation to be executed. Return null when reaching ends.\n     *\n     */\n    nextOperation() {\n        if (this.offset < this.operations.length) {\n            return this.operations[this.offset++];\n        }\n        return null;\n    }\n    /**\n     * Start execute operations. One one the most important difference between\n     * this method with do() is that do() wraps as an sync method.\n     *\n     */\n    parallelExecute() {\n        if (this.state === BatchStates.Error) {\n            return;\n        }\n        if (this.completed >= this.operations.length) {\n            this.emitter.emit(\"finish\");\n            return;\n        }\n        while (this.actives < this.concurrency) {\n            const operation = this.nextOperation();\n            if (operation) {\n                operation();\n            }\n            else {\n                return;\n            }\n        }\n    }\n}\n//# sourceMappingURL=Batch.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Readable } from \"stream\";\n/**\n * This class generates a readable stream from the data in an array of buffers.\n */\nexport class BuffersStream extends Readable {\n    /**\n     * Creates an instance of BuffersStream that will emit the data\n     * contained in the array of buffers.\n     *\n     * @param buffers - Array of buffers containing the data\n     * @param byteLength - The total length of data contained in the buffers\n     */\n    constructor(buffers, byteLength, options) {\n        super(options);\n        this.buffers = buffers;\n        this.byteLength = byteLength;\n        this.byteOffsetInCurrentBuffer = 0;\n        this.bufferIndex = 0;\n        this.pushedBytesLength = 0;\n        // check byteLength is no larger than buffers[] total length\n        let buffersLength = 0;\n        for (const buf of this.buffers) {\n            buffersLength += buf.byteLength;\n        }\n        if (buffersLength < this.byteLength) {\n            throw new Error(\"Data size shouldn't be larger than the total length of buffers.\");\n        }\n    }\n    /**\n     * Internal _read() that will be called when the stream wants to pull more data in.\n     *\n     * @param size - Optional. The size of data to be read\n     */\n    _read(size) {\n        if (this.pushedBytesLength >= this.byteLength) {\n            this.push(null);\n        }\n        if (!size) {\n            size = this.readableHighWaterMark;\n        }\n        const outBuffers = [];\n        let i = 0;\n        while (i < size && this.pushedBytesLength < this.byteLength) {\n            // The last buffer may be longer than the data it contains.\n            const remainingDataInAllBuffers = this.byteLength - this.pushedBytesLength;\n            const remainingCapacityInThisBuffer = this.buffers[this.bufferIndex].byteLength - this.byteOffsetInCurrentBuffer;\n            const remaining = Math.min(remainingCapacityInThisBuffer, remainingDataInAllBuffers);\n            if (remaining > size - i) {\n                // chunkSize = size - i\n                const end = this.byteOffsetInCurrentBuffer + size - i;\n                outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n                this.pushedBytesLength += size - i;\n                this.byteOffsetInCurrentBuffer = end;\n                i = size;\n                break;\n            }\n            else {\n                // chunkSize = remaining\n                const end = this.byteOffsetInCurrentBuffer + remaining;\n                outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n                if (remaining === remainingCapacityInThisBuffer) {\n                    // this.buffers[this.bufferIndex] used up, shift to next one\n                    this.byteOffsetInCurrentBuffer = 0;\n                    this.bufferIndex++;\n                }\n                else {\n                    this.byteOffsetInCurrentBuffer = end;\n                }\n                this.pushedBytesLength += remaining;\n                i += remaining;\n            }\n        }\n        if (outBuffers.length > 1) {\n            this.push(Buffer.concat(outBuffers));\n        }\n        else if (outBuffers.length === 1) {\n            this.push(outBuffers[0]);\n        }\n    }\n}\n//# sourceMappingURL=BuffersStream.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BuffersStream } from \"./BuffersStream\";\n/**\n * maxBufferLength is max size of each buffer in the pooled buffers.\n */\nimport buffer from \"buffer\";\nconst maxBufferLength = buffer.constants.MAX_LENGTH;\n/**\n * This class provides a buffer container which conceptually has no hard size limit.\n * It accepts a capacity, an array of input buffers and the total length of input data.\n * It will allocate an internal \"buffer\" of the capacity and fill the data in the input buffers\n * into the internal \"buffer\" serially with respect to the total length.\n * Then by calling PooledBuffer.getReadableStream(), you can get a readable stream\n * assembled from all the data in the internal \"buffer\".\n */\nexport class PooledBuffer {\n    /**\n     * The size of the data contained in the pooled buffers.\n     */\n    get size() {\n        return this._size;\n    }\n    constructor(capacity, buffers, totalLength) {\n        /**\n         * Internal buffers used to keep the data.\n         * Each buffer has a length of the maxBufferLength except last one.\n         */\n        this.buffers = [];\n        this.capacity = capacity;\n        this._size = 0;\n        // allocate\n        const bufferNum = Math.ceil(capacity / maxBufferLength);\n        for (let i = 0; i < bufferNum; i++) {\n            let len = i === bufferNum - 1 ? capacity % maxBufferLength : maxBufferLength;\n            if (len === 0) {\n                len = maxBufferLength;\n            }\n            this.buffers.push(Buffer.allocUnsafe(len));\n        }\n        if (buffers) {\n            this.fill(buffers, totalLength);\n        }\n    }\n    /**\n     * Fill the internal buffers with data in the input buffers serially\n     * with respect to the total length and the total capacity of the internal buffers.\n     * Data copied will be shift out of the input buffers.\n     *\n     * @param buffers - Input buffers containing the data to be filled in the pooled buffer\n     * @param totalLength - Total length of the data to be filled in.\n     *\n     */\n    fill(buffers, totalLength) {\n        this._size = Math.min(this.capacity, totalLength);\n        let i = 0, j = 0, targetOffset = 0, sourceOffset = 0, totalCopiedNum = 0;\n        while (totalCopiedNum < this._size) {\n            const source = buffers[i];\n            const target = this.buffers[j];\n            const copiedNum = source.copy(target, targetOffset, sourceOffset);\n            totalCopiedNum += copiedNum;\n            sourceOffset += copiedNum;\n            targetOffset += copiedNum;\n            if (sourceOffset === source.length) {\n                i++;\n                sourceOffset = 0;\n            }\n            if (targetOffset === target.length) {\n                j++;\n                targetOffset = 0;\n            }\n        }\n        // clear copied from source buffers\n        buffers.splice(0, i);\n        if (buffers.length > 0) {\n            buffers[0] = buffers[0].slice(sourceOffset);\n        }\n    }\n    /**\n     * Get the readable stream assembled from all the data in the internal buffers.\n     *\n     */\n    getReadableStream() {\n        return new BuffersStream(this.buffers, this.size);\n    }\n}\n//# sourceMappingURL=PooledBuffer.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { EventEmitter } from \"events\";\nimport { PooledBuffer } from \"./PooledBuffer\";\n/**\n * This class accepts a Node.js Readable stream as input, and keeps reading data\n * from the stream into the internal buffer structure, until it reaches maxBuffers.\n * Every available buffer will try to trigger outgoingHandler.\n *\n * The internal buffer structure includes an incoming buffer array, and a outgoing\n * buffer array. The incoming buffer array includes the \"empty\" buffers can be filled\n * with new incoming data. The outgoing array includes the filled buffers to be\n * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.\n *\n * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING\n *\n * NUM_OF_ALL_BUFFERS lesser than or equal to maxBuffers\n *\n * PERFORMANCE IMPROVEMENT TIPS:\n * 1. Input stream highWaterMark is better to set a same value with bufferSize\n *    parameter, which will avoid Buffer.concat() operations.\n * 2. concurrency should set a smaller value than maxBuffers, which is helpful to\n *    reduce the possibility when a outgoing handler waits for the stream data.\n *    in this situation, outgoing handlers are blocked.\n *    Outgoing queue shouldn't be empty.\n */\nexport class BufferScheduler {\n    /**\n     * Creates an instance of BufferScheduler.\n     *\n     * @param readable - A Node.js Readable stream\n     * @param bufferSize - Buffer size of every maintained buffer\n     * @param maxBuffers - How many buffers can be allocated\n     * @param outgoingHandler - An async function scheduled to be\n     *                                          triggered when a buffer fully filled\n     *                                          with stream data\n     * @param concurrency - Concurrency of executing outgoingHandlers (>0)\n     * @param encoding - [Optional] Encoding of Readable stream when it's a string stream\n     */\n    constructor(readable, bufferSize, maxBuffers, outgoingHandler, concurrency, encoding) {\n        /**\n         * An internal event emitter.\n         */\n        this.emitter = new EventEmitter();\n        /**\n         * An internal offset marker to track data offset in bytes of next outgoingHandler.\n         */\n        this.offset = 0;\n        /**\n         * An internal marker to track whether stream is end.\n         */\n        this.isStreamEnd = false;\n        /**\n         * An internal marker to track whether stream or outgoingHandler returns error.\n         */\n        this.isError = false;\n        /**\n         * How many handlers are executing.\n         */\n        this.executingOutgoingHandlers = 0;\n        /**\n         * How many buffers have been allocated.\n         */\n        this.numBuffers = 0;\n        /**\n         * Because this class doesn't know how much data every time stream pops, which\n         * is defined by highWaterMarker of the stream. So BufferScheduler will cache\n         * data received from the stream, when data in unresolvedDataArray exceeds the\n         * blockSize defined, it will try to concat a blockSize of buffer, fill into available\n         * buffers from incoming and push to outgoing array.\n         */\n        this.unresolvedDataArray = [];\n        /**\n         * How much data consisted in unresolvedDataArray.\n         */\n        this.unresolvedLength = 0;\n        /**\n         * The array includes all the available buffers can be used to fill data from stream.\n         */\n        this.incoming = [];\n        /**\n         * The array (queue) includes all the buffers filled from stream data.\n         */\n        this.outgoing = [];\n        if (bufferSize <= 0) {\n            throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);\n        }\n        if (maxBuffers <= 0) {\n            throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);\n        }\n        if (concurrency <= 0) {\n            throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);\n        }\n        this.bufferSize = bufferSize;\n        this.maxBuffers = maxBuffers;\n        this.readable = readable;\n        this.outgoingHandler = outgoingHandler;\n        this.concurrency = concurrency;\n        this.encoding = encoding;\n    }\n    /**\n     * Start the scheduler, will return error when stream of any of the outgoingHandlers\n     * returns error.\n     *\n     */\n    async do() {\n        return new Promise((resolve, reject) => {\n            this.readable.on(\"data\", (data) => {\n                data = typeof data === \"string\" ? Buffer.from(data, this.encoding) : data;\n                this.appendUnresolvedData(data);\n                if (!this.resolveData()) {\n                    this.readable.pause();\n                }\n            });\n            this.readable.on(\"error\", (err) => {\n                this.emitter.emit(\"error\", err);\n            });\n            this.readable.on(\"end\", () => {\n                this.isStreamEnd = true;\n                this.emitter.emit(\"checkEnd\");\n            });\n            this.emitter.on(\"error\", (err) => {\n                this.isError = true;\n                this.readable.pause();\n                reject(err);\n            });\n            this.emitter.on(\"checkEnd\", () => {\n                if (this.outgoing.length > 0) {\n                    this.triggerOutgoingHandlers();\n                    return;\n                }\n                if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {\n                    if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {\n                        const buffer = this.shiftBufferFromUnresolvedDataArray();\n                        this.outgoingHandler(() => buffer.getReadableStream(), buffer.size, this.offset)\n                            .then(resolve)\n                            .catch(reject);\n                    }\n                    else if (this.unresolvedLength >= this.bufferSize) {\n                        return;\n                    }\n                    else {\n                        resolve();\n                    }\n                }\n            });\n        });\n    }\n    /**\n     * Insert a new data into unresolved array.\n     *\n     * @param data -\n     */\n    appendUnresolvedData(data) {\n        this.unresolvedDataArray.push(data);\n        this.unresolvedLength += data.length;\n    }\n    /**\n     * Try to shift a buffer with size in blockSize. The buffer returned may be less\n     * than blockSize when data in unresolvedDataArray is less than bufferSize.\n     *\n     */\n    shiftBufferFromUnresolvedDataArray(buffer) {\n        if (!buffer) {\n            buffer = new PooledBuffer(this.bufferSize, this.unresolvedDataArray, this.unresolvedLength);\n        }\n        else {\n            buffer.fill(this.unresolvedDataArray, this.unresolvedLength);\n        }\n        this.unresolvedLength -= buffer.size;\n        return buffer;\n    }\n    /**\n     * Resolve data in unresolvedDataArray. For every buffer with size in blockSize\n     * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,\n     * then push it into outgoing to be handled by outgoing handler.\n     *\n     * Return false when available buffers in incoming are not enough, else true.\n     *\n     * @returns Return false when buffers in incoming are not enough, else true.\n     */\n    resolveData() {\n        while (this.unresolvedLength >= this.bufferSize) {\n            let buffer;\n            if (this.incoming.length > 0) {\n                buffer = this.incoming.shift();\n                this.shiftBufferFromUnresolvedDataArray(buffer);\n            }\n            else {\n                if (this.numBuffers < this.maxBuffers) {\n                    buffer = this.shiftBufferFromUnresolvedDataArray();\n                    this.numBuffers++;\n                }\n                else {\n                    // No available buffer, wait for buffer returned\n                    return false;\n                }\n            }\n            this.outgoing.push(buffer);\n            this.triggerOutgoingHandlers();\n        }\n        return true;\n    }\n    /**\n     * Try to trigger a outgoing handler for every buffer in outgoing. Stop when\n     * concurrency reaches.\n     */\n    async triggerOutgoingHandlers() {\n        let buffer;\n        do {\n            if (this.executingOutgoingHandlers >= this.concurrency) {\n                return;\n            }\n            buffer = this.outgoing.shift();\n            if (buffer) {\n                this.triggerOutgoingHandler(buffer);\n            }\n        } while (buffer);\n    }\n    /**\n     * Trigger a outgoing handler for a buffer shifted from outgoing.\n     *\n     * @param buffer -\n     */\n    async triggerOutgoingHandler(buffer) {\n        const bufferLength = buffer.size;\n        this.executingOutgoingHandlers++;\n        this.offset += bufferLength;\n        try {\n            await this.outgoingHandler(() => buffer.getReadableStream(), bufferLength, this.offset - bufferLength);\n        }\n        catch (err) {\n            this.emitter.emit(\"error\", err);\n            return;\n        }\n        this.executingOutgoingHandlers--;\n        this.reuseBuffer(buffer);\n        this.emitter.emit(\"checkEnd\");\n    }\n    /**\n     * Return buffer used by outgoing handler into incoming.\n     *\n     * @param buffer -\n     */\n    reuseBuffer(buffer) {\n        this.incoming.push(buffer);\n        if (!this.isError && this.resolveData() && !this.isStreamEnd) {\n            this.readable.resume();\n        }\n    }\n}\n//# sourceMappingURL=BufferScheduler.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { getDefaultProxySettings, } from \"@azure/core-rest-pipeline\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { isNode } from \"@azure/core-util\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { BlobQueryResponse } from \"./BlobQueryResponse\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { ensureCpkIfSpecified, toAccessTier, } from \"./models\";\nimport { rangeResponseFromModel, } from \"./PageBlobRangeResponse\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { BlobBeginCopyFromUrlPoller, } from \"./pollers/BlobStartCopyFromUrlPoller\";\nimport { rangeToString } from \"./Range\";\nimport { StorageClient } from \"./StorageClient\";\nimport { Batch } from \"./utils/Batch\";\nimport { BufferScheduler } from \"../../storage-common/src\";\nimport { BlobDoesNotUseCustomerSpecifiedEncryption, BlobUsesCustomerSpecifiedEncryptionMsg, BLOCK_BLOB_MAX_BLOCKS, BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES, BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES, DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES, DEFAULT_BLOCK_BUFFER_SIZE_BYTES, DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, ETagAny, URLConstants, } from \"./utils/constants\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { appendToURLPath, appendToURLQuery, assertResponse, extractConnectionStringParts, ExtractPageRangeInfoItems, generateBlockID, getURLParameter, httpAuthorizationToString, isIpEndpointStyle, parseObjectReplicationRecord, setURLParameter, toBlobTags, toBlobTagsString, toQuerySerialization, toTags, } from \"./utils/utils.common\";\nimport { fsCreateReadStream, fsStat, readStreamToLocalFile, streamToBuffer, } from \"./utils/utils.node\";\nimport { generateBlobSASQueryParameters } from \"./sas/BlobSASSignatureValues\";\nimport { BlobLeaseClient } from \"./BlobLeaseClient\";\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n */\nexport class BlobClient extends StorageClient {\n    /**\n     * The name of the blob.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        let pipeline;\n        let url;\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        ({ blobName: this._name, containerName: this._containerName } =\n            this.getBlobAndContainerNamesFromUrl());\n        this.blobContext = this.storageClientContext.blob;\n        this._snapshot = getURLParameter(this.url, URLConstants.Parameters.SNAPSHOT);\n        this._versionId = getURLParameter(this.url, URLConstants.Parameters.VERSIONID);\n    }\n    /**\n     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp\n     */\n    withSnapshot(snapshot) {\n        return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a new BlobClient object pointing to a version of this blob.\n     * Provide \"\" will remove the versionId and return a Client to the base blob.\n     *\n     * @param versionId - The versionId.\n     * @returns A new BlobClient object pointing to the version of this blob.\n     */\n    withVersion(versionId) {\n        return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);\n    }\n    /**\n     * Creates a AppendBlobClient object.\n     *\n     */\n    getAppendBlobClient() {\n        return new AppendBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a BlockBlobClient object.\n     *\n     */\n    getBlockBlobClient() {\n        return new BlockBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a PageBlobClient object.\n     *\n     */\n    getPageBlobClient() {\n        return new PageBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Reads or downloads a blob from the system, including its metadata and properties.\n     * You can also call Get Blob to read a snapshot.\n     *\n     * * In Node.js, data returns in a Readable stream readableStreamBody\n     * * In browsers, data returns in a promise blobBody\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n     *\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Optional options to Blob Download operation.\n     *\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n     * console.log(\"Downloaded blob content:\", downloaded.toString());\n     *\n     * async function streamToBuffer(readableStream) {\n     * return new Promise((resolve, reject) => {\n     * const chunks = [];\n     * readableStream.on(\"data\", (data) => {\n     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     * });\n     * readableStream.on(\"end\", () => {\n     * resolve(Buffer.concat(chunks));\n     * });\n     * readableStream.on(\"error\", reject);\n     * });\n     * }\n     * ```\n     *\n     * Example usage (browser):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n     * console.log(\n     *   \"Downloaded blob content\",\n     *   downloaded\n     * );\n     *\n     * async function blobToString(blob: Blob): Promise<string> {\n     *   const fileReader = new FileReader();\n     *   return new Promise<string>((resolve, reject) => {\n     *     fileReader.onloadend = (ev: any) => {\n     *       resolve(ev.target!.result);\n     *     };\n     *     fileReader.onerror = reject;\n     *     fileReader.readAsText(blob);\n     *   });\n     * }\n     * ```\n     */\n    async download(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-download\", options, async (updatedOptions) => {\n            var _a;\n            const res = assertResponse(await this.blobContext.download({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onDownloadProgress: isNode ? undefined : options.onProgress, // for Node.js, progress is reported by RetriableReadableStream\n                },\n                range: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n                rangeGetContentMD5: options.rangeGetContentMD5,\n                rangeGetContentCRC64: options.rangeGetContentCrc64,\n                snapshot: options.snapshot,\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });\n            // Return browser response immediately\n            if (!isNode) {\n                return wrappedRes;\n            }\n            // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n                // TODO: Default value or make it a required parameter?\n                options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n            if (res.contentLength === undefined) {\n                throw new RangeError(`File download response doesn't contain valid content length header`);\n            }\n            if (!res.etag) {\n                throw new RangeError(`File download response doesn't contain valid etag header`);\n            }\n            return new BlobDownloadResponse(wrappedRes, async (start) => {\n                var _a;\n                const updatedDownloadOptions = {\n                    leaseAccessConditions: options.conditions,\n                    modifiedAccessConditions: {\n                        ifMatch: options.conditions.ifMatch || res.etag,\n                        ifModifiedSince: options.conditions.ifModifiedSince,\n                        ifNoneMatch: options.conditions.ifNoneMatch,\n                        ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,\n                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions,\n                    },\n                    range: rangeToString({\n                        count: offset + res.contentLength - start,\n                        offset: start,\n                    }),\n                    rangeGetContentMD5: options.rangeGetContentMD5,\n                    rangeGetContentCRC64: options.rangeGetContentCrc64,\n                    snapshot: options.snapshot,\n                    cpkInfo: options.customerProvidedKey,\n                };\n                // Debug purpose only\n                // console.log(\n                //   `Read from internal stream, range: ${\n                //     updatedOptions.range\n                //   }, options: ${JSON.stringify(updatedOptions)}`\n                // );\n                return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;\n            }, offset, res.contentLength, {\n                maxRetryRequests: options.maxRetryRequests,\n                onProgress: options.onProgress,\n            });\n        });\n    }\n    /**\n     * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing blob might be deleted by other clients or\n     * applications. Vice versa new blobs might be added by other clients or applications after this\n     * function completes.\n     *\n     * @param options - options to Exists operation.\n     */\n    async exists(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-exists\", options, async (updatedOptions) => {\n            try {\n                ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    // Expected exception when checking blob existence\n                    return false;\n                }\n                else if (e.statusCode === 409 &&\n                    (e.details.errorCode === BlobUsesCustomerSpecifiedEncryptionMsg ||\n                        e.details.errorCode === BlobDoesNotUseCustomerSpecifiedEncryption)) {\n                    // Expected exception when checking blob existence\n                    return true;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Returns all user-defined metadata, standard HTTP properties, and system properties\n     * for the blob. It does not return the content of the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Optional options to Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-getProperties\", options, async (updatedOptions) => {\n            var _a;\n            const res = assertResponse(await this.blobContext.getProperties({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async delete(options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"BlobClient-delete\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.delete({\n                abortSignal: options.abortSignal,\n                deleteSnapshots: options.deleteSnapshots,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = assertResponse(await this.delete(updatedOptions));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Restores the contents and metadata of soft deleted blob and any associated\n     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n     * or later.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n     *\n     * @param options - Optional options to Blob Undelete operation.\n     */\n    async undelete(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-undelete\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.undelete({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets system properties on the blob.\n     *\n     * If no value provided, or no value provided for the specified blob HTTP headers,\n     * these blob HTTP headers without a value will be cleared.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param blobHTTPHeaders - If no value provided, or no value provided for\n     *                                                   the specified blob HTTP headers, these blob HTTP\n     *                                                   headers without a value will be cleared.\n     *                                                   A common header to set is `blobContentType`\n     *                                                   enabling the browser to provide functionality\n     *                                                   based on file type.\n     * @param options - Optional options to Blob Set HTTP Headers operation.\n     */\n    async setHTTPHeaders(blobHTTPHeaders, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-setHTTPHeaders\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setHttpHeaders({\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n     *\n     * If no option provided, or no metadata defined in the parameter, the blob\n     * metadata will be removed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                               If no value provided the existing metadata will be removed.\n     * @param options - Optional options to Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-setMetadata\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets tags on the underlying blob.\n     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n     * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n     *\n     * @param tags -\n     * @param options -\n     */\n    async setTags(tags, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setTags\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n                tags: toBlobTags(tags),\n            }));\n        });\n    }\n    /**\n     * Gets the tags associated with the underlying blob.\n     *\n     * @param options -\n     */\n    async getTags(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-getTags\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.blobContext.getTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: toTags({ blobTagSet: response.blobTagSet }) || {} });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the blob.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the blob.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a read-only snapshot of a blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n     *\n     * @param options - Optional options to the Blob Create Snapshot operation.\n     */\n    async createSnapshot(options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlobClient-createSnapshot\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.createSnapshot({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * This method returns a long running operation poller that allows you to wait\n     * indefinitely until the copy is completed.\n     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n     * Note that the onProgress callback will not be invoked if the operation completes in the first\n     * request, and attempting to cancel a completed copy will result in an error being thrown.\n     *\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * Example using automatic polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using manual polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * while (!poller.isDone()) {\n     *    await poller.poll();\n     * }\n     * const result = copyPoller.getResult();\n     * ```\n     *\n     * Example using progress updates:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   onProgress(state) {\n     *     console.log(`Progress: ${state.copyProgress}`);\n     *   }\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using a changing polling interval (default 15 seconds):\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using copy cancellation:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * // cancel operation after starting it.\n     * try {\n     *   await copyPoller.cancelOperation();\n     *   // calls to get the result now throw PollerCancelledError\n     *   await copyPoller.getResult();\n     * } catch (err) {\n     *   if (err.name === 'PollerCancelledError') {\n     *     console.log('The copy was cancelled.');\n     *   }\n     * }\n     * ```\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async beginCopyFromURL(copySource, options = {}) {\n        const client = {\n            abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),\n            getProperties: (...args) => this.getProperties(...args),\n            startCopyFromURL: (...args) => this.startCopyFromURL(...args),\n        };\n        const poller = new BlobBeginCopyFromUrlPoller({\n            blobClient: client,\n            copySource,\n            intervalInMs: options.intervalInMs,\n            onProgress: options.onProgress,\n            resumeFrom: options.resumeFrom,\n            startCopyFromURLOptions: options,\n        });\n        // Trigger the startCopyFromURL call by calling poll.\n        // Any errors from this method should be surfaced to the user.\n        await poller.poll();\n        return poller;\n    }\n    /**\n     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n     * length and full metadata. Version 2012-02-12 and newer.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n     *\n     * @param copyId - Id of the Copy From URL operation.\n     * @param options - Optional options to the Blob Abort Copy From URL operation.\n     */\n    async abortCopyFromURL(copyId, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-abortCopyFromURL\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.abortCopyFromURL(copyId, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n     * return a response until the copy is complete.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n     *\n     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n     * @param options -\n     */\n    async syncCopyFromURL(copySource, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        return tracingClient.withSpan(\"BlobClient-syncCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            return assertResponse(await this.blobContext.copyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                metadata: options.metadata,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                sourceContentMD5: options.sourceContentMD5,\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,\n                immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,\n                legalHold: options.legalHold,\n                encryptionScope: options.encryptionScope,\n                copySourceTags: options.copySourceTags,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant\n     * storage only). A premium page blob's tier determines the allowed size, IOPS,\n     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n     * storage type. This operation does not update the blob's ETag.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n     *\n     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n     * @param options - Optional options to the Blob Set Tier operation.\n     */\n    async setAccessTier(tier, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setAccessTier\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.blobContext.setTier(toAccessTier(tier), {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                rehydratePriority: options.rehydratePriority,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    async downloadToBuffer(param1, param2, param3, param4 = {}) {\n        var _a;\n        let buffer;\n        let offset = 0;\n        let count = 0;\n        let options = param4;\n        if (param1 instanceof Buffer) {\n            buffer = param1;\n            offset = param2 || 0;\n            count = typeof param3 === \"number\" ? param3 : 0;\n        }\n        else {\n            offset = typeof param1 === \"number\" ? param1 : 0;\n            count = typeof param2 === \"number\" ? param2 : 0;\n            options = param3 || {};\n        }\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0) {\n            throw new RangeError(\"blockSize option must be >= 0\");\n        }\n        if (blockSize === 0) {\n            blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n        if (offset < 0) {\n            throw new RangeError(\"offset option must be >= 0\");\n        }\n        if (count && count <= 0) {\n            throw new RangeError(\"count option must be greater than 0\");\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"BlobClient-downloadToBuffer\", options, async (updatedOptions) => {\n            // Customer doesn't specify length, get it\n            if (!count) {\n                const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n                count = response.contentLength - offset;\n                if (count < 0) {\n                    throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);\n                }\n            }\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n                try {\n                    buffer = Buffer.alloc(count);\n                }\n                catch (error) {\n                    throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\\t ${error.message}`);\n                }\n            }\n            if (buffer.length < count) {\n                throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);\n            }\n            let transferProgress = 0;\n            const batch = new Batch(options.concurrency);\n            for (let off = offset; off < offset + count; off = off + blockSize) {\n                batch.addOperation(async () => {\n                    // Exclusive chunk end position\n                    let chunkEnd = offset + count;\n                    if (off + blockSize < chunkEnd) {\n                        chunkEnd = off + blockSize;\n                    }\n                    const response = await this.download(off, chunkEnd - off, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        maxRetryRequests: options.maxRetryRequestsPerBlock,\n                        customerProvidedKey: options.customerProvidedKey,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    const stream = response.readableStreamBody;\n                    await streamToBuffer(stream, buffer, off - offset, chunkEnd - offset);\n                    // Update progress after block is downloaded, in case of block trying\n                    // Could provide finer grained progress updating inside HTTP requests,\n                    // only if convenience layer download try is enabled\n                    transferProgress += chunkEnd - off;\n                    if (options.onProgress) {\n                        options.onProgress({ loadedBytes: transferProgress });\n                    }\n                });\n            }\n            await batch.do();\n            return buffer;\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Downloads an Azure Blob to a local file.\n     * Fails if the the given file path already exits.\n     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n     *\n     * @param filePath -\n     * @param offset - From which position of the block blob to download.\n     * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n     * @param options - Options to Blob download options.\n     * @returns The response data for blob download operation,\n     *                                                 but with readableStreamBody set to undefined since its\n     *                                                 content is already read and written into a local file\n     *                                                 at the specified path.\n     */\n    async downloadToFile(filePath, offset = 0, count, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-downloadToFile\", options, async (updatedOptions) => {\n            const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n            if (response.readableStreamBody) {\n                await readStreamToLocalFile(response.readableStreamBody, filePath);\n            }\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return response;\n        });\n    }\n    getBlobAndContainerNamesFromUrl() {\n        let containerName;\n        let blobName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n            // http://localhost:10001/devstoreaccount1/containername/blob\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.host.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            else if (isIpEndpointStyle(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n                // .getPath() -> /devstoreaccount1/containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)/([^/]*)(/(.*))?\");\n                containerName = pathComponents[2];\n                blobName = pathComponents[4];\n            }\n            else {\n                // \"https://customdomain.com/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n            containerName = decodeURIComponent(containerName);\n            blobName = decodeURIComponent(blobName);\n            // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n            //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n            blobName = blobName.replace(/\\\\/g, \"/\");\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return { blobName, containerName };\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n        }\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async startCopyFromURL(copySource, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-startCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            return assertResponse(await this.blobContext.startCopyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: options.sourceConditions.ifMatch,\n                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n                    sourceIfTags: options.sourceConditions.tagConditions,\n                },\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                rehydratePriority: options.rehydratePriority,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                sealBlob: options.sealBlob,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();\n            resolve(appendToURLQuery(this.url, sas));\n        });\n    }\n    /**\n     * Delete the immutablility policy on the blob.\n     *\n     * @param options - Optional options to delete immutability policy on the blob.\n     */\n    async deleteImmutabilityPolicy(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-deleteImmutabilityPolicy\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.deleteImmutabilityPolicy({\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set immutability policy on the blob.\n     *\n     * @param options - Optional options to set immutability policy on the blob.\n     */\n    async setImmutabilityPolicy(immutabilityPolicy, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setImmutabilityPolicy\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.setImmutabilityPolicy({\n                immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,\n                immutabilityPolicyMode: immutabilityPolicy.policyMode,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set legal hold on the blob.\n     *\n     * @param options - Optional options to set legal hold on the blob.\n     */\n    async setLegalHold(legalHoldEnabled, options = {}) {\n        return tracingClient.withSpan(\"BlobClient-setLegalHold\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.setLegalHold(legalHoldEnabled, {\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return tracingClient.withSpan(\"BlobClient-getAccountInfo\", options, async (updatedOptions) => {\n            return assertResponse(await this.blobContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n */\nexport class AppendBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            // The second parameter is undefined. Use anonymous credential.\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.appendBlobContext = this.storageClientContext.appendBlob;\n    }\n    /**\n     * Creates a new AppendBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options - Options to the Append Block Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await appendBlobClient.create();\n     * ```\n     */\n    async create(options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"AppendBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.appendBlobContext.create(0, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        const conditions = { ifNoneMatch: ETagAny };\n        return tracingClient.withSpan(\"AppendBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = assertResponse(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Seals the append blob, making it read only.\n     *\n     * @param options -\n     */\n    async seal(options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"AppendBlobClient-seal\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.appendBlobContext.seal({\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Commits a new block of data to the end of the existing append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n     *\n     * @param body - Data to be appended.\n     * @param contentLength - Length of the body in bytes.\n     * @param options - Options to the Append Block operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello World!\";\n     *\n     * // Create a new append blob and append data to the blob.\n     * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await newAppendBlobClient.create();\n     * await newAppendBlobClient.appendBlock(content, content.length);\n     *\n     * // Append data to an existing append blob.\n     * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await existingAppendBlobClient.appendBlock(content, content.length);\n     * ```\n     */\n    async appendBlock(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"AppendBlobClient-appendBlock\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.appendBlobContext.appendBlock(contentLength, body, {\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob\n     * where the contents are read from a source url.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n     *\n     * @param sourceURL -\n     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n     *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n     *                 public, no authentication is required to perform the operation.\n     * @param sourceOffset - Offset in source to be appended\n     * @param count - Number of bytes to be appended as a block\n     * @param options -\n     */\n    async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"AppendBlobClient-appendBlockFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return assertResponse(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n                abortSignal: options.abortSignal,\n                sourceRange: rangeToString({ offset: sourceOffset, count }),\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                appendPositionAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n */\nexport class BlockBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.blockBlobContext = this.storageClientContext.blockBlob;\n        this._blobContext = this.storageClientContext.blob;\n    }\n    /**\n     * Creates a new BlockBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a URL to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Quick query for a JSON or CSV formatted blob.\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Query and convert a blob to a string\n     * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n     * console.log(\"Query blob content:\", downloaded);\n     *\n     * async function streamToBuffer(readableStream) {\n     *   return new Promise((resolve, reject) => {\n     *     const chunks = [];\n     *     readableStream.on(\"data\", (data) => {\n     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     *     });\n     *     readableStream.on(\"end\", () => {\n     *       resolve(Buffer.concat(chunks));\n     *     });\n     *     readableStream.on(\"error\", reject);\n     *   });\n     * }\n     * ```\n     *\n     * @param query -\n     * @param options -\n     */\n    async query(query, options = {}) {\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        if (!isNode) {\n            throw new Error(\"This operation currently is only supported in Node.js.\");\n        }\n        return tracingClient.withSpan(\"BlockBlobClient-query\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this._blobContext.query({\n                abortSignal: options.abortSignal,\n                queryRequest: {\n                    queryType: \"SQL\",\n                    expression: query,\n                    inputSerialization: toQuerySerialization(options.inputTextConfiguration),\n                    outputSerialization: toQuerySerialization(options.outputTextConfiguration),\n                },\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return new BlobQueryResponse(response, {\n                abortSignal: options.abortSignal,\n                onProgress: options.onProgress,\n                onError: options.onError,\n            });\n        });\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link stageBlock} and {@link commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link uploadFile},\n     * {@link uploadStream} or {@link uploadBrowserData} for better performance\n     * with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to the Block Blob Upload operation.\n     * @returns Response data for the Block Blob Upload operation.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    async upload(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-upload\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.blockBlobContext.upload(contentLength, body, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a new Block Blob where the contents of the blob are read from a given URL.\n     * This API is supported beginning with the 2020-04-08 version. Partial updates\n     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with\n     * the content of the new blob.  To perform partial updates to a block blob’s contents using a\n     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.\n     *\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Optional parameters.\n     */\n    async syncUploadFromURL(sourceURL, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-syncUploadFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f;\n            return assertResponse(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }), sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                    sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions,\n                }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Uploads the specified block to the block blob's \"staging area\" to be later\n     * committed by a call to commitBlockList.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param body - Data to upload to the staging area.\n     * @param contentLength - Number of bytes to upload.\n     * @param options - Options to the Block Blob Stage Block operation.\n     * @returns Response data for the Block Blob Stage Block operation.\n     */\n    async stageBlock(blockId, body, contentLength, options = {}) {\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-stageBlock\", options, async (updatedOptions) => {\n            return assertResponse(await this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Stage Block From URL operation creates a new block to be committed as part\n     * of a blob where the contents are read from a URL.\n     * This API is available starting in version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Options to the Block Blob Stage Block From URL operation.\n     * @returns Response data for the Block Blob Stage Block From URL operation.\n     */\n    async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {}) {\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-stageBlockFromURL\", options, async (updatedOptions) => {\n            return assertResponse(await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                sourceRange: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Writes a blob by specifying the list of block IDs that make up the blob.\n     * In order to be written as part of a blob, a block must have been successfully written\n     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n     * update a blob by uploading only those blocks that have changed, then committing the new and existing\n     * blocks together. Any blocks not specified in the block list and permanently deleted.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n     *\n     * @param blocks -  Array of 64-byte value that is base64-encoded\n     * @param options - Options to the Block Blob Commit Block List operation.\n     * @returns Response data for the Block Blob Commit Block List operation.\n     */\n    async commitBlockList(blocks, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"BlockBlobClient-commitBlockList\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.blockBlobContext.commitBlockList({ latest: blocks }, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of blocks that have been uploaded as part of a block blob\n     * using the specified block list filter.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n     *\n     * @param listType - Specifies whether to return the list of committed blocks,\n     *                                        the list of uncommitted blocks, or both lists together.\n     * @param options - Options to the Block Blob Get Block List operation.\n     * @returns Response data for the Block Blob Get Block List operation.\n     */\n    async getBlockList(listType, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-getBlockList\", options, async (updatedOptions) => {\n            var _a;\n            const res = assertResponse(await this.blockBlobContext.getBlockList(listType, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            if (!res.committedBlocks) {\n                res.committedBlocks = [];\n            }\n            if (!res.uncommittedBlocks) {\n                res.uncommittedBlocks = [];\n            }\n            return res;\n        });\n    }\n    // High level functions\n    /**\n     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n     *\n     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n     * @param options -\n     */\n    async uploadData(data, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-uploadData\", options, async (updatedOptions) => {\n            if (isNode) {\n                let buffer;\n                if (data instanceof Buffer) {\n                    buffer = data;\n                }\n                else if (data instanceof ArrayBuffer) {\n                    buffer = Buffer.from(data);\n                }\n                else {\n                    data = data;\n                    buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n                }\n                return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);\n            }\n            else {\n                const browserBlob = new Blob([data]);\n                return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n            }\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN BROWSERS.\n     *\n     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n     *\n     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n     * {@link commitBlockList} to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @deprecated Use {@link uploadData} instead.\n     *\n     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView\n     * @param options - Options to upload browser data.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadBrowserData(browserData, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-uploadBrowserData\", options, async (updatedOptions) => {\n            const browserBlob = new Blob([browserData]);\n            return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n        });\n    }\n    /**\n     *\n     * Uploads data to block blob. Requires a bodyFactory as the data source,\n     * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n     *\n     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * @param bodyFactory -\n     * @param size - size of the data to upload.\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadSeekableInternal(bodyFactory, size, options = {}) {\n        var _a, _b;\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0 || blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n            throw new RangeError(`blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);\n        }\n        const maxSingleShotSize = (_b = options.maxSingleShotSize) !== null && _b !== void 0 ? _b : BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n        if (maxSingleShotSize < 0 || maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n            throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);\n        }\n        if (blockSize === 0) {\n            if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`${size} is too larger to upload to a block blob.`);\n            }\n            if (size > maxSingleShotSize) {\n                blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n                if (blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                    blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n            }\n        }\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"BlockBlobClient-uploadSeekableInternal\", options, async (updatedOptions) => {\n            if (size <= maxSingleShotSize) {\n                return assertResponse(await this.upload(bodyFactory(0, size), size, updatedOptions));\n            }\n            const numBlocks = Math.floor((size - 1) / blockSize) + 1;\n            if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`The buffer's size is too big or the BlockSize is too small;` +\n                    `the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`);\n            }\n            const blockList = [];\n            const blockIDPrefix = randomUUID();\n            let transferProgress = 0;\n            const batch = new Batch(options.concurrency);\n            for (let i = 0; i < numBlocks; i++) {\n                batch.addOperation(async () => {\n                    const blockID = generateBlockID(blockIDPrefix, i);\n                    const start = blockSize * i;\n                    const end = i === numBlocks - 1 ? size : start + blockSize;\n                    const contentLength = end - start;\n                    blockList.push(blockID);\n                    await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    // Update progress after block is successfully uploaded to server, in case of block trying\n                    // TODO: Hook with convenience layer progress event in finer level\n                    transferProgress += contentLength;\n                    if (options.onProgress) {\n                        options.onProgress({\n                            loadedBytes: transferProgress,\n                        });\n                    }\n                });\n            }\n            await batch.do();\n            return this.commitBlockList(blockList, updatedOptions);\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a local file in blocks to a block blob.\n     *\n     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n     * to commit the block list.\n     *\n     * @param filePath - Full path of local file\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadFile(filePath, options = {}) {\n        return tracingClient.withSpan(\"BlockBlobClient-uploadFile\", options, async (updatedOptions) => {\n            const size = (await fsStat(filePath)).size;\n            return this.uploadSeekableInternal((offset, count) => {\n                return () => fsCreateReadStream(filePath, {\n                    autoClose: true,\n                    end: count ? offset + count - 1 : Infinity,\n                    start: offset,\n                });\n            }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a Node.js Readable stream into block blob.\n     *\n     * PERFORMANCE IMPROVEMENT TIPS:\n     * * Input stream highWaterMark is better to set a same value with bufferSize\n     *    parameter, which will avoid Buffer.concat() operations.\n     *\n     * @param stream - Node.js Readable stream\n     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,\n     *                                 positive correlation with max uploading concurrency. Default value is 5\n     * @param options - Options to Upload Stream to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadStream(stream, bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"BlockBlobClient-uploadStream\", options, async (updatedOptions) => {\n            let blockNum = 0;\n            const blockIDPrefix = randomUUID();\n            let transferProgress = 0;\n            const blockList = [];\n            const scheduler = new BufferScheduler(stream, bufferSize, maxConcurrency, async (body, length) => {\n                const blockID = generateBlockID(blockIDPrefix, blockNum);\n                blockList.push(blockID);\n                blockNum++;\n                await this.stageBlock(blockID, body, length, {\n                    conditions: options.conditions,\n                    encryptionScope: options.encryptionScope,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                // Update progress after block is successfully uploaded to server, in case of block trying\n                transferProgress += length;\n                if (options.onProgress) {\n                    options.onProgress({ loadedBytes: transferProgress });\n                }\n            }, \n            // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil((maxConcurrency / 4) * 3));\n            await scheduler.do();\n            return assertResponse(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n}\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n */\nexport class PageBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.pageBlobContext = this.storageClientContext.pageBlob;\n    }\n    /**\n     * Creates a new PageBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options - Options to the Page Blob Create operation.\n     * @returns Response data for the Page Blob Create operation.\n     */\n    async create(size, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"PageBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return assertResponse(await this.pageBlobContext.create(0, size, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                blobSequenceNumber: options.blobSequenceNumber,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: toAccessTier(options.tier),\n                blobTagsString: toBlobTagsString(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob. If the blob with the same name already exists, the content\n     * of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options -\n     */\n    async createIfNotExists(size, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const conditions = { ifNoneMatch: ETagAny };\n                const res = assertResponse(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param body - Data to upload\n     * @param offset - Offset of destination page blob\n     * @param count - Content length of the body, also number of bytes to be uploaded\n     * @param options - Options to the Page Blob Upload Pages operation.\n     * @returns Response data for the Page Blob Upload Pages operation.\n     */\n    async uploadPages(body, offset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"PageBlobClient-uploadPages\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.uploadPages(count, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                range: rangeToString({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the\n     * contents are read from a URL.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n     *\n     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n     * @param destOffset - Offset of destination page blob\n     * @param count - Number of bytes to be uploaded from source page blob\n     * @param options -\n     */\n    async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n        return tracingClient.withSpan(\"PageBlobClient-uploadPagesFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return assertResponse(await this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({ offset: sourceOffset, count }), 0, rangeToString({ offset: destOffset, count }), {\n                abortSignal: options.abortSignal,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                sequenceNumberAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Frees the specified pages from the page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param offset - Starting byte position of the pages to clear.\n     * @param count - Number of bytes to clear.\n     * @param options - Options to the Page Blob Clear Pages operation.\n     * @returns Response data for the Page Blob Clear Pages operation.\n     */\n    async clearPages(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-clearPages\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.clearPages(0, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: rangeToString({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns Response data for the Page Blob Get Ranges operation.\n     */\n    async getPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-getPageRanges\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: rangeToString({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return rangeResponseFromModel(response);\n        });\n    }\n    /**\n     * getPageRangesSegment returns a single segment of page ranges starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to PageBlob Get Page Ranges Segment operation.\n     */\n    async listPageRangesSegment(offset = 0, count, marker, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-getPageRangesSegment\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: rangeToString({ offset, count }),\n                marker: marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItemSegments() {\n        return __asyncGenerator(this, arguments, function* listPageRangeItemSegments_1(offset = 0, count, marker, options = {}) {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesSegment(offset, count, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield __await(yield __await(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItems() {\n        return __asyncGenerator(this, arguments, function* listPageRangeItems_1(offset = 0, count, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listPageRangeItemSegments(offset, count, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges for a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRanges()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRanges();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeItems(offset, count, options);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-getPageRangesDiff\", options, async (updatedOptions) => {\n            var _a;\n            const result = assertResponse(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshot,\n                range: rangeToString({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return rangeResponseFromModel(result);\n        });\n    }\n    /**\n     * getPageRangesDiffSegment returns a single segment of page ranges starting from the\n     * specified Marker for difference between previous snapshot and the target page blob.\n     * Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesDiffSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-getPageRangesDiffSegment\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n                leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshotOrUrl,\n                range: rangeToString({\n                    offset: offset,\n                    count: count,\n                }),\n                marker: marker,\n                maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}\n     *\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {\n        return __asyncGenerator(this, arguments, function* listPageRangeDiffItemSegments_1() {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield __await(yield __await(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {\n        return __asyncGenerator(this, arguments, function* listPageRangeDiffItems_1() {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRangesDiff();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevSnapshotUrl,\n                range: rangeToString({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return rangeResponseFromModel(response);\n        });\n    }\n    /**\n     * Resizes the page blob to the specified size (which must be a multiple of 512).\n     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n     *\n     * @param size - Target size\n     * @param options - Options to the Page Blob Resize operation.\n     * @returns Response data for the Page Blob Resize operation.\n     */\n    async resize(size, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-resize\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.resize(size, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets a page blob's sequence number.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.\n     * @param sequenceNumber - Required if sequenceNumberAction is max or update\n     * @param options - Options to the Page Blob Update Sequence Number operation.\n     * @returns Response data for the Page Blob Update Sequence Number operation.\n     */\n    async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"PageBlobClient-updateSequenceNumber\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n                abortSignal: options.abortSignal,\n                blobSequenceNumber: sequenceNumber,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n     * The snapshot is copied such that only the differential changes between the previously\n     * copied snapshot are transferred to the destination.\n     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n     *\n     * @param copySource - Specifies the name of the source page blob snapshot. For example,\n     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Options to the Page Blob Copy Incremental operation.\n     * @returns Response data for the Page Blob Copy Incremental operation.\n     */\n    async startCopyIncremental(copySource, options = {}) {\n        return tracingClient.withSpan(\"PageBlobClient-startCopyIncremental\", options, async (updatedOptions) => {\n            var _a;\n            return assertResponse(await this.pageBlobContext.copyIncremental(copySource, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n//# sourceMappingURL=Clients.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { toHttpHeadersLike } from \"@azure/core-http-compat\";\nimport { HTTP_VERSION_1_1, HTTP_LINE_ENDING, HeaderConstants, HTTPURLConnection, } from \"./utils/constants\";\nimport { getBodyAsText } from \"./BatchUtils\";\nimport { logger } from \"./log\";\nconst HTTP_HEADER_DELIMITER = \": \";\nconst SPACE_DELIMITER = \" \";\nconst NOT_FOUND = -1;\n/**\n * Util class for parsing batch response.\n */\nexport class BatchResponseParser {\n    constructor(batchResponse, subRequests) {\n        if (!batchResponse || !batchResponse.contentType) {\n            // In special case(reported), server may return invalid content-type which could not be parsed.\n            throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n        }\n        if (!subRequests || subRequests.size === 0) {\n            // This should be prevent during coding.\n            throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n        }\n        this.batchResponse = batchResponse;\n        this.subRequests = subRequests;\n        this.responseBatchBoundary = this.batchResponse.contentType.split(\"=\")[1];\n        this.perResponsePrefix = `--${this.responseBatchBoundary}${HTTP_LINE_ENDING}`;\n        this.batchResponseEnding = `--${this.responseBatchBoundary}--`;\n    }\n    // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n    async parseBatchResponse() {\n        // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse\n        // sub request's response.\n        if (this.batchResponse._response.status !== HTTPURLConnection.HTTP_ACCEPTED) {\n            throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);\n        }\n        const responseBodyAsText = await getBodyAsText(this.batchResponse);\n        const subResponses = responseBodyAsText\n            .split(this.batchResponseEnding)[0] // string after ending is useless\n            .split(this.perResponsePrefix)\n            .slice(1); // string before first response boundary is useless\n        const subResponseCount = subResponses.length;\n        // Defensive coding in case of potential error parsing.\n        // Note: subResponseCount == 1 is special case where sub request is invalid.\n        // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n        // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n        if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {\n            throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n        }\n        const deserializedSubResponses = new Array(subResponseCount);\n        let subResponsesSucceededCount = 0;\n        let subResponsesFailedCount = 0;\n        // Parse sub subResponses.\n        for (let index = 0; index < subResponseCount; index++) {\n            const subResponse = subResponses[index];\n            const deserializedSubResponse = {};\n            deserializedSubResponse.headers = toHttpHeadersLike(createHttpHeaders());\n            const responseLines = subResponse.split(`${HTTP_LINE_ENDING}`);\n            let subRespHeaderStartFound = false;\n            let subRespHeaderEndFound = false;\n            let subRespFailed = false;\n            let contentId = NOT_FOUND;\n            for (const responseLine of responseLines) {\n                if (!subRespHeaderStartFound) {\n                    // Convention line to indicate content ID\n                    if (responseLine.startsWith(HeaderConstants.CONTENT_ID)) {\n                        contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n                    }\n                    // Http version line with status code indicates the start of sub request's response.\n                    // Example: HTTP/1.1 202 Accepted\n                    if (responseLine.startsWith(HTTP_VERSION_1_1)) {\n                        subRespHeaderStartFound = true;\n                        const tokens = responseLine.split(SPACE_DELIMITER);\n                        deserializedSubResponse.status = parseInt(tokens[1]);\n                        deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n                    }\n                    continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *\n                }\n                if (responseLine.trim() === \"\") {\n                    // Sub response's header start line already found, and the first empty line indicates header end line found.\n                    if (!subRespHeaderEndFound) {\n                        subRespHeaderEndFound = true;\n                    }\n                    continue; // Skip empty line\n                }\n                // Note: when code reach here, it indicates subRespHeaderStartFound == true\n                if (!subRespHeaderEndFound) {\n                    if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {\n                        // Defensive coding to prevent from missing valuable lines.\n                        throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);\n                    }\n                    // Parse headers of sub response.\n                    const tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n                    deserializedSubResponse.headers.set(tokens[0], tokens[1]);\n                    if (tokens[0] === HeaderConstants.X_MS_ERROR_CODE) {\n                        deserializedSubResponse.errorCode = tokens[1];\n                        subRespFailed = true;\n                    }\n                }\n                else {\n                    // Assemble body of sub response.\n                    if (!deserializedSubResponse.bodyAsText) {\n                        deserializedSubResponse.bodyAsText = \"\";\n                    }\n                    deserializedSubResponse.bodyAsText += responseLine;\n                }\n            } // Inner for end\n            // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n            // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n            // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n            // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n            if (contentId !== NOT_FOUND &&\n                Number.isInteger(contentId) &&\n                contentId >= 0 &&\n                contentId < this.subRequests.size &&\n                deserializedSubResponses[contentId] === undefined) {\n                deserializedSubResponse._request = this.subRequests.get(contentId);\n                deserializedSubResponses[contentId] = deserializedSubResponse;\n            }\n            else {\n                logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);\n            }\n            if (subRespFailed) {\n                subResponsesFailedCount++;\n            }\n            else {\n                subResponsesSucceededCount++;\n            }\n        }\n        return {\n            subResponses: deserializedSubResponses,\n            subResponsesSucceededCount: subResponsesSucceededCount,\n            subResponsesFailedCount: subResponsesFailedCount,\n        };\n    }\n}\n//# sourceMappingURL=BatchResponseParser.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar MutexLockStatus;\n(function (MutexLockStatus) {\n    MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n    MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n})(MutexLockStatus || (MutexLockStatus = {}));\n/**\n * An async mutex lock.\n */\nexport class Mutex {\n    /**\n     * Lock for a specific key. If the lock has been acquired by another customer, then\n     * will wait until getting the lock.\n     *\n     * @param key - lock key\n     */\n    static async lock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {\n                this.keys[key] = MutexLockStatus.LOCKED;\n                resolve();\n            }\n            else {\n                this.onUnlockEvent(key, () => {\n                    this.keys[key] = MutexLockStatus.LOCKED;\n                    resolve();\n                });\n            }\n        });\n    }\n    /**\n     * Unlock a key.\n     *\n     * @param key -\n     */\n    static async unlock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === MutexLockStatus.LOCKED) {\n                this.emitUnlockEvent(key);\n            }\n            delete this.keys[key];\n            resolve();\n        });\n    }\n    static onUnlockEvent(key, handler) {\n        if (this.listeners[key] === undefined) {\n            this.listeners[key] = [handler];\n        }\n        else {\n            this.listeners[key].push(handler);\n        }\n    }\n    static emitUnlockEvent(key) {\n        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n            const handler = this.listeners[key].shift();\n            setImmediate(() => {\n                handler.call(this);\n            });\n        }\n    }\n}\nMutex.keys = {};\nMutex.listeners = {};\n//# sourceMappingURL=Mutex.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** Known values of {@link EncryptionAlgorithmType} that the service accepts. */\nexport var KnownEncryptionAlgorithmType;\n(function (KnownEncryptionAlgorithmType) {\n    KnownEncryptionAlgorithmType[\"AES256\"] = \"AES256\";\n})(KnownEncryptionAlgorithmType || (KnownEncryptionAlgorithmType = {}));\n//# sourceMappingURL=generatedModels.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageContextClient } from \"./StorageContextClient\";\nimport { newPipeline, isPipelineLike, getCoreClientOptions, } from \"./Pipeline\";\nimport { assertResponse, getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if (isPipelineLike(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if (!credentialOrPipeline) {\n            // no credential provided\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else {\n            pipeline = newPipeline(credentialOrPipeline, options);\n        }\n        const storageClientContext = new StorageContextClient(url, getCoreClientOptions(pipeline));\n        const path = getURLPath(url);\n        if (path && path !== \"/\") {\n            // Container scoped.\n            this.serviceOrContainerContext = storageClientContext.container;\n        }\n        else {\n            this.serviceOrContainerContext = storageClientContext.service;\n        }\n    }\n    /**\n     * Creates a {@link BlobBatch}.\n     * A BlobBatch represents an aggregated set of operations on blobs.\n     */\n    createBatch() {\n        return new BlobBatch();\n    }\n    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n            }\n            else {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n            }\n            else {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n    async submitBatch(batchRequest, options = {}) {\n        if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n            throw new RangeError(\"Batch request should contain one or more sub requests.\");\n        }\n        return tracingClient.withSpan(\"BlobBatchClient-submitBatch\", options, async (updatedOptions) => {\n            const batchRequestBody = batchRequest.getHttpRequestBody();\n            // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n            const rawBatchResponse = assertResponse(await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));\n            // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n            const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n            const responseSummary = await batchResponseParser.parseBatchResponse();\n            const res = {\n                _response: rawBatchResponse._response,\n                contentType: rawBatchResponse.contentType,\n                errorCode: rawBatchResponse.errorCode,\n                requestId: rawBatchResponse.requestId,\n                clientRequestId: rawBatchResponse.clientRequestId,\n                version: rawBatchResponse.version,\n                subResponses: responseSummary.subResponses,\n                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n            };\n            return res;\n        });\n    }\n}\n//# sourceMappingURL=BlobBatchClient.js.map","import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\nimport { getDefaultProxySettings, } from \"@azure/core-rest-pipeline\";\nimport { isNode } from \"@azure/core-util\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { StorageClient } from \"./StorageClient\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { appendToURLPath, appendToURLQuery, assertResponse, BlobNameToString, ConvertInternalResponseOfListBlobFlat, ConvertInternalResponseOfListBlobHierarchy, EscapePath, extractConnectionStringParts, isIpEndpointStyle, parseObjectReplicationRecord, toTags, truncatedISO8061Date, } from \"./utils/utils.common\";\nimport { generateBlobSASQueryParameters } from \"./sas/BlobSASSignatureValues\";\nimport { BlobLeaseClient } from \"./BlobLeaseClient\";\nimport { AppendBlobClient, BlobClient, BlockBlobClient, PageBlobClient, } from \"./Clients\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n */\nexport class ContainerClient extends StorageClient {\n    /**\n     * The name of the container.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        let url;\n        options = options || {};\n        if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (isNode) {\n                    const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                    }\n                    pipeline = newPipeline(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = newPipeline(new AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName parameter\");\n        }\n        super(url, pipeline);\n        this._containerName = this.getContainerNameFromUrl();\n        this.containerContext = this.storageClientContext.container;\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, the operation fails.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options - Options to Container Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * const createContainerResponse = await containerClient.create();\n     * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n     * ```\n     */\n    async create(options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-create\", options, async (updatedOptions) => {\n            return assertResponse(await this.containerContext.create(updatedOptions));\n        });\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, it is not changed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.create(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n    /**\n     * Returns true if the Azure container resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing container might be deleted by other clients or\n     * applications. Vice versa new containers with the same name might be added by other clients or\n     * applications after this function completes.\n     *\n     * @param options -\n     */\n    async exists(options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-exists\", options, async (updatedOptions) => {\n            try {\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    return false;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Creates a {@link BlobClient}\n     *\n     * @param blobName - A blob name\n     * @returns A new BlobClient object for the given blob name.\n     */\n    getBlobClient(blobName) {\n        return new BlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);\n    }\n    /**\n     * Creates an {@link AppendBlobClient}\n     *\n     * @param blobName - An append blob name\n     */\n    getAppendBlobClient(blobName) {\n        return new AppendBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link BlockBlobClient}\n     *\n     * @param blobName - A block blob name\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     *\n     * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    getBlockBlobClient(blobName) {\n        return new BlockBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link PageBlobClient}\n     *\n     * @param blobName - A page blob name\n     */\n    getPageBlobClient(blobName) {\n        return new PageBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);\n    }\n    /**\n     * Returns all user-defined metadata and system properties for the specified\n     * container. The data returned does not include the container's list of blobs.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Options to Container Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"ContainerClient-getProperties\", options, async (updatedOptions) => {\n            return assertResponse(await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Marks the specified container for deletion. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async delete(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"ContainerClient-delete\", options, async (updatedOptions) => {\n            return assertResponse(await this.containerContext.delete({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified container for deletion if it exists. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.delete(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Sets one or more user-defined name-value pairs for the specified container.\n     *\n     * If no option provided, or no metadata defined in the parameter, the container\n     * metadata will be removed.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                            If no value provided the existing metadata will be removed.\n     * @param options - Options to Container Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        if (options.conditions.ifUnmodifiedSince) {\n            throw new RangeError(\"the IfUnmodifiedSince must have their default values because they are ignored by the blob service\");\n        }\n        return tracingClient.withSpan(\"ContainerClient-setMetadata\", options, async (updatedOptions) => {\n            return assertResponse(await this.containerContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Gets the permissions for the specified container. The permissions indicate\n     * whether container data may be accessed publicly.\n     *\n     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n     * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n     *\n     * @param options - Options to Container Get Access Policy operation.\n     */\n    async getAccessPolicy(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return tracingClient.withSpan(\"ContainerClient-getAccessPolicy\", options, async (updatedOptions) => {\n            const response = assertResponse(await this.containerContext.getAccessPolicy({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const res = {\n                _response: response._response,\n                blobPublicAccess: response.blobPublicAccess,\n                date: response.date,\n                etag: response.etag,\n                errorCode: response.errorCode,\n                lastModified: response.lastModified,\n                requestId: response.requestId,\n                clientRequestId: response.clientRequestId,\n                signedIdentifiers: [],\n                version: response.version,\n            };\n            for (const identifier of response) {\n                let accessPolicy = undefined;\n                if (identifier.accessPolicy) {\n                    accessPolicy = {\n                        permissions: identifier.accessPolicy.permissions,\n                    };\n                    if (identifier.accessPolicy.expiresOn) {\n                        accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n                    }\n                    if (identifier.accessPolicy.startsOn) {\n                        accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n                    }\n                }\n                res.signedIdentifiers.push({\n                    accessPolicy,\n                    id: identifier.id,\n                });\n            }\n            return res;\n        });\n    }\n    /**\n     * Sets the permissions for the specified container. The permissions indicate\n     * whether blobs in a container may be accessed publicly.\n     *\n     * When you set permissions for a container, the existing permissions are replaced.\n     * If no access or containerAcl provided, the existing container ACL will be\n     * removed.\n     *\n     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n     * During this interval, a shared access signature that is associated with the stored access policy will\n     * fail with status code 403 (Forbidden), until the access policy becomes active.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     *\n     * @param access - The level of public access to data in the container.\n     * @param containerAcl - Array of elements each having a unique Id and details of the access policy.\n     * @param options - Options to Container Set Access Policy operation.\n     */\n    async setAccessPolicy(access, containerAcl, options = {}) {\n        options.conditions = options.conditions || {};\n        return tracingClient.withSpan(\"ContainerClient-setAccessPolicy\", options, async (updatedOptions) => {\n            const acl = [];\n            for (const identifier of containerAcl || []) {\n                acl.push({\n                    accessPolicy: {\n                        expiresOn: identifier.accessPolicy.expiresOn\n                            ? truncatedISO8061Date(identifier.accessPolicy.expiresOn)\n                            : \"\",\n                        permissions: identifier.accessPolicy.permissions,\n                        startsOn: identifier.accessPolicy.startsOn\n                            ? truncatedISO8061Date(identifier.accessPolicy.startsOn)\n                            : \"\",\n                    },\n                    id: identifier.id,\n                });\n            }\n            return assertResponse(await this.containerContext.setAccessPolicy({\n                abortSignal: options.abortSignal,\n                access,\n                containerAcl: acl,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the container.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the container.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     *\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n     * performance with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param blobName - Name of the block blob to create or update.\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to configure the Block Blob Upload operation.\n     * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.\n     */\n    async uploadBlockBlob(blobName, body, contentLength, options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-uploadBlockBlob\", options, async (updatedOptions) => {\n            const blockBlobClient = this.getBlockBlobClient(blobName);\n            const response = await blockBlobClient.upload(body, contentLength, updatedOptions);\n            return {\n                blockBlobClient,\n                response,\n            };\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param blobName -\n     * @param options - Options to Blob Delete operation.\n     * @returns Block blob deletion response data.\n     */\n    async deleteBlob(blobName, options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-deleteBlob\", options, async (updatedOptions) => {\n            let blobClient = this.getBlobClient(blobName);\n            if (options.versionId) {\n                blobClient = blobClient.withVersion(options.versionId);\n            }\n            return blobClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * listBlobFlatSegment returns a single segment of blobs starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call listBlobsFlatSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Flat Segment operation.\n     */\n    async listBlobFlatSegment(marker, options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-listBlobFlatSegment\", options, async (updatedOptions) => {\n            const response = assertResponse(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobFlat(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: BlobNameToString(blobItemInternal.name), tags: toTags(blobItemInternal.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * listBlobHierarchySegment returns a single segment of blobs starting from\n     * the specified Marker. Use an empty Marker to start enumeration from the\n     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n     * again (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Hierarchy Segment operation.\n     */\n    async listBlobHierarchySegment(delimiter, marker, options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-listBlobHierarchySegment\", options, async (updatedOptions) => {\n            var _a;\n            const response = assertResponse(await this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: BlobNameToString(blobItemInternal.name), tags: toTags(blobItemInternal.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }), blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                        const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });\n                        return blobPrefix;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n     *\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listSegments(marker_1) {\n        return __asyncGenerator(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listBlobsFlatSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsFlatSegmentResponse = yield __await(this.listBlobFlatSegment(marker, options));\n                    marker = listBlobsFlatSegmentResponse.continuationToken;\n                    yield yield __await(yield __await(listBlobsFlatSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link BlobItem} objects\n     *\n     * @param options - Options to list blobs operation.\n     */\n    listItems() {\n        return __asyncGenerator(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listSegments(marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsFlatSegmentResponse = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the containerClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n     * let i = 1;\n     * for await (const blob of containerClient.listBlobsFlat()) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = containerClient.listBlobsFlat();\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * @param options - Options to list blobs.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listBlobsFlat(options = {}) {\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listItems(updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listHierarchySegments(delimiter_1, marker_1) {\n        return __asyncGenerator(this, arguments, function* listHierarchySegments_1(delimiter, marker, options = {}) {\n            let listBlobsHierarchySegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsHierarchySegmentResponse = yield __await(this.listBlobHierarchySegment(delimiter, marker, options));\n                    marker = listBlobsHierarchySegmentResponse.continuationToken;\n                    yield yield __await(yield __await(listBlobsHierarchySegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listItemsByHierarchy(delimiter_1) {\n        return __asyncGenerator(this, arguments, function* listItemsByHierarchy_1(delimiter, options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listHierarchySegments(delimiter, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsHierarchySegmentResponse = _c;\n                    const segment = listBlobsHierarchySegmentResponse.segment;\n                    if (segment.blobPrefixes) {\n                        for (const prefix of segment.blobPrefixes) {\n                            yield yield __await(Object.assign({ kind: \"prefix\" }, prefix));\n                        }\n                    }\n                    for (const blob of segment.blobItems) {\n                        yield yield __await(Object.assign({ kind: \"blob\" }, blob));\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs by hierarchy.\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let iter = containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n     * let entity = await iter.next();\n     * while (!entity.done) {\n     *   let item = entity.value;\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     *   entity = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page\");\n     * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n     *   const segment = response.segment;\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a max page size:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n     *\n     * let i = 1;\n     * for await (const response of containerClient\n     *   .listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\" })\n     *   .byPage({ maxPageSize: 2 })) {\n     *   console.log(`Page ${i++}`);\n     *   const segment = response.segment;\n     *\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listBlobsByHierarchy(delimiter, options = {}) {\n        if (delimiter === \"\") {\n            throw new RangeError(\"delimiter should contain one or more characters\");\n        }\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blob prefixes and blobs\n        const iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            async next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in the container whose tags\n     * match a given search expression.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = assertResponse(await this.containerContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield __await(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_3, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified container.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of containerClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = containerClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = containerClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return tracingClient.withSpan(\"ContainerClient-getAccountInfo\", options, async (updatedOptions) => {\n            return assertResponse(await this.containerContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    getContainerNameFromUrl() {\n        let containerName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n            // http://localhost:10001/devstoreaccount1/containername\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername\".\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            else if (isIpEndpointStyle(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n                // .getPath() -> /devstoreaccount1/containername\n                containerName = parsedUrl.pathname.split(\"/\")[2];\n            }\n            else {\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            // decode the encoded containerName - to get all the special characters that might be present in it\n            containerName = decodeURIComponent(containerName);\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return containerName;\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract containerName with provided information.\");\n        }\n    }\n    /**\n     * Only available for ContainerClient constructed with a shared key credential.\n     *\n     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName }, options), this.credential).toString();\n            resolve(appendToURLQuery(this.url, sas));\n        });\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this container.\n     */\n    getBlobBatchClient() {\n        return new BlobBatchClient(this.url, this.pipeline);\n    }\n}\n//# sourceMappingURL=ContainerClient.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n    constructor() {\n        /**\n         * Permission to read resources and list queues and tables granted.\n         */\n        this.read = false;\n        /**\n         * Permission to write resources granted.\n         */\n        this.write = false;\n        /**\n         * Permission to delete blobs and files granted.\n         */\n        this.delete = false;\n        /**\n         * Permission to delete versions granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Permission to list blob containers, blobs, shares, directories, and files granted.\n         */\n        this.list = false;\n        /**\n         * Permission to add messages, table entities, and append to blobs granted.\n         */\n        this.add = false;\n        /**\n         * Permission to create blobs and files granted.\n         */\n        this.create = false;\n        /**\n         * Permissions to update messages and table entities granted.\n         */\n        this.update = false;\n        /**\n         * Permission to get and delete messages granted.\n         */\n        this.process = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Permission to filter blobs.\n         */\n        this.filter = false;\n        /**\n         * Permission to set immutability policy.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Parse initializes the AccountSASPermissions fields from a string.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const accountSASPermissions = new AccountSASPermissions();\n        for (const c of permissions) {\n            switch (c) {\n                case \"r\":\n                    accountSASPermissions.read = true;\n                    break;\n                case \"w\":\n                    accountSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    accountSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    accountSASPermissions.deleteVersion = true;\n                    break;\n                case \"l\":\n                    accountSASPermissions.list = true;\n                    break;\n                case \"a\":\n                    accountSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    accountSASPermissions.create = true;\n                    break;\n                case \"u\":\n                    accountSASPermissions.update = true;\n                    break;\n                case \"p\":\n                    accountSASPermissions.process = true;\n                    break;\n                case \"t\":\n                    accountSASPermissions.tag = true;\n                    break;\n                case \"f\":\n                    accountSASPermissions.filter = true;\n                    break;\n                case \"i\":\n                    accountSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    accountSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission character: ${c}`);\n            }\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const accountSASPermissions = new AccountSASPermissions();\n        if (permissionLike.read) {\n            accountSASPermissions.read = true;\n        }\n        if (permissionLike.write) {\n            accountSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            accountSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            accountSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.filter) {\n            accountSASPermissions.filter = true;\n        }\n        if (permissionLike.tag) {\n            accountSASPermissions.tag = true;\n        }\n        if (permissionLike.list) {\n            accountSASPermissions.list = true;\n        }\n        if (permissionLike.add) {\n            accountSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            accountSASPermissions.create = true;\n        }\n        if (permissionLike.update) {\n            accountSASPermissions.update = true;\n        }\n        if (permissionLike.process) {\n            accountSASPermissions.process = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            accountSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            accountSASPermissions.permanentDelete = true;\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Produces the SAS permissions string for an Azure Storage account.\n     * Call this method to set AccountSASSignatureValues Permissions field.\n     *\n     * Using this method will guarantee the resource types are in\n     * an order accepted by the service.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        // The order of the characters should be as specified here to ensure correctness:\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n        // Use a string array instead of string concatenating += operator for performance\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.filter) {\n            permissions.push(\"f\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.update) {\n            permissions.push(\"u\");\n        }\n        if (this.process) {\n            permissions.push(\"p\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASPermissions.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n    constructor() {\n        /**\n         * Permission to access service level APIs granted.\n         */\n        this.service = false;\n        /**\n         * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n         */\n        this.container = false;\n        /**\n         * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n         */\n        this.object = false;\n    }\n    /**\n     * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid resource type.\n     *\n     * @param resourceTypes -\n     */\n    static parse(resourceTypes) {\n        const accountSASResourceTypes = new AccountSASResourceTypes();\n        for (const c of resourceTypes) {\n            switch (c) {\n                case \"s\":\n                    accountSASResourceTypes.service = true;\n                    break;\n                case \"c\":\n                    accountSASResourceTypes.container = true;\n                    break;\n                case \"o\":\n                    accountSASResourceTypes.object = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid resource type: ${c}`);\n            }\n        }\n        return accountSASResourceTypes;\n    }\n    /**\n     * Converts the given resource types to a string.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        const resourceTypes = [];\n        if (this.service) {\n            resourceTypes.push(\"s\");\n        }\n        if (this.container) {\n            resourceTypes.push(\"c\");\n        }\n        if (this.object) {\n            resourceTypes.push(\"o\");\n        }\n        return resourceTypes.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASResourceTypes.js.map","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n    constructor() {\n        /**\n         * Permission to access blob resources granted.\n         */\n        this.blob = false;\n        /**\n         * Permission to access file resources granted.\n         */\n        this.file = false;\n        /**\n         * Permission to access queue resources granted.\n         */\n        this.queue = false;\n        /**\n         * Permission to access table resources granted.\n         */\n        this.table = false;\n    }\n    /**\n     * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid service.\n     *\n     * @param services -\n     */\n    static parse(services) {\n        const accountSASServices = new AccountSASServices();\n        for (const c of services) {\n            switch (c) {\n                case \"b\":\n                    accountSASServices.blob = true;\n                    break;\n                case \"f\":\n                    accountSASServices.file = true;\n                    break;\n                case \"q\":\n                    accountSASServices.queue = true;\n                    break;\n                case \"t\":\n                    accountSASServices.table = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid service character: ${c}`);\n            }\n        }\n        return accountSASServices;\n    }\n    /**\n     * Converts the given services to a string.\n     *\n     */\n    toString() {\n        const services = [];\n        if (this.blob) {\n            services.push(\"b\");\n        }\n        if (this.table) {\n            services.push(\"t\");\n        }\n        if (this.queue) {\n            services.push(\"q\");\n        }\n        if (this.file) {\n            services.push(\"f\");\n        }\n        return services.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASServices.js.map","import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { getDefaultProxySettings } from \"@azure/core-rest-pipeline\";\nimport { isNode } from \"@azure/core-util\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { ContainerClient, } from \"./ContainerClient\";\nimport { appendToURLPath, appendToURLQuery, extractConnectionStringParts, toTags, } from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { truncatedISO8061Date, assertResponse } from \"./utils/utils.common\";\nimport { tracingClient } from \"./utils/tracing\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { StorageClient } from \"./StorageClient\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nexport class BlobServiceClient extends StorageClient {\n    /**\n     *\n     * Creates an instance of BlobServiceClient from connection string.\n     *\n     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n     *                                  Account connection string example -\n     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n     *                                  SAS connection string example -\n     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n     * @param options - Optional. Options to configure the HTTP pipeline.\n     */\n    static fromConnectionString(connectionString, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        const extractedCreds = extractConnectionStringParts(connectionString);\n        if (extractedCreds.kind === \"AccountConnString\") {\n            if (isNode) {\n                const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                if (!options.proxyOptions) {\n                    options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                }\n                const pipeline = newPipeline(sharedKeyCredential, options);\n                return new BlobServiceClient(extractedCreds.url, pipeline);\n            }\n            else {\n                throw new Error(\"Account connection string is only supported in Node.js environment\");\n            }\n        }\n        else if (extractedCreds.kind === \"SASConnString\") {\n            const pipeline = newPipeline(new AnonymousCredential(), options);\n            return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n        }\n        else {\n            throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n        }\n    }\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if (isPipelineLike(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if ((isNode && credentialOrPipeline instanceof StorageSharedKeyCredential) ||\n            credentialOrPipeline instanceof AnonymousCredential ||\n            isTokenCredential(credentialOrPipeline)) {\n            pipeline = newPipeline(credentialOrPipeline, options);\n        }\n        else {\n            // The second parameter is undefined. Use anonymous credential\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        super(url, pipeline);\n        this.serviceContext = this.storageClientContext.service;\n    }\n    /**\n     * Creates a {@link ContainerClient} object\n     *\n     * @param containerName - A container name\n     * @returns A new ContainerClient object for the given container name.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * ```\n     */\n    getContainerClient(containerName) {\n        return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);\n    }\n    /**\n     * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     *\n     * @param containerName - Name of the container to create.\n     * @param options - Options to configure Container Create operation.\n     * @returns Container creation response and the corresponding container client.\n     */\n    async createContainer(containerName, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-createContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            const containerCreateResponse = await containerClient.create(updatedOptions);\n            return {\n                containerClient,\n                containerCreateResponse,\n            };\n        });\n    }\n    /**\n     * Deletes a Blob container.\n     *\n     * @param containerName - Name of the container to delete.\n     * @param options - Options to configure Container Delete operation.\n     * @returns Container deletion response.\n     */\n    async deleteContainer(containerName, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-deleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            return containerClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * Restore a previously deleted Blob container.\n     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n     *\n     * @param deletedContainerName - Name of the previously deleted container.\n     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n     * @param options - Options to configure Container Restore operation.\n     * @returns Container deletion response.\n     */\n    async undeleteContainer(deletedContainerName, deletedContainerVersion, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-undeleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerUndeleteResponse = assertResponse(await containerContext.restore({\n                deletedContainerName,\n                deletedContainerVersion,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return { containerClient, containerUndeleteResponse };\n        });\n    }\n    /**\n     * Rename an existing Blob Container.\n     *\n     * @param sourceContainerName - The name of the source container.\n     * @param destinationContainerName - The new name of the container.\n     * @param options - Options to configure Container Rename operation.\n     */\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n    async renameContainer(sourceContainerName, destinationContainerName, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-renameContainer\", options, async (updatedOptions) => {\n            var _a;\n            const containerClient = this.getContainerClient(destinationContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerRenameResponse = assertResponse(await containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId })));\n            return { containerClient, containerRenameResponse };\n        });\n    }\n    /**\n     * Gets the properties of a storage account’s Blob service, including properties\n     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * @param options - Options to the Service Get Properties operation.\n     * @returns Response data for the Service Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-getProperties\", options, async (updatedOptions) => {\n            return assertResponse(await this.serviceContext.getProperties({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets properties for a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n     *\n     * @param properties -\n     * @param options - Options to the Service Set Properties operation.\n     * @returns Response data for the Service Set Properties operation.\n     */\n    async setProperties(properties, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-setProperties\", options, async (updatedOptions) => {\n            return assertResponse(await this.serviceContext.setProperties(properties, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only\n     * available on the secondary location endpoint when read-access geo-redundant\n     * replication is enabled for the storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n     *\n     * @param options - Options to the Service Get Statistics operation.\n     * @returns Response data for the Service Get Statistics operation.\n     */\n    async getStatistics(options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-getStatistics\", options, async (updatedOptions) => {\n            return assertResponse(await this.serviceContext.getStatistics({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-getAccountInfo\", options, async (updatedOptions) => {\n            return assertResponse(await this.serviceContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns a list of the containers under the specified account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to the Service List Container Segment operation.\n     * @returns Response data for the Service List Container Segment operation.\n     */\n    async listContainersSegment(marker, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-listContainersSegment\", options, async (updatedOptions) => {\n            return assertResponse(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker }, options), { include: typeof options.include === \"string\" ? [options.include] : options.include, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n     * match a given search expression. Filter blobs searches across all containers within a\n     * storage account but can be scoped within the expression to a single container.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = assertResponse(await this.serviceContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield __await(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to list containers operation.\n     */\n    listSegments(marker_1) {\n        return __asyncGenerator(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listContainersSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listContainersSegmentResponse = yield __await(this.listContainersSegment(marker, options));\n                    listContainersSegmentResponse.containerItems =\n                        listContainersSegmentResponse.containerItems || [];\n                    marker = listContainersSegmentResponse.continuationToken;\n                    yield yield __await(yield __await(listContainersSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for Container Items\n     *\n     * @param options - Options to list containers operation.\n     */\n    listItems() {\n        return __asyncGenerator(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = __asyncValues(this.listSegments(marker, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield __await(yield* __asyncDelegator(__asyncValues(segment.containerItems)));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the containers\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the containers in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const container of blobServiceClient.listContainers()) {\n     *   console.log(`Container ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.listContainers();\n     * let containerItem = await iter.next();\n     * while (!containerItem.done) {\n     *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n     *   containerItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n     *   if (response.containerItems) {\n     *     for (const container of response.containerItems) {\n     *       console.log(`Container ${i++}: ${container.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *     console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .listContainers()\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *      console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options to list containers.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listContainers(options = {}) {\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const include = [];\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSystem) {\n            include.push(\"system\");\n        }\n        // AsyncIterableIterator to iterate over containers\n        const listSegmentOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include } : {}));\n        const iter = this.listItems(listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n     *\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n     *\n     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n     */\n    async getUserDelegationKey(startsOn, expiresOn, options = {}) {\n        return tracingClient.withSpan(\"BlobServiceClient-getUserDelegationKey\", options, async (updatedOptions) => {\n            const response = assertResponse(await this.serviceContext.getUserDelegationKey({\n                startsOn: truncatedISO8061Date(startsOn, false),\n                expiresOn: truncatedISO8061Date(expiresOn, false),\n            }, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const userDelegationKey = {\n                signedObjectId: response.signedObjectId,\n                signedTenantId: response.signedTenantId,\n                signedStartsOn: new Date(response.signedStartsOn),\n                signedExpiresOn: new Date(response.signedExpiresOn),\n                signedService: response.signedService,\n                signedVersion: response.signedVersion,\n                value: response.value,\n            };\n            const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);\n            return res;\n        });\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this service.\n     */\n    getBlobBatchClient() {\n        return new BlobBatchClient(this.url, this.pipeline);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateAccountSasUrl(expiresOn, permissions = AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        const sas = generateAccountSASQueryParameters(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: AccountSASServices.parse(\"b\").toString() }, options), this.credential).toString();\n        return appendToURLQuery(this.url, sas);\n    }\n}\n//# sourceMappingURL=BlobServiceClient.js.map","'use strict'\nconst ParserEND = 0x110000\nclass ParserError extends Error {\n  /* istanbul ignore next */\n  constructor (msg, filename, linenumber) {\n    super('[ParserError] ' + msg, filename, linenumber)\n    this.name = 'ParserError'\n    this.code = 'ParserError'\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ParserError)\n  }\n}\nclass State {\n  constructor (parser) {\n    this.parser = parser\n    this.buf = ''\n    this.returned = null\n    this.result = null\n    this.resultTable = null\n    this.resultArr = null\n  }\n}\nclass Parser {\n  constructor () {\n    this.pos = 0\n    this.col = 0\n    this.line = 0\n    this.obj = {}\n    this.ctx = this.obj\n    this.stack = []\n    this._buf = ''\n    this.char = null\n    this.ii = 0\n    this.state = new State(this.parseStart)\n  }\n\n  parse (str) {\n    /* istanbul ignore next */\n    if (str.length === 0 || str.length == null) return\n\n    this._buf = String(str)\n    this.ii = -1\n    this.char = -1\n    let getNext\n    while (getNext === false || this.nextChar()) {\n      getNext = this.runOne()\n    }\n    this._buf = null\n  }\n  nextChar () {\n    if (this.char === 0x0A) {\n      ++this.line\n      this.col = -1\n    }\n    ++this.ii\n    this.char = this._buf.codePointAt(this.ii)\n    ++this.pos\n    ++this.col\n    return this.haveBuffer()\n  }\n  haveBuffer () {\n    return this.ii < this._buf.length\n  }\n  runOne () {\n    return this.state.parser.call(this, this.state.returned)\n  }\n  finish () {\n    this.char = ParserEND\n    let last\n    do {\n      last = this.state.parser\n      this.runOne()\n    } while (this.state.parser !== last)\n\n    this.ctx = null\n    this.state = null\n    this._buf = null\n\n    return this.obj\n  }\n  next (fn) {\n    /* istanbul ignore next */\n    if (typeof fn !== 'function') throw new ParserError('Tried to set state to non-existent state: ' + JSON.stringify(fn))\n    this.state.parser = fn\n  }\n  goto (fn) {\n    this.next(fn)\n    return this.runOne()\n  }\n  call (fn, returnWith) {\n    if (returnWith) this.next(returnWith)\n    this.stack.push(this.state)\n    this.state = new State(fn)\n  }\n  callNow (fn, returnWith) {\n    this.call(fn, returnWith)\n    return this.runOne()\n  }\n  return (value) {\n    /* istanbul ignore next */\n    if (this.stack.length === 0) throw this.error(new ParserError('Stack underflow'))\n    if (value === undefined) value = this.state.buf\n    this.state = this.stack.pop()\n    this.state.returned = value\n  }\n  returnNow (value) {\n    this.return(value)\n    return this.runOne()\n  }\n  consume () {\n    /* istanbul ignore next */\n    if (this.char === ParserEND) throw this.error(new ParserError('Unexpected end-of-buffer'))\n    this.state.buf += this._buf[this.ii]\n  }\n  error (err) {\n    err.line = this.line\n    err.col = this.col\n    err.pos = this.pos\n    return err\n  }\n  /* istanbul ignore next */\n  parseStart () {\n    throw new ParserError('Must declare a parseStart method')\n  }\n}\nParser.END = ParserEND\nParser.Error = ParserError\nmodule.exports = Parser\n","'use strict'\nmodule.exports = value => {\n  const date = new Date(value)\n  /* istanbul ignore if */\n  if (isNaN(date)) {\n    throw new TypeError('Invalid Datetime')\n  } else {\n    return date\n  }\n}\n","'use strict'\nmodule.exports = (d, num) => {\n  num = String(num)\n  while (num.length < d) num = '0' + num\n  return num\n}\n","'use strict'\nconst f = require('./format-num.js')\n\nclass FloatingDateTime extends Date {\n  constructor (value) {\n    super(value + 'Z')\n    this.isFloating = true\n  }\n  toISOString () {\n    const date = `${this.getUTCFullYear()}-${f(2, this.getUTCMonth() + 1)}-${f(2, this.getUTCDate())}`\n    const time = `${f(2, this.getUTCHours())}:${f(2, this.getUTCMinutes())}:${f(2, this.getUTCSeconds())}.${f(3, this.getUTCMilliseconds())}`\n    return `${date}T${time}`\n  }\n}\n\nmodule.exports = value => {\n  const date = new FloatingDateTime(value)\n  /* istanbul ignore if */\n  if (isNaN(date)) {\n    throw new TypeError('Invalid Datetime')\n  } else {\n    return date\n  }\n}\n","'use strict'\nconst f = require('./format-num.js')\nconst DateTime = global.Date\n\nclass Date extends DateTime {\n  constructor (value) {\n    super(value)\n    this.isDate = true\n  }\n  toISOString () {\n    return `${this.getUTCFullYear()}-${f(2, this.getUTCMonth() + 1)}-${f(2, this.getUTCDate())}`\n  }\n}\n\nmodule.exports = value => {\n  const date = new Date(value)\n  /* istanbul ignore if */\n  if (isNaN(date)) {\n    throw new TypeError('Invalid Datetime')\n  } else {\n    return date\n  }\n}\n","'use strict'\nconst f = require('./format-num.js')\n\nclass Time extends Date {\n  constructor (value) {\n    super(`0000-01-01T${value}Z`)\n    this.isTime = true\n  }\n  toISOString () {\n    return `${f(2, this.getUTCHours())}:${f(2, this.getUTCMinutes())}:${f(2, this.getUTCSeconds())}.${f(3, this.getUTCMilliseconds())}`\n  }\n}\n\nmodule.exports = value => {\n  const date = new Time(value)\n  /* istanbul ignore if */\n  if (isNaN(date)) {\n    throw new TypeError('Invalid Datetime')\n  } else {\n    return date\n  }\n}\n","'use strict'\nmodule.exports = require('./parse-string.js')\nmodule.exports.async = require('./parse-async.js')\nmodule.exports.stream = require('./parse-stream.js')\nmodule.exports.prettyError = require('./parse-pretty-error.js')\n"],"names":["getProxyUrl","reqUrl","usingSsl","proxyUrl","proxyVar","protocol","checkBypass","process","env","URL","hostname","noProxy","reqPort","port","Number","upperReqHosts","toUpperCase","push","upperNoProxyItem","split","map","x","trim","filter","some","downloadTool","url","dest","auth","headers","path","join","_getTempDirectory","v4_1","default","io","mkdirP","dirname","debug","minSeconds","_getGlobal","maxSeconds","retryHelper","retry_helper_1","RetryHelper","execute","__awaiter","this","downloadToolAttempt","err","HTTPError","httpStatusCode","fs","existsSync","Error","http","httpm","HttpClient","userAgent","allowRetries","core","undefined","authorization","response","get","message","statusCode","statusMessage","pipeline","util","promisify","stream","readStream","responseMessageFactory","succeeded","createWriteStream","rmRF","extract7z","file","_7zPath","ok","IS_WINDOWS","_createExtractFolder","originalCwd","cwd","chdir","args","isDebug","options","silent","exec_1","exec","__dirname","replace","powershellPath","which","extractTar","flags","versionOutput","ignoreReturnCode","listeners","stdout","data","stderr","isGnuTar","includes","Array","destArg","fileArg","extractXar","IS_MAC","xarPath","_unique","extractZip","extractZipWin","extractZipNix","escapedFile","escapedDest","pwshPath","unzipPath","unshift","cacheDir","sourceDir","tool","version","arch","semver","clean","os","statSync","isDirectory","destPath","_createToolPath","itemName","readdirSync","s","cp","recursive","cacheFile","sourceFile","targetFile","isFile","destFolder","find","toolName","versionSpec","isExplicitVersion","match","evaluateVersions","findAllVersions","toolPath","cachePath","_getCacheDirectory","versions","children","child","fullPath","getManifestFromRepo","owner","repo","branch","releases","treeUrl","getJson","result","manifestUrl","item","tree","versionsRaw","readBody","JSON","parse","_a","findFromManifest","stable","manifest","archFilter","mm","_findMatch","folderPath","markerPath","_completeToolPath","writeFileSync","c","valid","length","i","sort","a","b","gt","potential","satisfies","cacheDirectory","tempDirectory","key","defaultValue","value","global","values","from","Set","getOptions","copy","followSymbolicLinks","implicitDescendants","omitBrokenSymbolicLinks","p","safeTrimTrailingSeparator","test","ensureAbsoluteRoot","root","itemPath","hasAbsoluteRoot","assert_1","substr","endsWith","normalizeSeparators","sep","startsWith","hasRoot","getSearchPaths","patterns","negate","searchPathMap","pattern","searchPath","foundAncestor","tempKey","parent","pathHelper","internal_match_kind_1","MatchKind","None","partialMatch","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","body","post","reg","m","begs","beg","left","right","ai","indexOf","bi","pop","numeric","parseInt","charCodeAt","escapeBraces","escSlash","escOpen","escClose","escComma","escPeriod","unescapeBraces","parseCommaParts","parts","postParts","shift","apply","expandTop","expand","embrace","isPadded","el","lte","y","gte","isTop","expansions","n","isNumericSequence","isAlphaSequence","isSequence","isOptions","N","width","Math","max","incr","abs","pad","String","fromCharCode","need","z","concatMap","j","k","expansion","charSet","reduce","set","list","minimatch","ext","t","Object","keys","forEach","assertValidPattern","nocomment","charAt","Minimatch","allowWindowsEscape","regexp","comment","empty","partial","make","parseNegate","globSet","braceExpand","error","console","arguments","globParts","slashSplit","si","negateOffset","nonegate","l","nobrace","isSub","clearStateChar","stateChar","star","hasMagic","qmark","re","self","noglobstar","GLOBSTAR","nocase","escaping","patternListStack","negativeLists","inClass","reClassStart","classStart","patternStart","dot","len","reSpecials","noext","type","reStart","open","plTypes","close","pl","reEnd","cs","substring","er","sp","SUBPARSE","tail","_","$1","$2","addPatternStart","nl","nlBefore","nlFirst","nlLast","nlAfter","openParensBefore","cleanAfter","dollar","newRe","globUnescape","regExp","_glob","_src","makeRe","twoStar","twoStarDot","twoStarNoDot","regExpEscape","ex","create","internal_globber_1","DefaultGlobber","v1","buf","offset","node","_nodeId","clockseq","_clockseq","seedBytes","rng","msecs","Date","getTime","nsecs","_lastNSecs","dt","_lastMSecs","tl","tmh","bytesToUuid","createTempDirectory","platform","baseLocation","uuid_1","v4","getArchiveFileSizeInBytes","filePath","size","resolvePaths","paths","workspace","_d","globber","glob","_e","_g","_f","__asyncValues","globGenerator","next","done","relativeFile","relative","unlinkFile","unlink","getVersion","app","additionalArgs","getCompressionMethod","constants_1","CompressionMethod","Gzip","ZstdWithoutLong","getCacheFileName","compressionMethod","CacheFilename","Zstd","getGnuTarPathOnWindows","GnuTarPathOnWindows","toLowerCase","assertDefined","name","isGhes","trimEnd","isGitHubHost","isGheHost","createEmptyPipeline","HttpPipeline","log","write","format","EOL","enable","namespaces","enabledNamespaces","skippedNamespaces","wildcard","namespaceList","ns","instance","debuggers","enabled","namespace","skipped","enabledNamespace","disable","enabledString","createDebugger","newDebugger","assign","destroy","debugObj","extend","index","splice","setLogLevel","level","isAzureLogLevel","AZURE_LOG_LEVELS","logger","registeredLoggers","shouldEnable","createClientLogger","clientRootLogger","AzureLogger","patchLogMethod","createLogger","warning","info","verbose","add","Boolean","azureLogLevel","levelMap","logLevel","createAbortablePromise","buildPromise","cleanupBeforeAbort","abortSignal","abortErrorMsg","Promise","resolve","reject","rejectOnAbort","AbortError","removeListeners","removeEventListener","onAbort","aborted","addEventListener","getRandomIntegerInclusive","min","ceil","floor","random","delay","timeInMs","token","setTimeout","clearTimeout","StandardAbortMessage","isObject","input","isArray","isError","e","getErrorMessage","stringified","stringify","randomUUID","uuidFunction","stringToUint8Array","Buffer","logPolicy","coreLogger","sanitizer","Sanitizer","additionalAllowedHeaderNames","additionalAllowedQueryParameters","logPolicyName","sendRequest","request","sanitize","status","redirectPolicy","maxRetries","redirectPolicyName","handleRedirect","async","currentRetries","locationHeader","allowedRedirect","method","delete","res","getHeaderName","setPlatformSpecificData","bun","deno","release","getUserAgentString","telemetryInfo","getUserAgentHeaderName","getUserAgentValue","prefix","runtimeInfo","Map","SDK_VERSION","defaultAgent","userAgentValue","userAgentPolicy","userAgentPrefix","userAgentPolicyName","has","UserAgentHeaderName","__rest","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","__values","o","Symbol","iterator","TypeError","__await","v","__asyncGenerator","thisArg","_arguments","generator","verb","f","g","q","resume","then","fulfill","settle","asyncIterator","AsyncIterator","__asyncDelegator","d","isBlob","hasRawContent","rawContent","getRawContent","blob","streamAsyncIterator","reader","getReader","read","releaseLock","makeAsyncIterable","webStream","bind","ensureNodeStream","ReadableStream","Readable","fromWeb","toStream","source","Uint8Array","concat","sources","streams","stream_1_1","stream_1","e_1","chunk","generateBoundary","encodeHeaders","getLength","byteLength","getTotalLength","total","partLength","buildRequestBody","boundary","flatMap","part","contentLength","assertValidBoundary","maxBoundaryLength","validBoundaryCharacters","multipartPolicy","multipartPolicyName","multipartBody","contentTypeHeader","parsedHeader","contentType","parsedBoundary","decompressResponsePolicy","decompressResponsePolicyName","delayInMs","timer","onAborted","parseHeaderValueAsNumber","headerName","valueAsNum","isNaN","getRetryAfterInMs","header","AllRetryAfterHeaders","retryAfterValue","RetryAfterHeader","retryAfterHeader","date","diff","now","isFinite","isThrottlingRetryResponse","throttlingRetryStrategy","retry","retryAfterInMs","skipStrategy","exponentialRetryStrategy","retryInterval","retryDelayInMs","DEFAULT_CLIENT_RETRY_INTERVAL","maxRetryInterval","_b","maxRetryDelayInMs","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","retryCount","responseError","matchedSystemError","isSystemError","ignoreSystemErrors","isExponential","isExponentialRetryResponse","ignoreExponentialResponse","ignoreHttpStatusCodes","unknownResponse","errorToThrow","clampedExponentialDelay","pow","code","retryPolicy","strategies","DEFAULT_RETRY_POLICY_COUNT","retryPolicyLogger","retryPolicyName","retryRequest","requestId","abortError","strategiesLoop","strategy","strategyLogger","modifiers","redirectTo","defaultRetryPolicy","defaultRetryPolicyName","normalizeName","headerIterator","entry","createHttpHeaders","rawHeaders","HttpHeadersImpl","formDataToFormDataMap","formData","formDataMap","entries","formDataPolicy","formDataPolicyName","isNodeLike","FormData","wwwFormUrlEncode","prepareFormData","urlSearchParams","URLSearchParams","subValue","append","fieldName","fileName","plural","ms","msAbs","isPlural","round","h","w","val","parseFloat","long","fmtShort","setup","createDebug","curr","prevTime","prev","coerce","formatter","formatters","formatArgs","namespacesCache","enabledCache","enableOverride","useColors","color","selectColor","defineProperty","enumerable","configurable","init","delimiter","newDebug","toNamespace","stack","names","skips","save","humanize","require","warn","hash","colors","load","exports","module","lastC","storage","setItem","removeItem","getItem","DEBUG","window","__nwjs","navigator","document","documentElement","style","WebkitAppearance","firebug","exception","table","localstorage","localStorage","warned","hasFlag","flag","argv","position","terminatorPosition","translateLevel","hasBasic","has256","has16m","supportsColor","haveStream","streamIsTTY","forceColor","TERM","osRelease","sign","CI_NAME","TEAMCITY_VERSION","COLORTERM","TERM_PROGRAM_VERSION","TERM_PROGRAM","tty","FORCE_COLOR","supportsColor_1","isTTY","isatty","inspectOpts","formatWithOptions","colorCode","hideDate","toISOString","fd","deprecate","obj","prop","inspect","O","toBuffer","chunks","json","toString","_err","req","opts","href","https","promise","once","parseProxyResponse","socket","buffers","buffersLength","buffered","endOfHeaders","headerParts","firstLine","firstLineParts","statusText","firstColon","trimStart","current","debug$2","connect","cleanup","removeListener","onend","onerror","on","omit","ret","getEnvironmentValue","loadEnvironmentProxyValue","httpsProxy","HTTPS_PROXY","allProxy","ALL_PROXY","httpProxy","HTTP_PROXY","isBypassed","uri","noProxyList","bypassedMap","host","isBypassedFlag","loadNoProxy","NO_PROXY","noProxyListLoaded","getDefaultProxySettings","parsedUrl","username","password","getDefaultProxySettingsInternal","envProxy","getUrlFromProxySettings","settings","parsedProxyUrl","setProxyAgentOnRequest","cachedAgents","agent","isInsecure","tlsSettings","toJSON","httpProxyAgent","HttpProxyAgent","httpsProxyAgent","HttpsProxyAgent","proxyPolicy","proxySettings","defaultProxy","proxyPolicyName","globalNoProxyList","globalBypassedMap","setClientRequestIdPolicy","requestIdHeaderName","setClientRequestIdPolicyName","tlsPolicy","tlsPolicyName","createTracingContext","context","TracingContextImpl","parentContext","span","setValue","knownContextKeys","createDefaultTracingSpan","isRecording","recordException","setAttribute","setStatus","createDefaultInstrumenter","createRequestHeaders","parseTraceparentHeader","startSpan","_name","spanOptions","tracingContext","withContext","_context","callback","callbackArgs","getInstrumenter","state","instrumenterImplementation","createTracingClient","operationOptions","startSpanResult","packageName","packageVersion","tracingOptions","getValue","updatedOptions","withSpan","traceparentHeader","isRestError","RestError","tracingPolicy","userAgentPromise","tracingClient","tryCreateTracingClient","tracingPolicyName","spanAttributes","sanitizeUrl","tryCreateSpan","tryProcessResponse","tryProcessError","spanKind","serviceRequestId","createPipelineFromOptions","tlsOptions","addPolicy","proxyOptions","beforePolicies","userAgentOptions","telemetryOptions","clientRequestIdHeaderName","afterPhase","retryOptions","phase","loggingOptions","redirectOptions","isReadableStream","pipe","isStreamComplete","handler","isArrayBuffer","getResponseHeaders","getDecodedResponseStream","contentEncoding","unzip","zlib","createGunzip","inflate","createInflate","streamToText","buffer","isBuffer","PARSE_ERROR","getBodyLength","createNodeHttpClient","NodeHttpClient","createDefaultHttpClient","createPipelineRequest","PipelineRequestImpl","beginRefresh","getAccessToken","retryIntervalInMs","refreshTimeout","tryGetAccessToken","finalToken","createTokenCycler","credential","tokenCyclerOptions","refresh","scopes","getTokenOptions","refreshWorker","cycler","isRefreshing","getToken","expiresOnTimestamp","_token","tenantId","catch","reason","DEFAULT_CYCLER_OPTIONS","shouldRefresh","refreshAfterTimestamp","refreshWindowInMs","mustRefresh","forcedRefreshWindowInMs","tokenOptions","hasClaimChallenge","claims","defaultAuthorizeRequest","accessToken","getChallenge","challenge","bearerTokenAuthenticationPolicy","challengeCallbacks","callbacks","authorizeRequest","authorizeRequestOnChallenge","bearerTokenAuthenticationPolicyName","isTokenCredential","castCredential","signRequest","createDisableKeepAlivePolicy","disableKeepAlivePolicyName","disableKeepAlive","pipelineContainsDisableKeepAlivePolicy","getOrderedPolicies","policy","encodeByteArray","bufferValue","decodeString","isPrimitiveBody","mapperTypeName","isDuration","validateISODuration","isValidUuid","uuid","validUuidRegex","handleNullableResponseAndWrappableBody","responseObject","combinedHeadersAndBody","hasNullableType","getOwnPropertyNames","shouldWrapBody","flattenResponse","fullResponse","responseSpec","parsedHeaders","parsedBody","bodyMapper","isNullable","nullable","expectedBodyTypeName","blobBody","readableStreamBody","modelProperties","isPageableResponse","serializedName","arrayResponse","createSerializer","modelMappers","isXML","SerializerImpl","ch","bufferToBase64Url","base64","base64UrlToByteArray","valueOf","splitSerializeName","classes","partialclass","subwords","dateToUnixTime","unixTimeToDate","serializeBasicTypes","typeName","objectName","objectType","tee","ArrayBuffer","isView","Blob","serializeEnumType","allowedValues","serializeByteArrayType","serializeBase64UrlType","serializeDateTypes","toUTCString","serializeSequenceType","serializer","mapper","object","isXml","elementType","element","className","tempArray","serializedValue","serialize","xmlNamespace","xmlnsKey","xmlNamespacePrefix","XML_ATTRKEY","xml","xmlCharKey","serializeDictionaryType","valueType","tempDictionary","getXmlObjectValue","resolveAdditionalProperties","additionalProperties","modelMapper","resolveReferencedMapper","resolveModelProperties","modelProps","serializeCompositeType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","payload","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","xmlIsAttribute","additionalPropertiesMapper","propNames","clientPropName","every","pn","isSpecialXmlProperty","propertyName","deserializeCompositeType","responseBody","XML_CHARKEY","handledPropertyNames","headerCollectionPrefix","dictionary","headerKey","deserialize","xmlIsMsText","wrapped","elementList","propertyInstance","steps","arrayInstance","isAdditionalProperty","responsePropName","ignoreUnknownProperties","deserializeDictionaryType","deserializeSequenceType","getIndexDiscriminator","discriminators","discriminatorValue","typeNamesToCheck","currentName","indexDiscriminator","uberParent","polymorphicPropertyName","discriminatorName","polymorphicMapper","getPolymorphicDiscriminatorSafely","getOperationArgumentValueFromParameter","operationArguments","parameter","fallbackObject","parameterPath","parameterMapper","isConstant","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","required","propertyValue","parameterPathPart","hasOriginalRequest","originalRequestSymbol","getOperationRequestInfo","operationRequestMap","deserializationPolicy","jsonContentTypes","expectedContentTypes","defaultJsonContentTypes","xmlContentTypes","_c","defaultXmlContentTypes","parseXML","serializerOptions","rootName","includeRoot","deserializationPolicyName","deserializeResponseBody","getOperationResponseMap","parsedResponse","operationInfo","operationSpec","operationResponseGetter","responses","shouldDeserializeResponse","shouldDeserialize","shouldReturnResponse","handleErrorResponse","valueToDeserialize","MapperTypeNames","Sequence","deserializeError","restError","bodyAsText","httpMethod","headersMapper","isOperationSpecEmpty","expectedStatusCodes","isSuccessByStatus","errorResponseSpec","initialErrorMessage","streamResponseStatusCodes","defaultBodyMapper","defaultHeadersMapper","deserializedError","elementName","internalError","defaultError","operationResponse","text","contentComponents","component","getStreamingResponseStatusCodes","Stream","getPathStringFromParameter","serializationPolicy","stringifyXML","serializationPolicyName","serializeHeaders","headerParameters","headerParameter","headerValue","customHeaders","requestOptions","customHeaderName","serializeRequestBody","requestBody","requestBodyParameterPathString","isStream","getXmlValueWithNamespace","prepareXMLRootList","mediaType","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","xmlNamespaceKey","createClientPipeline","credentialOptions","credentialScopes","serializationOptions","deserializationOptions","getCachedDefaultHttpClient","cachedHttpClient","getRequestUrl","baseUri","urlReplacements","calculateUrlReplacements","isAbsolutePath","requestUrl","replaceAll","isAbsoluteUrl","appendPath","queryParams","sequenceParams","calculateQueryParameters","appendQueryParams","replacements","searchValue","replaceValue","urlParameters","urlParameter","urlParameterValue","parameterPathString","skipEncoding","encodeURIComponent","pathToAppend","newPath","pathname","searchStart","search","queryParameters","queryParameter","queryParameterValue","collectionFormat","CollectionFormatToDelimiterMap","simpleParseQueryParams","queryString","pairs","pair","existingValue","noOverwrite","combinedParams","valueSet","searchPieces","createDefaultPipeline","getCredentialScopes","endpoint","isUuid","extractTenantId","challengeInfo","authorization_uri","buildScopes","challengeOptions","resource_id","challengeScopes","Constants","DefaultScope","scope","parseChallenge","keyValue","requestToOptions","timeout","toPipelineRequest","webResource","toJson","preserveCase","newRequest","withCredentials","keepAlive","onDownloadProgress","onUploadProgress","originalRequest","originalClientRequestSymbol","toWebResourceLike","toHttpHeadersLike","clone","prepare","validateRequestProperties","createProxy","Proxy","target","receiver","Reflect","HttpHeaders","getHeaderKey","toCompatResponse","originalResponse","toPipelineResponse","compatResponse","createRequestPolicyFactoryPolicy","factories","orderedFactories","reverse","requestPolicyFactoryPolicyName","httpPipeline","httpRequest","factory","mockRequestPolicyOptions","webResourceLike","convertHttpClient","requestPolicyClient","isWhiteSpace","char","readPI","xmlData","tagname","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","readAttributeStr","attrStr","startChar","tagClosed","doubleQuote","singleQuote","validateAttributeString","matches","getAllMatches","validAttrStrRegxp","attrNames","getPositionFromMatch","allowBooleanAttributes","attrName","validateAttrName","validateNumberAmpersand","validateAmpersand","count","lineNumber","msg","line","col","isName","validateTagName","lines","startIndex","readDocType","entities","hasBody","exp","isEntity","entityName","readEntityExp","validateEntityName","regx","isElement","isAttlist","isNotation","isComment","toNumber","consider","trimmedStr","skipLike","hex","hexRegex","numRegex","leadingZeros","numTrimmedByZeros","trimZeros","eNotation","num","numStr","getIgnoreAttributesFn","ignoreAttributes","addExternalEntities","externalEntities","entKeys","ent","lastEntities","regex","parseTextData","tagName","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","trimValues","replaceEntitiesValue","newval","tagValueProcessor","parseValue","parseTagValue","numberParseOptions","resolveNameSpace","removeNSPrefix","tags","buildAttributesMap","attrsRegx","attrs","ignoreAttributesFn","oldVal","aName","attributeNamePrefix","transformAttributeName","newVal","attributeValueProcessor","parseAttributeValue","attributesGroupName","attrCollection","addChild","currentNode","childNode","updateTag","saveTextToParentTag","textData","textNodeName","isItStopNode","stopNodes","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","attrBoundary","tagExp","findClosingIndex","errMsg","closingIndex","readTagExp","closeIndex","separatorIndex","attrExpPresent","rawTagName","colonIndex","readStopNodeData","openTagCount","tagContent","tagData","shouldParse","isExist","prettify","compress","arr","compressedObj","tagObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","alwaysCreateTextNode","attrMap","jpath","atrrName","propCount","toXml","jArray","indentation","indentBy","arrToStr","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","cdataPropName","commentPropName","attStr","attr_to_str","piTextNodeName","newIdentation","tagStart","tagValue","unpairedTags","suppressUnpairedNode","suppressEmptyNode","attr","attrVal","suppressBooleanAttributes","lastIndexOf","textValue","processEntities","entity","Builder","defaultOptions","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","ajPath","j2x","buildTextValNode","buildObjectNode","repeat","getCommonOptions","getSerializerOptions","rootNodeName","getParserOptions","parserOptions","XMLBuilder","build","validation","XMLValidator","validate","parsedXml","XMLParser","signal","onabort","listenersMap","listener","escapeURLPath","urlParsed","escape","getProxyUriFromDevConnString","connectionString","proxyUri","matchCredentials","getValueInConnString","argument","elements","extractConnectionStringParts","DevelopmentConnectionString","blobEndpoint","defaultEndpointsProtocol","accountName","accountKey","endpointSuffix","kind","accountSas","getAccountNameFromUrl","appendToURLPath","setURLParameter","encodedName","encodedValue","searchString","getURLParameter","searchParams","setURLHost","getURLPath","getURLScheme","getURLPathAndQuery","pathString","RangeError","getURLQueries","querySubStrings","indexOfEqual","lastIndexOfEqual","queries","querySubString","splitResults","appendToURLQuery","queryParts","query","truncatedISO8061Date","withMilliseconds","dateString","base64encode","content","isNode","btoa","generateBlockID","blockIDPrefix","blockIndex","maxSourceStringLength","padStart","aborter","abortHandler","resolveHandler","currentString","targetLength","padString","iEqual","str1","str2","toLocaleLowerCase","isIpEndpointStyle","PathStylePorts","toBlobTagsString","tagPairs","toBlobTags","blobTagSet","toTags","blobTag","toQuerySerialization","textConfiguration","delimitedTextConfiguration","columnSeparator","fieldQuote","recordSeparator","escapeChar","escapeCharacter","headersPresent","hasHeaders","jsonTextConfiguration","arrowConfiguration","schema","parseObjectReplicationRecord","objectReplicationRecord","orProperties","ids","policyPrefix","rule","ruleId","replicationStatus","policyIndex","findIndex","policyId","rules","httpAuthorizationToString","httpAuthorization","scheme","BlobNameToString","encoded","decodeURIComponent","ConvertInternalResponseOfListBlobFlat","internalResponse","segment","blobItems","blobItemInteral","ConvertInternalResponseOfListBlobHierarchy","blobPrefixes","blobPrefixInternal","ExtractPageRangeInfoItems","getPageRangesSegment","pageRange","clearRange","pageRangeIndex","clearRangeIndex","isClear","EscapePath","blobName","assertResponse","compareHeader","lhs","rhs","isLessThan","tables","table_lv0","table_lv2","table_lv4","curr_level","weight1","weight2","_defaultHttpClient","storageBrowserPolicy","storageBrowserPolicyName","URLConstants","Parameters","FORCE_BROWSER_NO_CACHE","HeaderConstants","COOKIE","CONTENT_LENGTH","storageRetryPolicy","shouldRetry","isPrimaryRetry","attempt","maxTries","retriableError","retriableErrors","calculateDelay","delayTimeInMs","retryPolicyType","StorageRetryPolicyType","EXPONENTIAL","FIXED","DEFAULT_RETRY_OPTIONS","secondaryHost","tryTimeoutInMs","storageRetryPolicyName","TIMEOUT","primaryUrl","secondaryUrl","secondaryHas404","retryAgain","RETRY_ABORT_ERROR","storageSharedKeyCredentialPolicy","getHeaderValueToSign","storageSharedKeyCredentialPolicyName","X_MS_DATE","stringToSign","CONTENT_LANGUAGE","CONTENT_ENCODING","CONTENT_MD5","CONTENT_TYPE","DATE","IF_MODIFIED_SINCE","IF_MATCH","IF_NONE_MATCH","IF_UNMODIFIED_SINCE","RANGE","headersArray","PREFIX_FOR_STORAGE","array","canonicalizedHeadersStringToSign","trimRight","trimLeft","getCanonicalizedHeadersString","canonicalizedResourceString","lowercaseQueries","queryKeys","lowercaseKey","getCanonicalizedResourceString","signature","createHmac","update","digest","AUTHORIZATION","storageCorrectContentLengthPolicy","storageCorrectContentLengthPolicyName","correctContentLength","isPipelineLike","castPipeline","toServiceClientOptions","newPipeline","pipelineOptions","AnonymousCredential","Pipeline","_credential","processDownlevelPipeline","knownFactoryFunctions","isAnonymousCredential","isStorageSharedKeyCredential","isCoreHttpBearerTokenFactory","isStorageBrowserPolicyFactory","isStorageRetryPolicyFactory","isStorageTelemetryPolicyFactory","isCoreHttpPolicyFactory","novelFactories","knownFactory","hasInjector","isInjectorPolicyFactory","wrappedPolicies","afterRetry","getCoreClientOptions","httpClient","v1Client","restOptions","_coreHttpClient","corePipeline","_corePipeline","packageDetails","StorageBlobLoggingAllowedHeaderNames","StorageBlobLoggingAllowedQueryParameters","removePolicy","downlevelResults","getCredentialFromPipeline","audience","StorageOAuthScopes","authorizeRequestOnTenantChallenge","StorageSharedKeyCredential","allowInsecureConnection","constructor","StorageBrowserPolicyFactory","StorageRetryPolicyFactory","knownPolicies","policyName","_logLevel","_message","shouldLog","knownPolicyName","ipRangeToString","ipRange","generateBlobSASQueryParameters","blobSASSignatureValues","sharedKeyCredentialOrUserDelegationKey","SERVICE_VERSION","sharedKeyCredential","userDelegationKeyCredential","UserDelegationKeyCredential","generateBlobSASQueryParameters20201206","generateBlobSASQueryParametersUDK20201206","generateBlobSASQueryParameters20181109","generateBlobSASQueryParametersUDK20181109","generateBlobSASQueryParametersUDK20200210","generateBlobSASQueryParameters20150405","SASSignatureValuesSanityCheckAndAutofill","identifier","permissions","expiresOn","verifiedPermissions","resource","BlobSASPermissions","ContainerSASPermissions","startsOn","getCanonicalName","containerName","cacheControl","contentDisposition","contentLanguage","computeHMACSHA256","SASQueryParameters","timestamp","snapshotTime","versionId","encryptionScope","userDelegationKey","signedObjectId","signedTenantId","signedStartsOn","signedExpiresOn","signedService","signedVersion","preauthorizedAgentObjectId","correlationId","setImmutabilityPolicy","deleteVersion","permanentDelete","tag","move","filterByTags","arraysEqual","toAccessTier","tier","ensureCpkIfSpecified","cpk","isHttps","encryptionAlgorithm","EncryptionAlgorithmAES25","getBlobServiceAccountAudience","storageAccountName","rangeResponseFromModel","_response","makeBlobBeginCopyFromURLPollOperation","cancel","rangeToString","iRange","streamToBuffer","encoding","pos","REQUEST_TIMEOUT","chunkLength","fill","streamToBuffer2","bufferSize","readStreamToLocalFile","rs","ws","getBodyAsText","batchResponse","alloc","BATCH_MAX_PAYLOAD_IN_BYTES","responseLength","utf8ByteLength","batchRequestAssemblePolicy","batchRequest","appendSubRequestToBody","batchHeaderFilterPolicy","xMsHeaderName","X_MS_VERSION","generateAccountSASQueryParameters","accountSASSignatureValues","parsedPermissions","AccountSASPermissions","parsedServices","AccountSASServices","services","parsedResourceTypes","AccountSASResourceTypes","resourceTypes","isSuccessStatusCode","isServerErrorStatusCode","isRetryableStatusCode","http_client_1","HttpCodes","BadGateway","ServiceUnavailable","GatewayTimeout","sleep","milliseconds","getStatusCode","maxAttempts","DefaultRetryAttempts","DefaultRetryDelay","onError","errorMessage","isRetryable","retryTypedResponse","HttpClientError","retryHttpClientResponse","pipeResponseToStream","output","downloadCacheHttpClient","archiveLocation","archivePath","writeStream","downloadResponse","requestUtils_1","SocketTimeout","contentLengthHeader","expectedLength","actualLength","utils","downloadCacheHttpClientConcurrent","archiveDescriptor","promises","socketTimeout","timeoutInMs","lengthHeader","downloads","blockSize","promiseGetter","downloadSegmentRetry","actives","bytesDownloaded","progress","DownloadProgress","startDisplayTimer","progressFn","onProgress","activeDownloads","nextDownload","waitAndWrite","race","loadedBytes","downloadConcurrency","dispose","failures","promiseWithTimeout","downloadSegment","partRes","Range","readBodyBuffer","downloadCacheStorageSDK","client","storage_blob_1","BlockBlobClient","properties","getProperties","maxSegmentSize","constants","MAX_LENGTH","downloadProgress","openSync","controller","abort_controller_1","AbortController","isDone","segmentStart","segmentOffset","segmentSize","nextSegment","segmentTimeoutInMs","downloadToBuffer","concurrency","abort","stopDisplayTimer","closeSync","getUploadOptions","uploadConcurrency","uploadChunkSize","getDownloadOptions","useAzureSdk","concurrentBlobDownloads","lookupOnly","segmentDownloadTimeoutMins","getCacheApiUrl","baseUrl","createAcceptHeader","apiVersion","getRequestOptions","Accept","createHttpClient","bearerCredentialHandler","auth_1","BearerCredentialHandler","getCacheVersion","enableCrossOsArchive","components","crypto","versionSalt","createHash","getCacheEntry","printCachesListForDiagnostics","cacheResult","cacheDownloadUrl","setSecret","cacheListResult","totalCount","cacheEntry","artifactCaches","cacheKey","cacheVersion","creationTime","downloadCache","archiveUrl","url_1","downloadOptions","options_1","downloadUtils_1","reserveCache","reserveCacheRequest","cacheSize","postJson","getContentRange","uploadChunk","resourceUrl","openStream","additionalHeaders","uploadChunkResponse","sendStream","uploadFile","cacheId","fileSize","uploadOptions","maxChunkSize","parallelUploads","all","createReadStream","autoClose","commitCache","filesize","commitCacheRequest","saveCache","commitCacheResponse","getTarPath","gnuTar","systemTar","SystemTarPathOnWindows","ArchiveToolType","GNU","fs_1","BSD","getTarArgs","tarPath","cacheFileName","tarFile","workingDirectory","getWorkingDirectory","BSD_TAR_ZSTD","ManifestFilename","getCommands","tarArgs","compressionArgs","getDecompressionProgram","getCompressionProgram","TarFilename","execCommands","commands","command","MSYS","listTar","createTar","archiveFolder","sourceDirectories","checkPaths","ValidationError","checkKey","isFeatureAvailable","restoreCache","primaryKey","restoreKeys","cacheHttpClient","tar_1","archiveFileSize","typedError","cachePaths","fileSizeLimit","reserveCacheResponse","ReserveCacheError","isDigit","CHAR_0","CHAR_9","isHexit","CHAR_A","CHAR_F","CHAR_a","CHAR_f","isBit","CHAR_1","isOctit","CHAR_7","isAlphaNumQuoteHyphen","CHAR_Z","CHAR_z","CHAR_APOS","CHAR_QUOT","CHAR_LOWBAR","CHAR_HYPHEN","isAlphaNumHyphen","hasKey","descriptor","InlineTable","defineProperties","_type","INLINE_TABLE","isInlineTable","Table","TABLE","_declared","writable","isTable","InlineList","INLINE_LIST","_contentType","isInlineList","List","LIST","isList","Integer","is","BigInt","isSafeInteger","BoxedBigInt","INTEGER","_inspect","isInteger","Float","FLOAT","isFloat","tomlType","makeParserClass","Parser","TOMLParser","ctx","atEndOfWord","CHAR_NUM","CTRL_I","CHAR_SP","atEndOfLine","END","CTRL_J","CTRL_M","parseStart","CHAR_LSQB","parseTableOrList","parseComment","callNow","parseAssignStatement","TomlError","parseWhitespaceToEOL","goto","return","parseAssign","recordAssignStatement","kv","finalKey","kw","parseKeyword","recordAssignKeyword","resultTable","parseAssignKeywordPreDot","CHAR_PERIOD","parseAssignKeywordPostDot","parseAssignEqual","CHAR_EQUALS","parseAssignPreValue","recordAssignValue","returnNow","nextChar","parseTable","parseList","parseTableNext","parseTableMore","keyword","CHAR_RSQB","parseListNext","parseListMore","parseListEnd","parseDoubleString","parseSingleString","CHAR_PLUS","parseNumberSign","CHAR_i","parseInf","CHAR_n","parseNan","parseNumberOrDateTime","CHAR_t","parseBoolean","parseInlineList","recordValue","CHAR_LCUB","parseInlineTable","parseInf2","Infinity","parseNan2","NaN","parseBasicString","parseLiteralString","parseBareKey","consume","parseLiteralMultiStringMaybe","CHAR_DEL","CTRL_CHAR_BOUNDARY","errorControlCharInString","parseLiteralMultiString","parseLiteralMultiStringContent","parseLiteralMultiEnd","parseLiteralMultiEnd2","parseMultiStringMaybe","CHAR_BSOL","parseEscape","recordEscapeReplacement","replacement","parseMultiString","parseMultiStringContent","parseMultiEscape","recordMultiEscapeReplacement","parseMultiEnd","displayCode","parseMultiEnd2","parseMultiTrim","parsePreMultiTrim","escapes","CHAR_u","parseSmallUnicode","parseUnicodeReturn","CHAR_U","parseLargeUnicode","codePoint","SURROGATE_FIRST","SURROGATE_LAST","fromCodePoint","wrap","parseMaybeSignedInfOrNan","parseNoUnder","parseNumberIntegerStart","parseNumberIntegerExponentOrDecimal","parseNumberInteger","parseNumberFloat","CHAR_E","CHAR_e","parseNumberExponentSign","parseNoUnderHexOctBinLiteral","parseNumberExponent","parseNumberBaseOrDateTime","parseNumberOrDateTimeOnly","parseDateTime","CHAR_COLON","parseOnlyTimeHour","parseDateTimeOnly","CHAR_b","parseIntegerBin","CHAR_o","parseIntegerOct","CHAR_x","parseIntegerHex","parseDateMonth","parseDateDay","CHAR_T","parseStartTimeHour","createDate","parseTimeHour","parseTimeMin","parseTimeSec","parseTimeZoneOrFraction","parseOnlyTimeMin","parseOnlyTimeSec","parseOnlyTimeFractionMaybe","createTime","parseOnlyTimeFraction","parseDateTimeFraction","createDateTime","createDateTimeFloat","parseTimeZoneHour","parseTimeZoneSep","parseTimeZoneMin","parseTrue_r","parseFalse_a","CHAR_r","parseTrue_u","parseTrue_e","parseFalse_l","CHAR_l","parseFalse_s","CHAR_s","parseFalse_e","resultArr","recordInlineListValue","listType","parseInlineListNext","CHAR_COMMA","CHAR_RCUB","recordInlineTableValue","parseInlineTableNext","prettyError","lineNumWidth","linePadding","ii","lineNum","hh","parseString","parser","finish","parseAsync","parseAsyncNext","blocksize","setImmediate","parseStream","stm","parseReadable","parseTransform","setEncoding","ended","readable","errored","readNext","Transform","objectMode","transform","cb","emit","flush","typeError","stringifyObject","arrayOneTypeError","getInlineKeys","isInline","getComplexKeys","nobj","indent","inlineKeys","complexKeys","inlineIndent","stringifyKey","stringifyAnyInline","complexIndent","stringifyComplex","keyStr","stringifyBasicString","escapeString","stringifyLiteralString","numpad","codePointAt","stringifyMultilineString","escaped","multilineOk","stringifyInline","stringifyInteger","stringifyFloat","stringifyBoolean","stringifyDatetime","stringifyInlineArray","stringifyInlineTable","dec","isNumber","arrayType","validateArray","stringifyArrayOfTables","stringifyComplexTable","firstValueType","fullKey","createSymlinkInFolder","sourceName","targetName","setExecutable","sourcePath","targetPath","fs$5","symlinkSync","chmodSync","validateVersion","isNightlyKeyword","semver.validRange","validRange","pypyVersion","getPyPyVersionFromPath","installDir","basename","readExactPyPyVersionFile","fileVersion","PYPY_VERSION_FILE","readFileSync","writeExactPyPyVersionFile","resolvedPyPyVersion","pypyFilePath","validatePythonVersionFormatForPyPy","getWindowsInfo","exec.getExecOutput","getExecOutput_1","osName","osVersion","getMacOSInfo","getLinuxInfo","core.debug","coreExports","getOSInfo","osInfo","IS_LINUX","installPyPy","pythonVersion","architecture","allowPreReleases","downloadDir","getAvailablePyPyVersions","releaseData","findRelease","foundAsset","resolvedPythonVersion","downloadUrl","download_url","core.info","pypyPath","tc.downloadTool","tc.extractZip","tc.extractTar","archiveName","toolDir","tc.cacheDir","binaryPath","getPyPyBinaryPath","createPyPySymlink","installPip","tc.HTTPError","httpm.HttpClient","pypyBinaryPath","semver.coerce","pythonBinaryPostfix","semver.major","pypyBinaryPostfix","pypyMajorMinorBinaryPostfix","semver.minor","binaryExtension","pythonLocation","pythonBinary","exec.exec","exec_2","includePrerelease","filterReleases","isPythonVersionSatisfied","semver.satisfies","python_version","isPyPyVersionSatisfied","pypy_version","pypyVersionToSemantic","isArchPresent","files","isArchPresentForWindows","isArchPresentForMacOrLinux","foundRelease","previous","semver.compare","compare","findAssetForWindows","findAssetForMacOrLinux","_binDir","replaceX32toX86","WINDOWS_PLATFORMS","findPyPyVersion","updateEnvironment","checkLatest","pypyVersionSpec","parsePyPyVersion","findPyPyToolCache","pypyInstall.installPyPy","pythonPath","pypyInstall.getPyPyBinaryPath","core.exportVariable","core.setOutput","findPyPyInstallDirForWindows","tc.find","pypyInstall.pypyVersionToSemantic","WINDOWS_ARCHS","findReleaseFromManifest","semanticVersionSpec","getManifest","tc.findFromManifest","tc.getManifestFromRepo","MANIFEST_REPO_OWNER","MANIFEST_REPO_NAME","MANIFEST_REPO_BRANCH","AUTH","installPython","LD_LIBRARY_PATH","core.error","installCpythonFromRelease","pythonExtractedFolder","binDir","useCpythonVersion","pythonVersionToSemantic","desugarDevVersion","installer.findReleaseFromManifest","installer.installCpythonFromRelease","installer.MANIFEST_URL","libPath","pyLibPath","major","minor","userScriptsDir","installed","versionFromPath","impl","idx","isPyPyVersion","setupActionsPython","_setupDir","AGENT_TOOLSDIRECTORY","agent_toolsdirectory","RUNNER_TOOL_CACHE","GITHUB_ACTIONS","addPythonLoggingMatcher","matcherPath","pathExists","__importStar","core_1","candidates","platFilter","candidate","chk","platform_version","_getOsVersion","plat","execSync","lsbContents","_readLinuxVersionFile","lsbReleaseFile","osReleaseFile","contents","proxy","pm","tunnel","Headers","MediaTypes","serverUrl","HttpRedirectCodes","MovedPermanently","ResourceMoved","SeeOther","TemporaryRedirect","PermanentRedirect","HttpResponseRetryCodes","RetryableHttpVerbs","super","setPrototypeOf","HttpClientResponse","handlers","_ignoreSslError","_allowRedirects","_allowRedirectDowngrade","_maxRedirects","_allowRetries","_maxRetries","_keepAlive","_disposed","ignoreSslError","_socketTimeout","allowRedirects","allowRedirectDowngrade","maxRedirects","del","patch","put","head","_getExistingOrDefaultHeader","ApplicationJson","_processResponse","ContentType","putJson","patchJson","_prepareRequest","numTries","requestRaw","Unauthorized","authenticationHandler","canHandleAuthentication","handleAuthentication","redirectsRemaining","redirectUrl","parsedRedirectUrl","_performExponentialBackoff","_agent","requestRawWithCallback","onResult","callbackCalled","handleResult","httpModule","sock","getAgent","_getAgent","defaultPort","_mergeHeaders","prepareRequest","lowercaseKeys","_default","clientHeader","useProxy","_proxyAgent","maxSockets","globalAgent","agentOptions","proxyAuth","tunnelAgent","overHttps","httpsOverHttps","httpsOverHttp","httpOverHttps","httpOverHttp","Agent","rejectUnauthorized","retryNumber","dateTimeDeserializer","NotFound","deserializeDates","action","seconds","getSleepAmount","__importDefault","HTTPError_1","toolCache","downloadTool_1","extractTar_1","extractZip_1","cacheDir_1","find_1","getManifestFromRepo_1","findFromManifest_1","internalPathHelper","internalPatternHelper","xs","fn","defaults","def","orig","MAX_PATTERN_LENGTH","nonull","filename","matchBase","matchOne","flipNegate","fi","pi","fl","hit","fr","pr","swallowee","Path","segments","remaining","dir","skipSlash","minimatch_1","internal_path_1","Pattern","patternOrNegate","isImplicitPattern","homedir","getLiteral","fixupPattern","trailingSeparator","foundGlob","searchSegments","rootRegExp","minimatchOptions","Directory","All","globEscape","literalSegments","literal","closed","i2","c2","SearchState","globOptionsHelper","patternHelper","internal_pattern_1","internal_search_state_1","searchPaths","lstat","traversalChain","stats","stat","childLevel","childItems","readdir","File","realPath","realpath","cacheUtils","ValidPhaseNames","policies","_policies","_orderedPolicies","removedPolicies","policyDescriptor","reduceRight","orderPolicies","createPhase","hasRun","hasAfterPolicies","getPhase","retryPhase","serializePhase","deserializePhase","signPhase","noPhase","walkPhase","dependsOn","dependant","dependants","walkPhases","orderedPhases","policyMap","afterPolicies","afterPolicyName","afterNode","beforePolicyName","beforeNode","iteration","initialResultLength","debugEnvVariable","logLevelFromEnv","AZURE_LOG_LEVEL","globalThis","v4RandomUUID","importScripts","Deno","Bun","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","allowedHeaderNames","allowedQueryParameters","seen","sanitizeHeaders","sanitizeQuery","sanitized","SuppressedError","_headersMap","normalizedName","browser","helpers","net","https_1","__exportStar","INTERNAL","isSecureEndpoint","secureEndpoint","incrementSockets","maxTotalSockets","sockets","fakeSocket","Socket","totalSocketCount","decrementSockets","getName","createSocket","connectOpts","addRequest","currentSocket","createConnection","debug_1","tls","agent_base_1","parse_proxy_response_1","proxyHeaders","debug$1","ALPNProtocols","servername","isIPv6","Host","proxyResponsePromise","listenerCount","protocols","dist","events_1","_header","setRequestProps","getHeader","setHeader","first","_implicitHeader","outputData","for","initialContext","_contextMap","newContext","deleteValue","cjsState","custom","errorSanitizer","REQUEST_SEND_ERROR","DEFAULT_TLS_SETTINGS","ReportTransform","_transform","_encoding","progressCallback","cachedHttpsAgents","WeakMap","abortController","abortListener","event","acceptEncoding","shouldDecompress","responseStream","bodyLength","uploadReportStream","makeRequest","downloadReportStream","uploadStreamDone","downloadStreamDone","getOrCreateAgent","cachedHttpAgent","enableBrowserStreams","validateConstraints","failValidation","constraintName","constraintValue","constraints","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","UniqueItems","ar","mapperType","Base64Url","ByteArray","Composite","DateTime","DateTimeRfc1123","Dictionary","Enum","TimeSpan","UnixTime","CSV","SSV","Multi","TSV","Pipes","ServiceClient","_requestContentType","requestContentType","_endpoint","_allowInsecureConnection","_httpClient","additionalPolicies","sendOperationRequest","rawResponse","flatResponse","onResponse","details","contains","remove","headerNames","headerValues","resultPreservingCasing","ExtendedServiceClient","keepAliveOptions","handleRedirects","userProvidedCallBack","lastResponse","HttpPipelineLogLevel","nameStartChar","nameRegexp","regexName","isEmptyObject","arrayMode","string","allmatches","lastIndex","tagFound","reachedRoot","tagStartPos","closingTag","attrStrStart","isValid","otg","openPos","afterAmp","preserveOrder","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","buildOptions","OptionsBuilder","XmlNode","decimalPoint","xmlNode","OrderedObjParser$1","tagsNodeStack","docTypeEntities","apos","lt","quot","ampEntity","space","cent","pound","yen","euro","copyright","inr","num_dec","num_hex","parseXml","xmlObj","lastTagName","propIndex","endIndex","OrderedObjParser","validator","XMLParser$1","validationOption","orderedObjParser","orderedResult","addEntity","buildFromOrderedJs","oneListGroup","jObj","arrayNodeName","buildAttrPairStr","arrLen","listTagVal","listTagAttr","Ks","L","closeTag","tagEndExp","piClosingChar","abortedMap","AbortSignal","none","dispatchEvent","_event","AbortController$1","parentSignals","_signal","parentSignal","unref","BaseRequestPolicy","_nextPolicy","_options","BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES","BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES","BLOCK_BLOB_MAX_BLOCKS","DEFAULT_BLOCK_BUFFER_SIZE_BYTES","DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES","DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS","SIGNATURE","SNAPSHOT","VERSIONID","HTTPURLConnection","HTTP_ACCEPTED","HTTP_CONFLICT","HTTP_NOT_FOUND","HTTP_PRECON_FAILED","HTTP_RANGE_NOT_SATISFIABLE","AUTHORIZATION_SCHEME","CONTENT_ID","CONTENT_TRANSFER_ENCODING","USER_AGENT","X_MS_CLIENT_REQUEST_ID","X_MS_COPY_SOURCE","X_MS_ERROR_CODE","X_MS_CopySourceErrorCode","ETagNone","ETagAny","SIZE_1_MB","BATCH_MAX_REQUEST","HTTP_LINE_ENDING","HTTP_VERSION_1_1","BlobUsesCustomerSpecifiedEncryptionMsg","BlobDoesNotUseCustomerSpecifiedEncryption","StorageRetryPolicy","nextPolicy","attemptSendRequest","CredentialPolicy","Uint32Array","StorageSharedKeyCredentialPolicy","Credential","AnonymousCredentialPolicy","StorageBrowserPolicy","requestPolicyFactories","BlobServiceProperties","blobAnalyticsLogging","hourMetrics","minuteMetrics","cors","defaultServiceVersion","deleteRetentionPolicy","staticWebsite","Logging","deleteProperty","retentionPolicy","RetentionPolicy","days","Metrics","includeAPIs","CorsRule","allowedOrigins","allowedMethods","allowedHeaders","exposedHeaders","maxAgeInSeconds","StaticWebsite","indexDocument","errorDocument404Path","defaultIndexDocumentPath","StorageError","authenticationErrorDetail","BlobServiceStatistics","geoReplication","GeoReplication","lastSyncOn","ListContainersSegmentResponse","serviceEndpoint","marker","maxPageSize","containerItems","continuationToken","ContainerItem","deleted","metadata","ContainerProperties","lastModified","etag","leaseStatus","leaseState","leaseDuration","publicAccess","hasImmutabilityPolicy","hasLegalHold","defaultEncryptionScope","preventEncryptionScopeOverride","deletedOn","remainingRetentionDays","isImmutableStorageWithVersioningEnabled","KeyInfo","UserDelegationKey","FilterBlobSegment","where","blobs","FilterBlobItem","BlobTags","BlobTag","SignedIdentifier","id","accessPolicy","AccessPolicy","ListBlobsFlatSegmentResponse","BlobFlatListSegment","BlobItemInternal","snapshot","isCurrentVersion","blobTags","objectReplicationMetadata","hasVersionsOnly","BlobName","BlobPropertiesInternal","createdOn","contentMD5","blobSequenceNumber","blobType","copyId","copyStatus","copySource","copyProgress","copyCompletedOn","copyStatusDescription","serverEncrypted","incrementalCopy","destinationSnapshot","accessTier","accessTierInferred","archiveStatus","customerProvidedKeySha256","accessTierChangedOn","tagCount","isSealed","rehydratePriority","lastAccessedOn","immutabilityPolicyExpiresOn","immutabilityPolicyMode","legalHold","ListBlobsHierarchySegmentResponse","BlobHierarchyListSegment","BlobPrefix","BlockLookupList","committed","uncommitted","latest","BlockList","committedBlocks","uncommittedBlocks","Block","PageList","PageRange","ClearRange","QueryRequest","queryType","expression","inputSerialization","outputSerialization","QuerySerialization","QueryFormat","parquetTextConfiguration","DelimitedTextConfiguration","JsonTextConfiguration","ArrowConfiguration","ArrowField","precision","scale","ServiceSetPropertiesHeaders","clientRequestId","errorCode","ServiceSetPropertiesExceptionHeaders","ServiceGetPropertiesHeaders","ServiceGetPropertiesExceptionHeaders","ServiceGetStatisticsHeaders","ServiceGetStatisticsExceptionHeaders","ServiceListContainersSegmentHeaders","ServiceListContainersSegmentExceptionHeaders","ServiceGetUserDelegationKeyHeaders","ServiceGetUserDelegationKeyExceptionHeaders","ServiceGetAccountInfoHeaders","skuName","accountKind","isHierarchicalNamespaceEnabled","ServiceGetAccountInfoExceptionHeaders","ServiceSubmitBatchHeaders","ServiceSubmitBatchExceptionHeaders","ServiceFilterBlobsHeaders","ServiceFilterBlobsExceptionHeaders","ContainerCreateHeaders","ContainerCreateExceptionHeaders","ContainerGetPropertiesHeaders","blobPublicAccess","denyEncryptionScopeOverride","ContainerGetPropertiesExceptionHeaders","ContainerDeleteHeaders","ContainerDeleteExceptionHeaders","ContainerSetMetadataHeaders","ContainerSetMetadataExceptionHeaders","ContainerGetAccessPolicyHeaders","ContainerGetAccessPolicyExceptionHeaders","ContainerSetAccessPolicyHeaders","ContainerSetAccessPolicyExceptionHeaders","ContainerRestoreHeaders","ContainerRestoreExceptionHeaders","ContainerRenameHeaders","ContainerRenameExceptionHeaders","ContainerSubmitBatchHeaders","ContainerSubmitBatchExceptionHeaders","ContainerFilterBlobsHeaders","ContainerFilterBlobsExceptionHeaders","ContainerAcquireLeaseHeaders","leaseId","ContainerAcquireLeaseExceptionHeaders","ContainerReleaseLeaseHeaders","ContainerReleaseLeaseExceptionHeaders","ContainerRenewLeaseHeaders","ContainerRenewLeaseExceptionHeaders","ContainerBreakLeaseHeaders","leaseTime","ContainerBreakLeaseExceptionHeaders","ContainerChangeLeaseHeaders","ContainerChangeLeaseExceptionHeaders","ContainerListBlobFlatSegmentHeaders","ContainerListBlobFlatSegmentExceptionHeaders","ContainerListBlobHierarchySegmentHeaders","ContainerListBlobHierarchySegmentExceptionHeaders","ContainerGetAccountInfoHeaders","ContainerGetAccountInfoExceptionHeaders","BlobDownloadHeaders","objectReplicationPolicyId","objectReplicationRules","contentRange","acceptRanges","blobCommittedBlockCount","isServerEncrypted","encryptionKeySha256","blobContentMD5","lastAccessed","contentCrc64","BlobDownloadExceptionHeaders","BlobGetPropertiesHeaders","isIncrementalCopy","BlobGetPropertiesExceptionHeaders","BlobDeleteHeaders","BlobDeleteExceptionHeaders","BlobUndeleteHeaders","BlobUndeleteExceptionHeaders","BlobSetExpiryHeaders","BlobSetExpiryExceptionHeaders","BlobSetHttpHeadersHeaders","BlobSetHttpHeadersExceptionHeaders","BlobSetImmutabilityPolicyHeaders","immutabilityPolicyExpiry","BlobSetImmutabilityPolicyExceptionHeaders","BlobDeleteImmutabilityPolicyHeaders","BlobDeleteImmutabilityPolicyExceptionHeaders","BlobSetLegalHoldHeaders","BlobSetLegalHoldExceptionHeaders","BlobSetMetadataHeaders","BlobSetMetadataExceptionHeaders","BlobAcquireLeaseHeaders","BlobAcquireLeaseExceptionHeaders","BlobReleaseLeaseHeaders","BlobReleaseLeaseExceptionHeaders","BlobRenewLeaseHeaders","BlobRenewLeaseExceptionHeaders","BlobChangeLeaseHeaders","BlobChangeLeaseExceptionHeaders","BlobBreakLeaseHeaders","BlobBreakLeaseExceptionHeaders","BlobCreateSnapshotHeaders","BlobCreateSnapshotExceptionHeaders","BlobStartCopyFromURLHeaders","BlobStartCopyFromURLExceptionHeaders","BlobCopyFromURLHeaders","xMsContentCrc64","BlobCopyFromURLExceptionHeaders","BlobAbortCopyFromURLHeaders","BlobAbortCopyFromURLExceptionHeaders","BlobSetTierHeaders","BlobSetTierExceptionHeaders","BlobGetAccountInfoHeaders","BlobGetAccountInfoExceptionHeaders","BlobQueryHeaders","copyCompletionTime","BlobQueryExceptionHeaders","BlobGetTagsHeaders","BlobGetTagsExceptionHeaders","BlobSetTagsHeaders","BlobSetTagsExceptionHeaders","PageBlobCreateHeaders","PageBlobCreateExceptionHeaders","PageBlobUploadPagesHeaders","PageBlobUploadPagesExceptionHeaders","PageBlobClearPagesHeaders","PageBlobClearPagesExceptionHeaders","PageBlobUploadPagesFromURLHeaders","PageBlobUploadPagesFromURLExceptionHeaders","PageBlobGetPageRangesHeaders","blobContentLength","PageBlobGetPageRangesExceptionHeaders","PageBlobGetPageRangesDiffHeaders","PageBlobGetPageRangesDiffExceptionHeaders","PageBlobResizeHeaders","PageBlobResizeExceptionHeaders","PageBlobUpdateSequenceNumberHeaders","PageBlobUpdateSequenceNumberExceptionHeaders","PageBlobCopyIncrementalHeaders","PageBlobCopyIncrementalExceptionHeaders","AppendBlobCreateHeaders","AppendBlobCreateExceptionHeaders","AppendBlobAppendBlockHeaders","blobAppendOffset","AppendBlobAppendBlockExceptionHeaders","AppendBlobAppendBlockFromUrlHeaders","AppendBlobAppendBlockFromUrlExceptionHeaders","AppendBlobSealHeaders","AppendBlobSealExceptionHeaders","BlockBlobUploadHeaders","BlockBlobUploadExceptionHeaders","BlockBlobPutBlobFromUrlHeaders","BlockBlobPutBlobFromUrlExceptionHeaders","BlockBlobStageBlockHeaders","BlockBlobStageBlockExceptionHeaders","BlockBlobStageBlockFromURLHeaders","BlockBlobStageBlockFromURLExceptionHeaders","BlockBlobCommitBlockListHeaders","BlockBlobCommitBlockListExceptionHeaders","BlockBlobGetBlockListHeaders","BlockBlobGetBlockListExceptionHeaders","blobServiceProperties","BlobServicePropertiesMapper","accept","restype","comp","timeoutInSeconds","accept1","comp1","comp2","include","keyInfo","KeyInfoMapper","comp3","restype1","comp4","multipartContentType","comp5","restype2","access","ifModifiedSince","ifUnmodifiedSince","comp6","comp7","containerAcl","comp8","deletedContainerName","deletedContainerVersion","comp9","sourceContainerName","sourceLeaseId","comp10","duration","proposedLeaseId","action1","leaseId1","action2","action3","breakPeriod","action4","proposedLeaseId1","include1","rangeGetContentMD5","rangeGetContentCRC64","encryptionKey","ifMatch","ifNoneMatch","ifTags","deleteSnapshots","blobDeleteType","comp11","expiryOptions","blobCacheControl","blobContentType","blobContentEncoding","blobContentLanguage","blobContentDisposition","comp12","comp13","comp14","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","blobTagsString","sealBlob","legalHold1","xMsRequiresSync","sourceContentMD5","copySourceAuthorization","copySourceTags","comp15","copyActionAbortConstant","comp16","tier1","queryRequest","QueryRequestMapper","comp17","comp18","BlobTagsMapper","transactionalContentMD5","transactionalContentCrc64","contentType1","body1","accept2","comp19","pageWrite","ifSequenceNumberLessThanOrEqualTo","ifSequenceNumberLessThan","ifSequenceNumberEqualTo","pageWrite1","sourceUrl","sourceRange","sourceContentCrc64","range1","comp20","prevsnapshot","prevSnapshotUrl","sequenceNumberAction","comp21","blobType1","comp22","maxSize","appendPosition","sourceRange1","comp23","blobType2","copySourceBlobProperties","comp24","blockId","blocks","BlockLookupListMapper","comp25","ServiceImpl","setProperties","setPropertiesOperationSpec","getPropertiesOperationSpec","getStatistics","getStatisticsOperationSpec","listContainersSegment","listContainersSegmentOperationSpec","getUserDelegationKey","getUserDelegationKeyOperationSpec","getAccountInfo","getAccountInfoOperationSpec","submitBatch","submitBatchOperationSpec","filterBlobs","filterBlobsOperationSpec","xmlSerializer","coreClient","Mappers","ContainerImpl","createOperationSpec","deleteOperationSpec","setMetadata","setMetadataOperationSpec","getAccessPolicy","getAccessPolicyOperationSpec","setAccessPolicy","setAccessPolicyOperationSpec","restore","restoreOperationSpec","rename","renameOperationSpec","acquireLease","acquireLeaseOperationSpec","releaseLease","releaseLeaseOperationSpec","renewLease","renewLeaseOperationSpec","breakLease","breakLeaseOperationSpec","changeLease","changeLeaseOperationSpec","listBlobFlatSegment","listBlobFlatSegmentOperationSpec","listBlobHierarchySegment","listBlobHierarchySegmentOperationSpec","BlobImpl","download","downloadOperationSpec","undelete","undeleteOperationSpec","setExpiry","setExpiryOperationSpec","setHttpHeaders","setHttpHeadersOperationSpec","setImmutabilityPolicyOperationSpec","deleteImmutabilityPolicy","deleteImmutabilityPolicyOperationSpec","setLegalHold","setLegalHoldOperationSpec","createSnapshot","createSnapshotOperationSpec","startCopyFromURL","startCopyFromURLOperationSpec","copyFromURL","copyFromURLOperationSpec","abortCopyFromURL","abortCopyFromURLOperationSpec","setTier","setTierOperationSpec","queryOperationSpec","getTags","getTagsOperationSpec","setTags","setTagsOperationSpec","PageBlobImpl","uploadPages","uploadPagesOperationSpec","clearPages","clearPagesOperationSpec","uploadPagesFromURL","uploadPagesFromURLOperationSpec","getPageRanges","getPageRangesOperationSpec","getPageRangesDiff","getPageRangesDiffOperationSpec","resize","resizeOperationSpec","updateSequenceNumber","updateSequenceNumberOperationSpec","copyIncremental","copyIncrementalOperationSpec","AppendBlobImpl","appendBlock","appendBlockOperationSpec","appendBlockFromUrl","appendBlockFromUrlOperationSpec","seal","sealOperationSpec","BlockBlobImpl","upload","uploadOperationSpec","putBlobFromUrl","putBlobFromUrlOperationSpec","stageBlock","stageBlockOperationSpec","stageBlockFromURL","stageBlockFromURLOperationSpec","commitBlockList","commitBlockListOperationSpec","getBlockList","getBlockListOperationSpec","coreHttpCompat","service","container","pageBlob","appendBlob","blockBlob","StorageContextClient","StorageClient","operationSpecToSend","storageClientContext","blobSASPermissions","permissionLike","containerSASPermissions","SASProtocol","ipRangeInner","permissionsOrOptions","signedOid","params","param","tryAppendQueryParameter","BlobLeaseClient","_leaseId","_url","clientContext","_isContainer","_containerOrBlobOperation","conditions","tagConditions","modifiedAccessConditions","RetriableReadableStream","getter","highWaterMark","retries","sourceDataHandler","doInjectErrorOnce","pause","sourceErrorOrEndHandler","sourceAbortedHandler","removeSourceEventHandlers","maxRetryRequests","newSource","setSourceEventHandlers","_read","_destroy","BlobDownloadResponse","objectReplicationDestinationPolicyId","objectReplicationSourceProperties","contentAsBlob","blobDownloadStream","AVRO_SYNC_MARKER_SIZE","AVRO_INIT_BYTES","AVRO_CODEC_KEY","AVRO_SCHEMA_KEY","AvroParser","readFixedBytes","bytes","readByte","readZigZagLong","byte","haveMoreByte","significanceInFloat","zigZagEncoded","significanceInBit","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","readLong","readInt","readNull","readBoolean","readFloat","u8arr","view","DataView","byteOffset","getFloat32","readDouble","getFloat64","readBytes","readString","utf8decoder","TextDecoder","decode","readMapPair","readItemMethod","readMap","readArray","readPairMethod","dict","items","AvroComplex","AvroPrimitive","AvroType","fromSchema","fromStringSchema","fromArraySchema","fromObjectSchema","NULL","BOOLEAN","INT","LONG","DOUBLE","BYTES","STRING","AvroPrimitiveType","AvroUnionType","RECORD","aliases","fields","field","AvroRecordType","ENUM","symbols","AvroEnumType","MAP","AvroMapType","primitive","_primitive","_symbols","types","_types","typeIndex","itemType","_itemType","_fields","record","AvroReader","blockOffset","_blockOffset","objectIndex","_objectIndex","dataStream","headerStream","currentBlockOffset","indexWithinCurrentBlock","_dataStream","_headerStream","_initialized","_initialBlockOffset","initialize","_metadata","codec","_syncMarker","_itemsRemainingInBlock","hasNext","parseObjects","AvroReadable","ABORT_ERROR","AvroReadableFromStream","toUint8Array","_readable","_position","cleanUp","readableCallback","rejectCallback","callbackChunk","BlobQuickQueryStream","avroPaused","avroReader","avroIter","readInternal","avroNext","$schema","bytesScanned","totalBytes","fatal","description","isFatal","BlobQueryResponse","BlockBlobTier","PremiumPageBlobTier","StorageBlobAudience","PollerStoppedError","PollerCancelledError","Poller","operation","resolveOnUnsuccessful","stopped","pollProgressCallbacks","startPolling","pollOptions","isStopped","poll","pollOnce","fireProgress","processUpdatedState","cancelOnce","pollOncePromise","clearPollOncePromise","isCancelled","getResult","pollUntilDone","isCompleted","stopPolling","cancelOperation","cancelPromise","getOperationState","BlobBeginCopyFromUrlPoller","blobClient","intervalInMs","resumeFrom","startCopyFromURLOptions","isStarted","prevCopyProgress","BatchStates","Batch","completed","operations","Good","emitter","EventEmitter","addOperation","parallelExecute","do","nextOperation","BuffersStream","byteOffsetInCurrentBuffer","bufferIndex","pushedBytesLength","readableHighWaterMark","outBuffers","remainingDataInAllBuffers","remainingCapacityInThisBuffer","maxBufferLength","PooledBuffer","_size","capacity","totalLength","bufferNum","allocUnsafe","targetOffset","sourceOffset","totalCopiedNum","copiedNum","getReadableStream","BufferScheduler","maxBuffers","outgoingHandler","isStreamEnd","executingOutgoingHandlers","numBuffers","unresolvedDataArray","unresolvedLength","incoming","outgoing","appendUnresolvedData","resolveData","triggerOutgoingHandlers","shiftBufferFromUnresolvedDataArray","triggerOutgoingHandler","bufferLength","reuseBuffer","fsStat","fsCreateReadStream","BlobClient","_containerName","urlOrConnectionString","credentialOrPipelineOrContainerName","blobNameOrOptions","extractedCreds","getBlobAndContainerNamesFromUrl","blobContext","_snapshot","_versionId","withSnapshot","withVersion","getAppendBlobClient","AppendBlobClient","getBlockBlobClient","getPageBlobClient","PageBlobClient","customerProvidedKey","leaseAccessConditions","rangeGetContentCrc64","cpkInfo","wrappedRes","updatedDownloadOptions","exists","deleteIfExists","setHTTPHeaders","blobHTTPHeaders","blobHttpHeaders","wrappedResponse","getBlobLeaseClient","proposeLeaseId","beginCopyFromURL","poller","syncCopyFromURL","sourceConditions","sourceModifiedAccessConditions","sourceAuthorization","immutabilityPolicy","expiriesOn","policyMode","setAccessTier","param1","param2","param3","param4","transferProgress","batch","off","chunkEnd","maxRetryRequestsPerBlock","downloadToFile","pathComponents","generateSasUrl","sas","legalHoldEnabled","appendBlobContext","createIfNotExists","appendPositionAccessConditions","appendBlockFromURL","sourceURL","blockBlobContext","_blobContext","inputTextConfiguration","outputTextConfiguration","syncUploadFromURL","uploadData","uploadSeekableInternal","browserBlob","uploadBrowserData","browserData","bodyFactory","maxSingleShotSize","numBlocks","blockList","blockID","uploadStream","maxConcurrency","blockNum","scheduler","pageBlobContext","sequenceNumberAccessConditions","destOffset","listPageRangesSegment","listPageRangeItemSegments","getPageRangeItemSegmentsResponse","listPageRangeItems","listPageRanges","iter","byPage","prevSnapshot","listPageRangesDiffSegment","prevSnapshotOrUrl","listPageRangeDiffItemSegments","listPageRangeDiffItems","listPageRangesDiff","getPageRangesDiffForManagedDisks","sequenceNumber","startCopyIncremental","HTTP_HEADER_DELIMITER","SPACE_DELIMITER","NOT_FOUND","BatchResponseParser","subRequests","responseBatchBoundary","perResponsePrefix","batchResponseEnding","parseBatchResponse","subResponses","subResponseCount","deserializedSubResponses","subResponsesSucceededCount","subResponsesFailedCount","subResponse","deserializedSubResponse","responseLines","subRespHeaderStartFound","subRespHeaderEndFound","subRespFailed","contentId","responseLine","tokens","_request","MutexLockStatus","KnownEncryptionAlgorithmType","Mutex","lock","UNLOCKED","LOCKED","onUnlockEvent","unlock","emitUnlockEvent","BlobBatch","InnerBatchRequest","getMultiPartContentType","getMultipartContentType","getHttpRequestBody","getSubRequests","addSubRequestInternal","subRequest","assembleSubRequestFunc","preAddSubRequest","postAddSubRequest","setBatchType","batchType","deleteBlob","urlOrBlobClient","credentialOrOptions","createPipeline","setBlobAccessTier","credentialOrTier","tierOrOptions","operationCount","tempGuid","subRequestPrefix","batchRequestEnding","BlobBatchClient","credentialOrPipeline","serviceOrContainerContext","createBatch","deleteBlobs","urlsOrBlobClients","setBlobsAccessTier","batchRequestBody","rawBatchResponse","batchResponseParser","responseSummary","ContainerClient","getContainerNameFromUrl","containerContext","getBlobClient","signedIdentifiers","acl","uploadBlockBlob","blockBlobClient","blobItemInternal","listSegments","marker_1","listBlobsFlatSegmentResponse","listItems","listBlobsFlat","includeCopy","includeDeleted","includeMetadata","includeSnapshots","includeVersions","includeUncommitedBlobs","includeTags","includeDeletedWithVersions","includeImmutabilityPolicy","includeLegalHold","listHierarchySegments","delimiter_1","listBlobsHierarchySegmentResponse","listItemsByHierarchy","listBlobsByHierarchy","findBlobsByTagsSegment","tagFilterSqlExpression","findBlobsByTagsSegments","tagFilterSqlExpression_1","findBlobsByTagsItems","findBlobsByTags","listSegmentOptions","getBlobBatchClient","accountSASPermissions","accountSASResourceTypes","queue","accountSASServices","BlobServiceClient","fromConnectionString","serviceContext","getContainerClient","createContainer","containerClient","containerCreateResponse","deleteContainer","undeleteContainer","destinationContainerName","containerUndeleteResponse","renameContainer","containerRenameResponse","sourceCondition","listContainersSegmentResponse","listContainers","includeSystem","generateAccountSasUrl","requestUtils","segmentIndex","receivedBytes","displayedComplete","startTime","setReceivedBytes","getTransferredBytes","display","transferredBytes","percentage","toFixed","elapsedTime","displayCallback","timeoutHandle","downloadUtils","timeoutMs","timeoutPromise","tar","cache","ParserEND","ParserError","linenumber","captureStackTrace","State","returned","_buf","getNext","runOne","haveBuffer","last","returnWith","FloatingDateTime","isFloating","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","commonjsGlobal","isDate","Time","isTime","tomlParserModule","fromTOML","terr","_custom","utilInspect","eval","asIntN","parseModule","stringifyModule","TOKEN","core.getInput","MANIFEST_URL","fileURLToPath","pathToFileURL","__filename","_documentCurrentScript","src","baseURI"],"mappings":"+SAEA,SAASA,YAAYC,GACbC,IACAC,EAIAC,EALAF,EAA+B,WAApBD,EAAOI,SAElBC,OAAAA,YAAYL,KAKZG,EADAF,EACWK,QAAQC,IAAiB,aAAKD,QAAQC,IAAiB,YAGvDD,QAAQC,IAAgB,YAAKD,QAAQC,IAAgB,WAEhEJ,IACWD,EAAA,IAAIM,IAAIL,KAVZD,CAaf,CAEA,SAASG,YAAYL,GACb,IAACA,EAAOS,SACD,OAAA,EAEPC,IAKAC,EALAD,EAAUJ,QAAQC,IAAc,UAAKD,QAAQC,IAAc,UAAK,GACpE,IAAKG,EACM,OAAA,EAIPV,EAAOY,KACGC,GAAOb,EAAOY,KAEC,UAApBZ,EAAOI,SACFO,EAAA,GAEe,WAApBX,EAAOI,WACFO,EAAA,KAGd,IAAIG,EAAgB,CAACd,EAAOS,SAASM,eACd,iBAAZJ,GACPG,EAAcE,KAAK,GAAGF,EAAc,MAAMH,KAG9C,IAAA,IAASM,KAAoBP,EACxBQ,MAAM,KACNC,KAASC,GAAAA,EAAEC,OAAON,gBAClBO,QAAOF,GAAKA,IACb,GAAIN,EAAcS,MAAUH,GAAAA,IAAMH,IACvB,OAAA,EAGR,OAAA,CACX,CClBA,SAAsBO,aACpBC,EACAC,EACAC,EACAC,sDAEAF,EAAOA,GAAQG,OAAKC,KAAKC,oBAAqBC,KAAAC,iBACxCC,KAAGC,OAAON,OAAKO,QAAQV,IACxBW,OAAAA,MAAM,eAAeZ,GACrBY,OAAAA,MAAM,eAAeX,GAE1B,MACMY,EAAaC,WACjB,uCACA,IAEIC,EAAaD,WACjB,uCACA,IAEIE,EAAc,IAAIC,eAAAC,YATJ,EAS6BL,EAAYE,GACtD,aAAMC,EAAYG,SACvB,IAAWC,YAAAC,UAAA,OAAA,GAAA,YACT,aAAaC,oBAAoBtB,EAAKC,GAAQ,GAAIC,EAAMC,EACzD,MACcoB,KACTA,aAAeC,WAAaD,EAAIE,gBAGX,IAArBF,EAAIE,gBACmB,MAAvBF,EAAIE,gBACmB,MAAvBF,EAAIE,qBAYd,SAAeH,oBACbtB,EACAC,EACAC,EACAC,sDAEIuB,GAAAA,KAAGC,WAAW1B,GAChB,MAAU2B,MAAM,yBAAyB3B,oBAI3C,MAAM4B,EAAO,IAAIC,MAAMC,WAAWC,UAAW,GAAI,CAC/CC,cAAc,IAGZ/B,IACFgC,OAAKtB,MAAM,iBACKuB,IAAZhC,IACFA,EAAU,CAAA,GAEZA,EAAQiC,cAAgBlC,GAG1B,MAAMmC,QAA2CR,EAAKS,IAAItC,EAAKG,GAC3DkC,GAAgC,MAAhCA,EAASE,QAAQC,WAAoB,CACvC,MAAMjB,EAAM,IAAIC,UAAUa,EAASE,QAAQC,YAIrCjB,MAHDX,OAAAA,MACH,4BAA4BZ,YAAcqC,EAASE,QAAQC,uBAAuBH,EAASE,QAAQE,kBAE/FlB,EAIR,MAAMmB,EAAWC,OAAKC,UAAUC,SAAOH,UAKjCI,EAJyBhC,WAC7B,+CACA,IAAMuB,EAASE,SAEEQ,GACnB,IAAIC,GAAY,EACZ,IAIK/C,aAHDyC,EAASI,EAAYpB,KAAGuB,kBAAkBhD,IAChDiC,OAAKtB,MAAM,qBACCoC,GAAA,EACL/C,EACC,QAER,IAAK+C,EAAW,CACdd,OAAKtB,MAAM,mBACP,UACIH,KAAGyC,KAAKjD,EACf,OAAQsB,GACPW,OAAKtB,MAAM,qBAAqBX,OAAUsB,EAAIgB,iBAqBtD,SAAsBY,UACpBC,EACAnD,EACAoD,sDAEAC,WAAAA,GAAGC,aAAY,2CACfD,WAAAA,GAAGF,EAAM,gCAEFnD,QAAMuD,qBAAqBvD,GAE5BwD,MAAAA,EAAc5E,QAAQ6E,MAE5B,GADA7E,QAAQ8E,MAAM1D,GACVoD,EACE,IACF,MACMO,EAAiB,CACrB,IAFe1B,OAAK2B,UAAY,OAAS,OAIzC,MACA,YACAT,GAEIU,EAAuB,CAC3BC,QAAQ,SAEJC,SAAAC,KAAK,IAAIZ,KAAYO,EAAME,GACzB,QACRjF,QAAQ8E,MAAMF,OAEX,CACL,MAOMG,EAAiB,CACrB,UACA,OACA,aACA,kBACA,mBACA,eACA,WARc,MANMxD,OACnBC,KAAK6D,UAAW,KAAM,UAAW,oBACjCC,QAAQ,KAAM,MACdA,QAAQ,WAAY,iBACHf,EAAKe,QAAQ,KAAM,MAAMA,QAAQ,WAAY,iBAC3ClE,EAAKkE,QAAQ,KAAM,MAAMA,QAAQ,WAAY,QAY7DL,EAAuB,CAC3BC,QAAQ,GAEN,IACF,MAAMK,QAA+B3D,KAAG4D,MAAM,cAAc,SACtDL,SAAAC,KAAK,IAAIG,KAAmBR,EAAME,GAChC,QACRjF,QAAQ8E,MAAMF,IAIXxD,OAAAA,KAWT,SAAsBqE,aACpBlB,EACAnD,EACAsE,EAA2B,yDAE3B,IAAKnB,EACG,MAAIxB,MAAM,gCAIX3B,QAAMuD,qBAAqBvD,GAGlCiC,OAAKtB,MAAM,0BACX,IAAI4D,EAAgB,SACdR,SAAAC,KAAK,gBAAiB,GAAI,CAC9BQ,kBAAkB,EAClBV,QAAQ,EACRW,UAAW,CACTC,OAASC,GAAkBJ,GAAiBI,KAC5CC,OAASD,GAAkBJ,GAAiBI,QAG3ChE,OAAAA,MAAM4D,EAAc5E,QACzB,MAAMkF,EAAWN,EAAclF,cAAcyF,SAAS,WAGlDnB,IAAAA,EAEKW,EADLA,aAAiBS,MACZT,EAEA,CAACA,GAGNrC,OAAK2B,YAAcU,EAAMQ,SAAS,MACpCnB,EAAKrE,KAAK,MAGZ,IAAI0F,EAAUhF,EACViF,EAAU9B,EAmBPnD,OAlBHsD,cAAcuB,IAChBlB,EAAKrE,KAAK,iBACAU,EAAAA,EAAKkE,QAAQ,MAAO,KAIpBf,EAAAA,EAAKe,QAAQ,MAAO,MAG5BW,IAEFlB,EAAKrE,KAAK,gCACVqE,EAAKrE,KAAK,gBAGZqE,EAAKrE,KAAK,KAAM0F,EAAS,KAAMC,SACzBlB,SAAAC,KAAK,MAAOL,GAEX3D,KAWT,SAAsBkF,WACpB/B,EACAnD,EACAsE,EAA2B,uDAOvBX,IAAAA,EALJN,WAAAA,GAAG8B,SAAQ,4CACX9B,WAAAA,GAAGF,EAAM,gCAEFnD,QAAMuD,qBAAqBvD,GAIzBsE,EADLA,aAAiBS,MACZT,EAEA,CAACA,GAGVX,EAAKrE,KAAK,KAAM,KAAMU,EAAM,KAAMmD,GAE9BlB,OAAK2B,WACPD,EAAKrE,KAAK,MAGZ,MAAM8F,QAAwB5E,KAAG4D,MAAM,OAAO,GAGvCpE,aAFD+D,SAAAC,KAAK,IAAIoB,KAAYC,QAAQ1B,IAE5B3D,KAUT,SAAsBsF,WAAWnC,EAAcnD,sDAC7C,IAAKmD,EACG,MAAIxB,MAAM,gCAWX3B,OARAA,QAAMuD,qBAAqBvD,GAE9BsD,mBACIiC,cAAcpC,EAAMnD,SAEpBwF,cAAcrC,EAAMnD,GAGrBA,KAGT,SAAeuF,cAAcpC,EAAcnD,sDAEnCyF,MAAAA,EAActC,EAAKe,QAAQ,KAAM,MAAMA,QAAQ,WAAY,IAC3DwB,EAAc1F,EAAKkE,QAAQ,KAAM,MAAMA,QAAQ,WAAY,IAC3DyB,QAAiBnF,KAAG4D,MAAM,QAAQ,GAIxC,GAAIuB,EAAU,CAEZ,MAOMhC,EAAO,CACX,UACA,aACA,kBACA,mBACA,eACA,WAbkB,8GAGlB,8DAA8D8B,QAAkBC,eAChF,8NAA8ND,wBAAkCC,qCAChQtF,KAAK,MAYFO,OAAAA,MAAM,uBAAuBgF,SAC5B5B,SAAAC,KAAK,IAAI2B,KAAahC,OACvB,CACL,MAOMA,EAAO,CACX,UACA,OACA,aACA,kBACA,mBACA,eACA,WAdwB,iHAGxB,mIAAmI8B,wBAAkCC,cACrK,8DAA8DD,QAAkBC,gBAChFtF,KAAK,MAaD+D,QAAuB3D,KAAG4D,MAAM,cAAc,GAC/CzD,OAAAA,MAAM,6BAA6BwD,SAElCJ,SAAAC,KAAK,IAAIG,KAAmBR,OAItC,SAAe6B,cAAcrC,EAAcnD,sDACzC,MAAM4F,QAAkBpF,KAAG4D,MAAM,SAAS,GACpCT,EAAO,CAACR,GACTlB,OAAK2B,WACRD,EAAKkC,QAAQ,MAEflC,EAAKkC,QAAQ,YACP9B,SAAAC,KAAK,IAAI4B,KAAcjC,EAAM,CAACF,IAAKzD,OAW3C,SAAsB8F,SACpBC,EACAC,EACAC,EACAC,sDAOA,GALAD,EAAUE,SAAOC,MAAMH,IAAYA,EAC5BC,EAAAA,GAAQG,KAAGH,OAClBjE,OAAKtB,MAAM,gBAAgBqF,KAAQC,KAAWC,KAEzCvF,OAAAA,MAAM,eAAeoF,IACrBtE,KAAG6E,SAASP,GAAWQ,cACpB,MAAI5E,MAAM,gCAIlB,MAAM6E,QAAyBC,gBAAgBT,EAAMC,EAASC,GAG9D,IAAA,MAAWQ,KAAYjF,KAAGkF,YAAYZ,GAAY,CAChD,MAAMa,EAAIzG,OAAKC,KAAK2F,EAAWW,SACzBlG,KAAGqG,GAAGD,EAAGJ,EAAU,CAACM,WAAW,IAMhCN,OAFWR,kBAAAA,EAAMC,EAASC,GAE1BM,KAaT,SAAsBO,UACpBC,EACAC,EACAjB,EACAC,EACAC,sDAOA,GALAD,EAAUE,SAAOC,MAAMH,IAAYA,EAC5BC,EAAAA,GAAQG,KAAGH,OAClBjE,OAAKtB,MAAM,gBAAgBqF,KAAQC,KAAWC,KAEzCvF,OAAAA,MAAM,gBAAgBqG,IACtBvF,KAAG6E,SAASU,GAAYE,SACrB,MAAIvF,MAAM,4BAIlB,MAAMwF,QAA2BV,gBAAgBT,EAAMC,EAASC,GAI1DM,EAAmBrG,OAAKC,KAAK+G,EAAYF,GAOxCE,OANFxG,OAAAA,MAAM,oBAAoB6F,SACzBhG,KAAGqG,GAAGG,EAAYR,GAGNR,kBAAAA,EAAMC,EAASC,GAE1BiB,KAUT,SAAgBC,KACdC,EACAC,EACApB,GAEA,IAAKmB,EACG,MAAI1F,MAAM,kCAGlB,IAAK2F,EACG,MAAI3F,MAAM,qCAGXuE,EAAAA,GAAQG,KAAGH,OAGbqB,kBAAkBD,KAGPE,EADAC,iBADkBC,gBAAgBL,EAAUnB,GACZoB,IAKhD,IAAIK,EAAW,GACf,GAAIL,EAAa,CACDnB,EAAAA,SAAOC,MAAMkB,IAAgB,GAC3C,MAAMM,EAAYzH,OAAKC,KACrByH,qBACAR,EACAC,EACApB,GAEGvF,OAAAA,MAAM,mBAAmBiH,GAC1BnG,KAAGC,WAAWkG,IAAcnG,KAAGC,WAAckG,EAAH,cAC5C3F,OAAKtB,MAAM,uBAAuB0G,KAAYC,KAAepB,KAClD0B,EAAAA,GAEX3F,OAAKtB,MAAM,aAGRgH,OAAAA,CACT,CAQA,SAAgBD,gBAAgBL,EAAkBnB,GAChD,MAAM4B,EAAqB,GAEpB5B,EAAAA,GAAQG,KAAGH,OAClB,MAAMyB,EAAWxH,OAAKC,KAAKyH,qBAAsBR,GAE7C5F,GAAAA,KAAGC,WAAWiG,GAAW,CACrBI,MAAAA,EAAqBtG,KAAGkF,YAAYgB,GAC1C,IAAA,MAAWK,KAASD,EACdR,GAAAA,kBAAkBS,GAAQ,CAC5B,MAAMC,EAAW9H,OAAKC,KAAKuH,EAAUK,EAAO9B,GAAQ,IAChDzE,KAAGC,WAAWuG,IAAaxG,KAAGC,WAAcuG,EAAH,cAC3CH,EAASxI,KAAK0I,IAMfF,OAAAA,CACT,CA0BA,SAAsBI,oBACpBC,EACAC,EACAnI,EACAoI,EAAS,6DAET,IAAIC,EAA2B,GAC/B,MAAMC,EAAU,gCAAgCJ,KAASC,eAAkBC,IAErEzG,EAAyB,IAAIC,MAAMC,WAAW,cAC9C5B,EAAoB,CAAA,EACtBD,IACFgC,OAAKtB,MAAM,YACXT,EAAQiC,cAAgBlC,GAG1B,MAAMmC,QAAiBR,EAAK4G,QAAoBD,EAASrI,GACrD,IAACkC,EAASqG,OACLH,OAAAA,EAGT,IAAII,EAAc,GACPC,IAAAA,MAAAA,KAAQvG,EAASqG,OAAOG,KAC7BD,GAAc,2BAAdA,EAAKxI,KAAmC,CAC1CuI,EAAcC,EAAK5I,IACnB,MAIJG,EAAgB,OAAI,qCAChB2I,IAAAA,cAA2BjH,EAAKS,IAAIqG,EAAaxI,IAAU4I,WAE/D,GAAID,EAAa,CAEDA,EAAAA,EAAY3E,QAAQ,UAAW,IACzC,IACS6E,EAAAA,KAAKC,MAAMH,EACvB,OAACI,GACAhH,OAAKtB,MAAM,iBAIR2H,OAAAA,KAGT,SAAsBY,iBACpB5B,EACA6B,EACAC,EACAC,EAAqBhD,KAAGH,2DAUjBsB,aAP0C8B,GAAGC,WAClDjC,EACA6B,EACAC,EACAC,MAMJ,SAAe9F,qBAAqBvD,sDAM3BA,OALFA,IAEHA,EAAOG,OAAKC,KAAKC,oBAAqBC,KAAAC,kBAElCC,KAAGC,OAAOT,GACTA,KAGT,SAAeyG,gBACbT,EACAC,EACAC,sDAEA,MAAMsD,EAAarJ,OAAKC,KACtByH,qBACA7B,EACAG,SAAOC,MAAMH,IAAYA,EACzBC,GAAQ,IAELvF,OAAAA,MAAM,eAAe6I,GACpBC,MAAAA,EAAgBD,EAAH,YAIZA,aAHDhJ,KAAGyC,KAAKuG,SACRhJ,KAAGyC,KAAKwG,SACRjJ,KAAGC,OAAO+I,GACTA,KAGT,SAASE,kBAAkB1D,EAAcC,EAAiBC,GACxD,MAAMsD,EAAarJ,OAAKC,KACtByH,qBACA7B,EACAG,SAAOC,MAAMH,IAAYA,EACzBC,GAAQ,IAGPyD,KAAAA,cADmBH,EAAH,YACU,IAC7BvH,OAAKtB,MAAM,wBACb,CAOA,SAAgB4G,kBAAkBD,GAChC,MAAMsC,EAAIzD,SAAOC,MAAMkB,IAAgB,GAClC3G,OAAAA,MAAM,eAAeiJ,GAE1B,MAAMC,EAA2B,MAAnB1D,SAAO0D,MAAMD,GAGpBC,OAFFlJ,OAAAA,MAAM,aAAakJ,GAEjBA,CACT,CASA,SAAgBpC,iBACdK,EACAR,GAEA,IAAIrB,EAAU,GACdhE,OAAKtB,MAAM,cAAcmH,EAASgC,mBAOlC,IAAA,IAASC,GANTjC,EAAWA,EAASkC,MAAK,CAACC,EAAGC,IACvB/D,SAAOgE,GAAGF,EAAGC,GACR,GAEF,KAEaJ,OAAS,EAAGC,GAAK,EAAGA,IAAK,CACvCK,MAAAA,EAAoBtC,EAASiC,GAEnC,GAD2B5D,SAAOkE,UAAUD,EAAW9C,GACxC,CACbrB,EAAUmE,EACV,OAUGnE,OALAtF,OAAAA,MADHsF,EACS,YAAYA,EAEZ,mBAGNA,CACT,CAKA,SAAS4B,qBACP,MAAMyC,EAAiB1L,QAAQC,IAAuB,mBAAK,GAEpDyL,OADPjH,WAAAA,GAAGiH,EAAgB,4CACZA,CACT,CAKA,SAASjK,oBACP,MAAMkK,EAAgB3L,QAAQC,IAAiB,aAAK,GAE7C0L,OADPlH,WAAAA,GAAGkH,EAAe,sCACXA,CACT,CAKA,SAAS1J,WAAc2J,EAAaC,GAE5BC,MAAAA,EAASC,wBAAeH,GAEvBE,YAAUxI,IAAVwI,EAAsBA,EAAQD,CACvC,CAMA,SAASpF,QAAWuF,GAClB,OAAO7F,MAAM8F,KAAK,IAAIC,IAAIF,GAC5B,CClwBA,SAAgBG,WAAWC,GACzB,MAAMvC,EAAsB,CAC1BwC,qBAAqB,EACrBC,qBAAqB,EACrBC,yBAAyB,GAoBpB1C,OAjBHuC,IACsC,kBAA7BA,EAAKC,sBACdxC,EAAOwC,oBAAsBD,EAAKC,oBAClChJ,OAAKtB,MAAM,wBAAwB8H,EAAOwC,yBAGJ,kBAA7BD,EAAKE,sBACdzC,EAAOyC,oBAAsBF,EAAKE,oBAClCjJ,OAAKtB,MAAM,wBAAwB8H,EAAOyC,yBAGA,kBAAjCF,EAAKG,0BACd1C,EAAO0C,wBAA0BH,EAAKG,wBACtClJ,OAAKtB,MAAM,4BAA4B8H,EAAO0C,8BAI3C1C,CACT,CCTA,SAAgB/H,UAAQ0K,GAKtB,GAHAA,EAAIC,0BAA0BD,GAG1B9H,cAAc,0BAA0BgI,KAAKF,GACxCA,OAAAA,EAIL3C,IAAAA,EAAStI,OAAKO,QAAQ0K,GAOnB3C,OAJHnF,cAAc,yBAAyBgI,KAAK7C,KAC9CA,EAAS4C,0BAA0B5C,IAG9BA,CACT,CAMA,SAAgB8C,mBAAmBC,EAAcC,GAK3CC,GAJJnL,WAAAA,QAAOiL,EAAM,yDACbjL,WAAAA,QAAOkL,EAAU,6DAGbC,gBAAgBD,GACXA,OAAAA,EAIT,GAAInI,aAAY,CAEVmI,GAAAA,EAASjE,MAAM,2BAA4B,CACzC/D,IAAAA,EAAM7E,QAAQ6E,MAOdgI,OANJE,WAAApL,QACEkD,EAAI+D,MAAM,cACV,4EAA4E/D,MAI1EgI,EAAS,GAAGpM,gBAAkBoE,EAAI,GAAGpE,cAEf,IAApBoM,EAAS3B,OAEJ,GAAG2B,EAAS,QAAQhI,EAAImI,OAAO,MAIjCnI,EAAIoI,SAAS,QACTpI,GAAA,MAGF,GAAGgI,EAAS,QAAQhI,EAAImI,OAAO,KAAKH,EAASG,OAAO,MAKtD,GAAGH,EAAS,QAAQA,EAASG,OAAO,QAItCE,oBAAoBL,GAAUjE,MAAM,iBAAkB,CACvD/D,MAAAA,EAAM7E,QAAQ6E,MAMb,OALPkI,WAAApL,QACEkD,EAAI+D,MAAM,cACV,4EAA4E/D,MAGvE,GAAGA,EAAI,QAAQgI,EAASG,OAAO,MAiB1C,OAbAD,WAAApL,QACEmL,gBAAgBF,GAChB,kEAIEA,EAAKK,SAAS,MAASvI,cAAckI,EAAKK,SAAS,QAIrDL,GAAQrL,OAAK4L,KAGRP,EAAOC,CAChB,CAMA,SAAgBC,gBAAgBD,GAO9B,OANAlL,WAAAA,QAAOkL,EAAU,0DAGjBA,EAAWK,oBAAoBL,GAG3BnI,aAEKmI,EAASO,WAAW,SAAW,aAAaV,KAAKG,GAInDA,EAASO,WAAW,IAC7B,CAMA,SAAgBC,QAAQR,GAOtB,OANAlL,WAAAA,QAAOkL,EAAU,mDAGjBA,EAAWK,oBAAoBL,GAG3BnI,aAGKmI,EAASO,WAAW,OAAS,WAAWV,KAAKG,GAI/CA,EAASO,WAAW,IAC7B,CAKA,SAAgBF,oBAAoBV,GAIlC,OAHAA,EAAIA,GAAK,GAGL9H,cAEE8H,EAAAA,EAAElH,QAAQ,MAAO,OAGP,cAAcoH,KAAKF,GACjB,KAAO,IAAMA,EAAElH,QAAQ,SAAU,OAI5CkH,EAAElH,QAAQ,SAAU,IAC7B,CAMA,SAAgBmH,0BAA0BD,GAExC,OAAKA,GAKLA,EAAIU,oBAAoBV,IAGjBS,SAAS1L,OAAK4L,KAKjBX,IAAMjL,OAAK4L,KAKXzI,cAAc,cAAcgI,KAAKF,GAJ5BA,EASFA,EAAEQ,OAAO,EAAGR,EAAEtB,OAAS,GAdrBsB,EARA,EAuBX,CCnMA,SAAgBc,eAAeC,GAE7BA,EAAWA,EAASvM,QAAYF,IAACA,EAAE0M,SAGnC,MAAMC,EAAyC,CAAA,EAC/C,IAAA,MAAWC,KAAWH,EAIpBE,EAHY/I,aACRgJ,EAAQC,WAAWlN,cACnBiN,EAAQC,YACS,YAGvB,MAAM9D,EAAmB,GAEzB,IAAA,MAAW6D,KAAWH,EAAU,CAE9B,MAAM3B,EAAMlH,aACRgJ,EAAQC,WAAWlN,cACnBiN,EAAQC,WACRF,GAAuB,aAAvBA,EAAc7B,GAChB,SAIF,IAAIgC,GAAgB,EAChBC,EAAUjC,EACVkC,EAASC,aAAWjM,QAAQ+L,GAChC,KAAOC,IAAWD,GAAS,CACrBJ,GAAAA,EAAcK,GAAS,CACTF,GAAA,EAChB,MAGQE,EAAAA,EACDC,EAAAA,aAAWjM,QAAQ+L,GAIzBD,IACIlN,EAAAA,KAAKgN,EAAQC,YACpBF,EAAc7B,GAAO,YAIlB/B,OAAAA,CACT,CAKA,SAAgBjB,MAAM2E,EAAqBV,GACrChD,IAAAA,EAAoBmE,wBAAAC,UAAUC,KAElC,IAAA,MAAWR,KAAWH,EAChBG,EAAQF,OACA3D,IAAC6D,EAAQ9E,MAAMiE,GAEfa,GAAAA,EAAQ9E,MAAMiE,GAIrBhD,OAAAA,CACT,CAKA,SAAgBsE,aAAaZ,EAAqBV,GACzCU,OAAAA,EAAStM,MAAUH,IAACA,EAAE0M,QAAU1M,EAAEqN,aAAatB,IACxD,CC9EA,SAASuB,WAAS/C,EAAGC,EAAG+C,GAClBhD,aAAaiD,SAAYC,EAAAA,WAAWlD,EAAGgD,IACvC/C,aAAagD,SAAYC,EAAAA,WAAWjD,EAAG+C,IAE3C,IAAIG,EAAIC,QAAMpD,EAAGC,EAAG+C,GAEpB,OAAOG,GAAK,CACVE,MAAOF,EAAE,GACTG,IAAKH,EAAE,GACPI,IAAKP,EAAIQ,MAAM,EAAGL,EAAE,IACpBM,KAAMT,EAAIQ,MAAML,EAAE,GAAKnD,EAAEH,OAAQsD,EAAE,IACnCO,KAAMV,EAAIQ,MAAML,EAAE,GAAKlD,EAAEJ,QAE7B,CAEA,SAASqD,WAAWS,EAAKX,GACnBY,IAAAA,EAAIZ,EAAIzF,MAAMoG,GACXC,OAAAA,EAAIA,EAAE,GAAK,IACpB,CAGA,SAASR,QAAMpD,EAAGC,EAAG+C,GACfa,IAAAA,EAAMC,EAAKC,EAAMC,EAAOxF,EACxByF,EAAKjB,EAAIkB,QAAQlE,GACjBmE,EAAKnB,EAAIkB,QAAQjE,EAAGgE,EAAK,GACzBnE,EAAImE,EAEJA,GAAAA,GAAM,GAAKE,EAAK,EAAG,CACrB,GAAGnE,IAAIC,EACE,MAAA,CAACgE,EAAIE,GAKPrE,IAHP+D,EAAO,GACPE,EAAOf,EAAInD,OAEJC,GAAK,IAAMtB,GACZsB,GAAKmE,GACPJ,EAAKxO,KAAKyK,GACVmE,EAAKjB,EAAIkB,QAAQlE,EAAGF,EAAI,IACA,GAAf+D,EAAKhE,OACdrB,EAAS,CAAEqF,EAAKO,MAAOD,IAGbJ,GADVD,EAAMD,EAAKO,SAEFN,EAAAA,EACCK,EAAAA,GAGVA,EAAKnB,EAAIkB,QAAQjE,EAAGH,EAAI,IAG1BA,EAASqE,EAALF,GAAWA,GAAM,EAAIA,EAAKE,EAG5BN,EAAKhE,SACErB,EAAA,CAAEuF,EAAMC,GAErB,CAEOxF,OAAAA,CACT,CClDA,SAAS6F,QAAQrB,GACRsB,OAAAA,SAAStB,EAAK,KAAOA,EACxBsB,SAAStB,EAAK,IACdA,EAAIuB,WAAW,EACrB,CAEA,SAASC,aAAaxB,GACpB,OAAOA,EAAIzN,MAAM,QAAQY,KAAKsO,UACnBlP,MAAM,OAAOY,KAAKuO,SAClBnP,MAAM,OAAOY,KAAKwO,UAClBpP,MAAM,OAAOY,KAAKyO,UAClBrP,MAAM,OAAOY,KAAK0O,UAC/B,CAEA,SAASC,eAAe9B,GACtB,OAAOA,EAAIzN,MAAMkP,UAAUtO,KAAK,MACrBZ,MAAMmP,SAASvO,KAAK,KACpBZ,MAAMoP,UAAUxO,KAAK,KACrBZ,MAAMqP,UAAUzO,KAAK,KACrBZ,MAAMsP,WAAW1O,KAAK,IACnC,CAMA,SAAS4O,gBAAgB/B,GACvB,IAAKA,EACI,MAAA,CAAC,IAEV,IAAIgC,EAAQ,GACRpB,EAAIb,SAAS,IAAK,IAAKC,GAE3B,IAAKY,EACIZ,OAAAA,EAAIzN,MAAM,KAEnB,IACIkO,EAAOG,EAAEH,KACTC,EAAOE,EAAEF,KACTvC,EAHMyC,EAAEL,IAGAhO,MAAM,KAElB4L,EAAEA,EAAEtB,OAAO,IAAM,IAAM4D,EAAO,IAC1BwB,IAAAA,EAAYF,gBAAgBrB,GAQzBsB,OAPHtB,EAAK7D,SACPsB,EAAEA,EAAEtB,OAAO,IAAMoF,EAAUC,QACzB7P,EAAAA,KAAK8P,MAAMhE,EAAG8D,IAGZ5P,EAAAA,KAAK8P,MAAMH,EAAO7D,GAEjB6D,CACT,CAEA,SAASI,UAAUpC,GACb,OAACA,GASoB,OAArBA,EAAIrB,OAAO,EAAG,KACVqB,EAAA,SAAWA,EAAIrB,OAAO,IAGvB0D,SAAOb,aAAaxB,IAAM,GAAMxN,IAAIsP,iBAZlC,EAaX,CAMA,SAASQ,QAAQtC,GACf,MAAO,IAAMA,EAAM,GACrB,CACA,SAASuC,SAASC,GACT,MAAA,SAASnE,KAAKmE,EACvB,CAEA,SAASC,IAAI3F,EAAG4F,GACd,OAAYA,GAAL5F,CACT,CACA,SAAS6F,IAAI7F,EAAG4F,GACd,OAAO5F,GAAK4F,CACd,CAEA,SAASL,SAAOrC,EAAK4C,GACnB,IAAIC,EAAa,GAEbjC,EAAIb,SAAS,IAAK,IAAKC,GACvB,IAACY,GAAK,MAAMvC,KAAKuC,EAAEL,KAAa,MAAA,CAACP,GAErC,IAaI8C,EAbAC,EAAoB,iCAAiC1E,KAAKuC,EAAEH,MAC5DuC,EAAkB,uCAAuC3E,KAAKuC,EAAEH,MAChEwC,EAAaF,GAAqBC,EAClCE,EAAYtC,EAAEH,KAAKS,QAAQ,MAAQ,EACnC,IAAC+B,IAAeC,EAElB,OAAItC,EAAEF,KAAKnG,MAAM,SAER8H,SADPrC,EAAMY,EAAEL,IAAM,IAAMK,EAAEH,KAAOkB,SAAWf,EAAEF,MAGrC,CAACV,GAIV,GAAIiD,EACErC,EAAAA,EAAEH,KAAKlO,MAAM,aAGbuQ,GAAa,KADbf,EAAAA,gBAAgBnB,EAAEH,OAChB5D,QAGa,KADjBiG,EAAIT,SAAOS,EAAE,IAAI,GAAOtQ,IAAI8P,UACtBzF,OAIG6D,OAHHA,EAAOE,EAAEF,KAAK7D,OACdwF,SAAOzB,EAAEF,MAAM,GACf,CAAC,KACOlO,KAAI,SAAS2L,GACvB,OAAOyC,EAAEL,IAAMuC,EAAE,GAAK3E,CACxB,IASN,IAKIgF,EALA5C,EAAMK,EAAEL,IACRG,EAAOE,EAAEF,KAAK7D,OACdwF,SAAOzB,EAAEF,MAAM,GACf,CAAC,IAIL,GAAIuC,EAAY,CACd,IAAIxQ,EAAI4O,QAAQyB,EAAE,IACdJ,EAAIrB,QAAQyB,EAAE,IACdM,EAAQC,KAAKC,IAAIR,EAAE,GAAGjG,OAAQiG,EAAE,GAAGjG,QACnC0G,EAAmB,GAAZT,EAAEjG,OACTwG,KAAKG,IAAInC,QAAQyB,EAAE,KACnB,EACAzE,EAAOoE,IACOhQ,EAAJiQ,IAEJa,IAAA,EACDZ,EAAAA,KAELc,IAAAA,EAAMX,EAAElQ,KAAK2P,UAEjBY,EAAI,GAEJ,IAAA,IAASrG,EAAIrK,EAAG4L,EAAKvB,EAAG4F,GAAI5F,GAAKyG,EAAM,CACjC5G,IAAAA,EACJ,GAAIqG,EAEQ,QADNU,EAAAA,OAAOC,aAAa7G,MAElBH,EAAA,SAGN,GADAA,EAAWG,EAAP4G,GACAD,EAAK,CACHG,IAAAA,EAAOR,EAAQzG,EAAEE,OACrB,GAAI+G,EAAO,EAAG,CACZ,IAAIC,EAAQ/L,MAAM8L,EAAO,GAAGzQ,KAAK,KAE/BwJ,EADM,EAAJG,EACE,IAAM+G,EAAIlH,EAAE6D,MAAM,GAElBqD,EAAIlH,CACZ,CACF,CAEFwG,EAAE9Q,KAAKsK,EACT,CACF,MACMmH,EAAAA,UAAUhB,GAAG,SAASN,GAAaH,OAAAA,SAAOG,GAAI,EAAO,IAG3D,IAAA,IAASuB,EAAI,EAAOZ,EAAEtG,OAANkH,EAAcA,IAC5B,IAAA,IAASC,EAAI,EAAOtD,EAAK7D,OAATmH,EAAiBA,IAAK,CACpC,IAAIC,EAAY1D,EAAM4C,EAAEY,GAAKrD,EAAKsD,KAC7BpB,GAASK,GAAcgB,IAC1BpB,EAAWxQ,KAAK4R,EACpB,CAGKpB,OAAAA,CACT,CChKA,SAASqB,QAASvK,GAChB,OAAOA,EAAEpH,MAAM,IAAI4R,QAAO,SAAUC,EAAKzH,GAEhCyH,OADPA,EAAIzH,IAAK,EACFyH,CACR,GAAE,CAAE,EACP,CAMA,SAASzR,OAAQ0M,EAASzI,GAEjB,OADPA,EAAUA,GAAW,GACd,SAAUuH,EAAGrB,EAAGuH,GACdC,OAAAA,UAAUnG,EAAGkB,EAASzI,GAEjC,CAEA,SAAS2N,IAAKvH,EAAGC,GACfA,EAAIA,GAAK,GACT,IAAIuH,EAAI,CAAA,EAODA,OANPC,OAAOC,KAAK1H,GAAG2H,SAAQ,SAAUX,GAC7BA,EAAAA,GAAKhH,EAAEgH,EACX,IACAS,OAAOC,KAAKzH,GAAG0H,SAAQ,SAAUX,GAC7BA,EAAAA,GAAK/G,EAAE+G,EACX,IACOQ,CACT,CA+CA,SAASF,UAAWnG,EAAGkB,EAASzI,GAM9B,OALAgO,mBAAmBvF,GAEdzI,IAASA,EAAU,OAGnBA,EAAQiO,WAAmC,MAAtBxF,EAAQyF,OAAO,KAIlC,IAAIC,UAAU1F,EAASzI,GAAS2D,MAAM4D,EAC/C,CAEA,SAAS4G,UAAW1F,EAASzI,GACvB,KAAEzC,gBAAgB4Q,WACb,OAAA,IAAIA,UAAU1F,EAASzI,GAGhCgO,mBAAmBvF,GAEdzI,IAASA,EAAU,IAExByI,EAAUA,EAAQ3M,OAGbkE,EAAQoO,oBAAmC,MAAb9R,OAAK4L,MACtCO,EAAUA,EAAQ9M,MAAMW,OAAK4L,KAAK3L,KAAK,MAGzCgB,KAAKyC,QAAUA,EACfzC,KAAKiQ,IAAM,GACXjQ,KAAKkL,QAAUA,EACflL,KAAK8Q,OAAS,KACd9Q,KAAKgL,QAAS,EACdhL,KAAK+Q,SAAU,EACf/Q,KAAKgR,OAAQ,EACRC,KAAAA,UAAYxO,EAAQwO,QAGzBjR,KAAKkR,MACP,CAKA,SAASA,OACP,IAAIhG,EAAUlL,KAAKkL,QACfzI,EAAUzC,KAAKyC,QAGnB,GAAKA,EAAQiO,WAAmC,MAAtBxF,EAAQyF,OAAO,GAIzC,GAAKzF,EAAL,CAMAlL,KAAKmR,cAGL,IAAIlB,EAAMjQ,KAAKoR,QAAUpR,KAAKqR,cAE1B5O,EAAQlD,QAAYA,KAAAA,MAAQ,WAA2B+R,QAAAA,MAAMtD,MAAMuD,QAASC,aAE3EjS,KAAAA,MAAMS,KAAKkL,QAAS+E,GAOzBA,EAAMjQ,KAAKyR,UAAYxB,EAAI5R,KAAI,SAAUmH,GAChCA,OAAAA,EAAEpH,MAAMsT,WACjB,IAEKnS,KAAAA,MAAMS,KAAKkL,QAAS+E,GAGzBA,EAAMA,EAAI5R,KAAI,SAAUmH,EAAGmM,EAAI1B,GAC7B,OAAOzK,EAAEnH,IAAI2B,KAAK4H,MAAO5H,KAC1B,GAAEA,MAEET,KAAAA,MAAMS,KAAKkL,QAAS+E,GAGnBA,EAAAA,EAAIzR,QAAO,SAAUgH,GAClBA,OAAqB,IAArBA,EAAEuH,SAAQ,EACnB,IAEKxN,KAAAA,MAAMS,KAAKkL,QAAS+E,GAEzBjQ,KAAKiQ,IAAMA,CArCX,MAFEjQ,KAAKgR,OAAQ,OAJbhR,KAAK+Q,SAAU,CA4CnB,CAGA,SAASI,cACP,IAAIjG,EAAUlL,KAAKkL,QACfF,GAAS,EAET4G,EAAe,EAEnB,IAHc5R,KAAKyC,QAGPoP,SAAZ,CAEA,IAAA,IAASlJ,EAAI,EAAGmJ,EAAI5G,EAAQxC,OACpBoJ,EAAJnJ,GAA+B,MAAtBuC,EAAQyF,OAAOhI,GACxBA,IACFqC,GAAUA,EACV4G,IAGEA,IAAc5R,KAAKkL,QAAUA,EAAQV,OAAOoH,IAChD5R,KAAKgL,OAASA,CAVQ,CAWxB,CAkBA,SAASqG,YAAanG,EAASzI,GAgB7B,OAfKA,IAEDA,EADEzC,gBAAgB4Q,UACR5Q,KAAKyC,QAEL,CAAA,GAOdgO,mBAHAvF,OAA6B,IAAZA,EACblL,KAAKkL,QAAUA,GAMfzI,EAAQsP,UAAY,mBAAmB7H,KAAKgB,GAEvC,CAACA,GAGHgD,OAAOhD,EAChB,CA0BA,SAAStD,QAAOsD,EAAS8G,GAgCvB,SAASC,IACP,GAAIC,EAAW,CAGb,OAAQA,GACN,IAAK,IACGC,GAAAA,KACKC,GAAA,EACb,MACA,IAAK,IACGC,GAAAA,MACKD,GAAA,EACb,MACA,QACEE,GAAM,KAAOJ,EAGjBK,EAAKhT,MAAM,uBAAwB2S,EAAWI,GAClCJ,GAAA,CACd,CACF,CAnDAzB,mBAAmBvF,GAEnB,IAAIzI,EAAUzC,KAAKyC,QAGnB,GAAgB,OAAZyI,EAAkB,CAChB,IAACzI,EAAQ+P,WACJC,OAAAA,SAEGvH,EAAA,GACd,CACIA,GAAY,KAAZA,EAAuB,MAAA,GA0C3B,IAxCA,IAMIgH,EAkCkC1J,EAxClC8J,EAAK,GACLF,IAAa3P,EAAQiQ,OACrBC,GAAW,EAEXC,EAAmB,GACnBC,EAAgB,GAEhBC,GAAU,EACVC,GAAe,EACfC,GAAa,EAGbC,EAAqC,MAAtB/H,EAAQyF,OAAO,GAAa,GAE7ClO,EAAQyQ,IAAM,iCACd,UACEX,EAAOvS,KAwBF2I,EAAI,EAAGwK,EAAMjI,EAAQxC,OACrByK,EAAJxK,IAAaH,EAAI0C,EAAQyF,OAAOhI,IACjCA,IAIEgK,GAHJ3S,KAAKT,MAAM,eAAgB2L,EAASvC,EAAG2J,EAAI9J,GAGvCmK,GAAYS,WAAW5K,GACzB8J,GAAM,KAAO9J,EACFmK,GAAA,OAIb,OAAQnK,GAEN,IAAK,IAGI,OAAA,EAGT,IAAK,SAEQmK,GAAA,EACb,SAIA,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAKH,GAJA3S,KAAKT,MAAM,6BAA8B2L,EAASvC,EAAG2J,EAAI9J,GAIrDsK,EAAS,CACX9S,KAAKT,MAAM,cACD,MAANiJ,GAAaG,IAAMqK,EAAa,IAAOxK,EAAA,KACrCA,GAAAA,EACN,QACF,CAKA+J,EAAKhT,MAAM,yBAA0B2S,OAEzB1J,EAAAA,EAIR/F,EAAQ4Q,WACd,SAEA,IAAK,IACH,GAAIP,EAAS,CACLR,GAAA,IACN,QACF,CAEA,IAAKJ,EAAW,CACRI,GAAA,MACN,QACF,CAEAM,EAAiB1U,KAAK,CACpBoV,KAAMpB,EACNhG,MAAOvD,EAAI,EACX4K,QAASjB,EAAG5J,OACZ8K,KAAMC,QAAQvB,GAAWsB,KACzBE,MAAOD,QAAQvB,GAAWwB,QAIvBnU,KAAAA,MAAM,eAAgB2S,EADrBA,GAAc,MAAdA,EAAoB,YAAc,OAE5BA,GAAA,EACd,SAEA,IAAK,IACCY,GAAAA,IAAYF,EAAiBlK,OAAQ,CACjC4J,GAAA,MACN,QACF,KAGWF,GAAA,EACPuB,IAAAA,EAAKf,EAAiB3F,MAG1BqF,GAAMqB,EAAGD,MACO,MAAZC,EAAGL,MACLT,EAAc3U,KAAKyV,GAErBA,EAAGC,MAAQtB,EAAG5J,OAChB,SAEA,IAAK,IACH,GAAIoK,IAAYF,EAAiBlK,QAAUiK,EAAU,CAC7CL,GAAA,MACKK,GAAA,EACX,QACF,KAGML,GAAA,IACR,SAGA,IAAK,IAIH,OAAIQ,EAAS,CACXR,GAAM,KAAO9J,EACb,QACF,CAEUsK,GAAA,EACGnK,EAAAA,EACboK,EAAeT,EAAG5J,OACZF,GAAAA,EACR,SAEA,IAAK,IAKH,GAAIG,IAAMqK,EAAa,IAAMF,EAAS,CACpCR,GAAM,KAAO9J,EACFmK,GAAA,EACX,QACF,CAWA,IAAIkB,EAAK3I,EAAQ4I,UAAUd,EAAa,EAAGrK,GACvC,IACKmD,OAAA,IAAM+H,EAAK,IACnB,OAAQE,GAEP,IAAIC,EAAKhU,KAAK4H,MAAMiM,EAAII,UACnB3B,EAAAA,EAAG9H,OAAO,EAAGuI,GAAgB,MAAQiB,EAAG,GAAK,MACvC5B,EAAAA,GAAY4B,EAAG,GAChBlB,GAAA,EACV,QACF,CAGWV,GAAA,EACDU,GAAA,EACJtK,GAAAA,EACR,SAEA,YAIMmK,EAESA,GAAA,GACFS,WAAW5K,IACT,MAANA,GAAasK,IACZR,GAAA,MAGF9J,GAAAA,EAwBPmL,IAjBDb,IAKG5H,EAAAA,EAAQV,OAAOwI,EAAa,GAC5BgB,EAAAhU,KAAK4H,MAAMiM,EAAII,UACpB3B,EAAKA,EAAG9H,OAAO,EAAGuI,GAAgB,MAAQiB,EAAG,GAClC5B,EAAAA,GAAY4B,EAAG,IASvBL,EAAKf,EAAiB3F,MAAO0G,EAAIA,EAAKf,EAAiB3F,MAAO,CACjE,IAAIiH,EAAO5B,EAAGjG,MAAMsH,EAAGJ,QAAUI,EAAGH,KAAK9K,QACpCnJ,KAAAA,MAAM,eAAgB+S,EAAIqB,GAE/BO,EAAOA,EAAKpR,QAAQ,6BAA6B,SAAUqR,EAAGC,EAAIC,GAYzDD,OAXFC,IAEEA,EAAA,MASAD,EAAKA,EAAKC,EAAK,GACxB,IAEArU,KAAKT,MAAM,iBAAkB2U,EAAMA,EAAMP,EAAIrB,GACzCjC,IAAAA,EAAgB,MAAZsD,EAAGL,KAAenB,KACV,MAAZwB,EAAGL,KAAejB,MAClB,KAAOsB,EAAGL,KAEHlB,GAAA,EACXE,EAAKA,EAAGjG,MAAM,EAAGsH,EAAGJ,SAAWlD,EAAI,MAAQ6D,CAC7C,KAIIvB,IAEIL,GAAA,QAKR,IAAIgC,GAAkB,EACdhC,OAAAA,EAAG3B,OAAO,IAChB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAuB2D,GAAA,EAQlD,IAAA,IAAS3F,EAAIkE,EAAcnK,OAAS,EAAGiG,KAAQA,IAAK,CAC9C4F,IAAAA,EAAK1B,EAAclE,GAEnB6F,EAAWlC,EAAGjG,MAAM,EAAGkI,EAAGhB,SAC1BkB,EAAUnC,EAAGjG,MAAMkI,EAAGhB,QAASgB,EAAGX,MAAQ,GAC1Cc,EAASpC,EAAGjG,MAAMkI,EAAGX,MAAQ,EAAGW,EAAGX,OACnCe,EAAUrC,EAAGjG,MAAMkI,EAAGX,OAEhBe,GAAAA,EAKV,IAAIC,EAAmBJ,EAASpW,MAAM,KAAKsK,OAAS,EAChDmM,EAAaF,EACjB,IAAKhM,EAAI,EAAOiM,EAAJjM,EAAsBA,IACnBkM,EAAAA,EAAW/R,QAAQ,WAAY,IAI9C,IAAIgS,EAAS,GACG,MAHND,EAAAA,IAGY7C,IAAUiC,WACrBa,EAAA,KAGNC,EADOP,EAAWC,EAAUE,EAAUG,EAASJ,CAEtD,CAcA,GATW,KAAPpC,GAAaF,IACfE,EAAK,QAAUA,GAGbgC,IACFhC,EAAKW,EAAeX,GAIlBN,IAAUiC,SACL,MAAA,CAAC3B,EAAIF,GAMd,IAAKA,EACH,OAAO4C,aAAa9J,GAGlBhI,IAAAA,EAAQT,EAAQiQ,OAAS,IAAM,GAC/B,IACF,IAAIuC,EAAanJ,OAAO,IAAMwG,EAAK,IAAKpP,EACzC,OAAQ6Q,GAKA,MAAA,IACT,CAKOkB,OAHPA,EAAOC,MAAQhK,EACf+J,EAAOE,KAAO7C,EAEP2C,CACT,CAOA,SAASG,SACP,GAAIpV,KAAK8Q,SAA0B,IAAhB9Q,KAAK8Q,cAAyB9Q,KAAK8Q,OAQtD,IAAIb,EAAMjQ,KAAKiQ,IAEX,IAACA,EAAIvH,OAEP,OADA1I,KAAK8Q,QAAS,EACP9Q,KAAK8Q,OAEd,IAAIrO,EAAUzC,KAAKyC,QAEf4S,EAAU5S,EAAQ+P,WAAaL,KAC/B1P,EAAQyQ,IAAMoC,WACdC,aACArS,EAAQT,EAAQiQ,OAAS,IAAM,GAE/BJ,EAAKrC,EAAI5R,KAAI,SAAU6M,GAClBA,OAAAA,EAAQ7M,KAAI,SAAU2L,GACnBA,OAAAA,IAAMyI,SAAY4C,EACV,iBAANrL,EAAkBwL,aAAaxL,GACvCA,EAAEmL,IACN,IAAGnW,KAAK,MACV,IAAGA,KAAK,KAIRsT,EAAK,OAASA,EAAK,KAGftS,KAAKgL,SAAasH,EAAA,OAASA,EAAK,QAEhC,IACFtS,KAAK8Q,OAAahF,OAAOwG,EAAIpP,EAC9B,OAAQuS,GACPzV,KAAK8Q,QAAS,CAChB,CACA,OAAO9Q,KAAK8Q,MACd,CAsOA,SAASkE,aAAcxP,GACdA,OAAAA,EAAE1C,QAAQ,SAAU,KAC7B,CAEA,SAAS0S,aAAchQ,GACdA,OAAAA,EAAE1C,QAAQ,2BAA4B,OAC/C,CCv6BA,SAAsB4S,OACpB3K,EACAtI,sDAEA,aAAakT,mBAAAC,eAAeF,OAAO3K,EAAUtI,MCC/C,SAASoT,KAAGpT,EAASqT,EAAKC,GACpBpN,IAAAA,EAAImN,GAAOC,GAAU,EACrBjN,EAAIgN,GAAO,GAGXE,GADJvT,EAAUA,GAAW,IACFuT,MAAQC,QACvBC,OAAgCpV,IAArB2B,EAAQyT,SAAyBzT,EAAQyT,SAAWC,UAK/DH,GAAQ,MAARA,GAA4B,MAAZE,EAAkB,CACpC,IAAIE,EAAYC,MACJ,MAARL,IAEFA,EAAOC,QAAU,CACA,EAAfG,EAAU,GACVA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAGtD,MAAZF,IAEFA,EAAWC,UAAiD,OAApCC,EAAU,IAAM,EAAIA,EAAU,IAE1D,CAMIE,IAAAA,OAA0BxV,IAAlB2B,EAAQ6T,MAAsB7T,EAAQ6T,OAAQ,IAAIC,MAAOC,UAIjEC,OAA0B3V,IAAlB2B,EAAQgU,MAAsBhU,EAAQgU,MAAQC,WAAa,EAGnEC,EAAML,EAAQM,YAAeH,EAAQC,YAAY,IAcrD,GAXS,EAALC,QAA+B7V,IAArB2B,EAAQyT,WACpBA,EAAWA,EAAW,EAAI,QAKlB,EAALS,GAAUL,EAAQM,kBAAiC9V,IAAlB2B,EAAQgU,QACpCA,EAAA,GAINA,GAAS,IACL,MAAIlW,MAAM,mDAGL+V,WAAAA,EACAG,WAAAA,EACDP,UAAAA,EAMZ,IAAIW,GAA4B,KAAb,WAHVP,GAAA,cAG+BG,GAAS,WAC/C9N,EAAAA,KAAOkO,IAAO,GAAK,IACnBlO,EAAAA,KAAOkO,IAAO,GAAK,IACnBlO,EAAAA,KAAOkO,IAAO,EAAI,IAClBlO,EAAAA,KAAY,IAALkO,EAGLC,IAAAA,EAAOR,EAAQ,WAAc,IAAS,UACxC3N,EAAAA,KAAOmO,IAAQ,EAAI,IACnBnO,EAAAA,KAAa,IAANmO,EAGThO,EAAEH,KAAOmO,IAAQ,GAAK,GAAM,GAC1BnO,EAAAA,KAAOmO,IAAQ,GAAK,IAGpBnO,EAAAA,KAAOuN,IAAa,EAAI,IAGxBvN,EAAAA,KAAkB,IAAXuN,EAGT,IAAA,IAASvH,EAAI,EAAO,EAAJA,IAASA,EACvB7F,EAAEH,EAAIgG,GAAKqH,EAAKrH,GAGXmH,OAAAA,GAAYiB,YAAYjO,EACjC,CC1FA,SAAsBkO,yEACd9U,MAAAA,EAAkC,UAArB1E,QAAQyZ,SAE3B,IAAI9N,EAAwB3L,QAAQC,IAAiB,aAAK,GAE1D,IAAK0L,EAAe,CACd+N,IAAAA,EAGa1Z,EAFb0E,EAEa1E,QAAQC,IAAiB,aAAK,OAEpB,WAArBD,QAAQyZ,SACK,SAEA,QAGnB9N,EAAgBpK,OAAKC,KAAKkY,EAAc,UAAW,QAGrD,MAAMtY,EAAOG,OAAKC,KAAKmK,KAAegO,OAAAC,OAE/BxY,aADDQ,KAAGC,OAAOT,GACTA,KAGT,SAAgByY,0BAA0BC,GACjCjX,OAAAA,KAAG6E,SAASoS,GAAUC,IAC/B,CAEA,SAAsBC,aAAazM,kEACjC,MAAM0M,EAAkB,GAClBC,EAA2C,QAA/BC,EAAAna,QAAQC,IAAsB,wBAACka,IAAAA,EAAAA,EAAIna,QAAQ6E,MACvDuV,QAAgBC,KAAKnC,OAAO3K,EAAS/L,KAAK,MAAO,CACrD8K,qBAAqB,QAGEgO,IAAAA,IAAuBC,EAAvBD,GAAAE,EAAAA,EAAAC,gBAAAL,EAAQM,iBAAeH,QAAAC,EAAAG,SAAAtQ,EAAAkQ,EAAAK,MAAAN,GAAE,EAAA,CAAzBA,GAAA,EAAd,MACHO,EAAetZ,OAClBuZ,SAASZ,EAFWK,EAAAzO,OAGpBxG,QAAYgJ,OAAO,KAAK/M,OAAK4L,IAAO,KAAM,KACxCpL,OAAAA,MAAM,YAAY8Y,GAIrBZ,EAAMvZ,KAFa,KAAjBma,EAES,IAEA,GAAGA,wGAIXZ,OAAAA,KAGT,SAAsBc,WAAWjB,sDAC/B,OAAOhW,OAAKC,UAAUlB,KAAGmY,OAAlBlX,CAA0BgW,MAGnC,SAAemB,WACbC,EACAC,EAA2B,uDAE3B,IAAIxV,EAAgB,GACpBwV,EAAeza,KAAK,aACfqB,OAAAA,MAAM,YAAYmZ,KAAOC,EAAe3Z,KAAK,QAC9C,UACI4D,KAAKA,KAAK,GAAG8V,EAAOC,EAAgB,CACxCvV,kBAAkB,EAClBV,QAAQ,EACRW,UAAW,CACTC,OAASC,GAA0BJ,GAAiBI,KACpDC,OAASD,GAA0BJ,GAAiBI,OAGzD,OAAQrD,GACFX,OAAAA,MAAMW,EAAIgB,SAKViC,OAFPA,EAAgBA,EAAc5E,OAC9BsC,OAAKtB,MAAM4D,GACJA,KAIT,SAAsByV,0EACpB,MAAMzV,QAAsBsV,WAAW,OAAQ,CAAC,YAC1C5T,EAAUE,OAAOC,MAAM7B,GAG7B,OAFK5D,OAAAA,MAAM,iBAAiBsF,GAEN,KAAlB1B,EACK0V,cAAAC,kBAAkBC,KAElBF,cAAAC,kBAAkBE,mBAI7B,SAAgBC,iBAAiBC,GACxBA,OAAAA,IAAsBL,cAAAC,kBAAkBC,KAC3CF,cAAAM,cAAcJ,KACdF,cAAAM,cAAcC,IACpB,CAEA,SAAsBC,4EACpB,OAAIhZ,KAAGC,WAAWuY,cAAAS,qBACTT,cAAAS,2BAEmBb,WAAW,QAClBc,cAAc7V,SAAS,WAAatE,KAAG4D,MAAM,OAAS,MAG7E,SAAgBwW,cAAiBC,EAAcnQ,GAC7C,QAAcxI,IAAVwI,EACI/I,MAAAA,MAAM,YAAYkZ,6BAGnBnQ,OAAAA,CACT,CAEA,SAAgBoQ,SACd,MAIM/b,EAJQ,IAAID,IAChBF,QAAQC,IAAuB,mBAAK,sBAGfE,SAASgc,UAAU1b,cACpC2b,EAA4B,eAAbjc,EACfkc,EACJlc,EAAS8M,SAAS,aAAe9M,EAAS8M,SAAS,kBAE9C,OAACmP,IAAiBC,CAC3B,CC0PM,SAAUC,sBACd,OAAOC,aAAarE,QACtB,CCrYM,SAAUsE,IAAI9Y,KAAqBqB,GACvC/E,mBAAQgG,OAAOyW,MAAM,GAAG3Y,WAAK4Y,OAAOhZ,KAAYqB,KAAQ4X,KAAGA,MAC7D,CCkFA,SAASC,OAAOC,GACEA,cAAAA,EAChBC,kBAAoB,GACpBC,kBAAoB,GACpB,MAAMC,EAAW,MACXC,EAAgBJ,EAAWjc,MAAM,KAAKC,KAAYqc,GAAAA,EAAGnc,OAAOuE,QAAQ0X,EAAU,SACpF,IAAA,MAAWE,KAAMD,EACXC,EAAG9P,WAAW,KACE1M,kBAAAA,KAAS4N,OAAO,IAAI4O,EAAGlQ,OAAO,QAEhD8P,kBAAkBpc,KAAS4N,OAAO,IAAI4O,OAG1C,IAAA,MAAWC,KAAYC,UACZC,EAAAA,QAAUA,QAAQF,EAASG,UAExC,CAEA,SAASD,QAAQC,GACXA,GAAAA,EAAUrQ,SAAS,KACd,OAAA,EAGT,IAAA,MAAWsQ,KAAWR,kBAChBQ,GAAAA,EAAQ7Q,KAAK4Q,GACR,OAAA,EAGX,IAAA,MAAWE,KAAoBV,kBACzBU,GAAAA,EAAiB9Q,KAAK4Q,GACjB,OAAA,EAGJ,OAAA,CACT,CAEA,SAASG,UACP,MAAM5T,EAAS6T,eAAiB,GAEzB7T,OADP+S,OAAO,IACA/S,CACT,CAEA,SAAS8T,eAAeL,GAChBM,MAAAA,EAAwB9K,OAAO+K,QAQrC,YAAkB9Y,GACX6Y,EAAYP,UAGbtY,EAAKmG,OAAS,IAChBnG,EAAK,GAAK,GAAGuY,KAAavY,EAAK,MAErByX,EAAAA,OAAOzX,GACrB,GAhBmD,CACjDsY,QAASA,QAAQC,GACjBQ,gBACAtB,IAAKuB,SAASvB,IACdc,YACAU,gBAeKJ,OAFPR,UAAU1c,KAAKkd,GAERA,CACT,CAEA,SAASE,UACDG,MAAAA,EAAQb,UAAU7N,QAAQ/M,MAChC,OAAIyb,GAAS,IACDC,UAAAA,OAAOD,EAAO,IACjB,EAGX,CAEA,SAASD,OAAuBV,GAC9B,MAAMM,EAAcD,eAAe,GAAGnb,KAAK8a,aAAaA,KAEjDM,OADPA,EAAYpB,IAAMha,KAAKga,IAChBoB,CACT,CC5GM,SAAUO,YAAYC,GAC1B,GAAIA,IAAUC,gBAAgBD,GACtB,MAAIrb,MACR,sBAAsBqb,0BAA8BE,iBAAiB9c,KAAK,QAG9D4c,cAAAA,EAEhB,MAAMtB,EAAoB,GAC1B,IAAA,MAAWyB,KAAUC,kBACfC,aAAaF,IACfzB,EAAkBpc,KAAK6d,EAAOjB,WAIlCvb,SAAM6a,OAAOE,EAAkBtb,KAAK,KACtC,CAiDM,SAAUkd,mBAAmBpB,GAC3BqB,MAAAA,EAAsCC,YAAYZ,OAAOV,GAExD,OADPuB,eAAeD,YAAaD,GACrB,CACL7K,MAAOgL,aAAaH,EAAkB,SACtCI,QAASD,aAAaH,EAAkB,WACxCK,KAAMF,aAAaH,EAAkB,QACrCM,QAASH,aAAaH,EAAkB,WAE5C,CAEA,SAASE,eAAe/Q,EAA2B1E,GAC3CoT,EAAAA,IAAM,IAAIzX,KACPyX,EAAAA,OAAOzX,EAAI,CAEtB,CAEA,SAAS+Z,aAAahR,EAA2BsQ,GAC/C,MAAMG,EAAwBzL,OAAO+K,OAAO/P,EAAOkQ,OAAOI,GAAQ,CAChEA,UAKEK,GAFJI,eAAe/Q,EAAQyQ,GAEnBE,aAAaF,GAAS,CAClBzB,MAAAA,EAAoB/a,SAAM0b,UAChC1b,SAAM6a,OAAOE,EAAoB,IAAMyB,EAAOjB,UAChD,CAIOiB,OAFPC,kBAAkBU,IAAIX,GAEfA,CACT,CAEA,SAASE,aAAaF,GACbY,SAAQC,eAAiBC,SAASd,EAAOH,OAAUiB,SAASD,eACrE,CAEA,SAASf,gBAAgBiB,GAChBhB,OAAAA,iBAAiBpY,SAASoZ,EACnC,CCnJM,SAAUC,uBACdC,EAIAva,GAEM,MAAAwa,mBAAEA,EAAoBC,YAAAA,EAAAA,cAAaC,GAAkB1a,QAAAA,EAAW,GACtE,OAAO,IAAI2a,SAAQ,CAACC,EAASC,KAC3B,SAASC,IACAD,EAAA,IAAIE,aAAWL,QAAAA,EAAiB,8BACzC,CACA,SAASM,IACPP,SAAAA,EAAaQ,oBAAoB,QAASC,EAC5C,CACA,SAASA,IACPV,SAAAA,WAGF,CACA,GAAIC,eAAAA,EAAaU,QACf,OAAOL,IAEL,IACFP,GACQ1e,QAEJ+e,EAAQ/e,EAAC,IAELA,QAEJgf,EAAOhf,EAAC,GAGb,OAAQ4B,GACPod,EAAOpd,EACT,CACAgd,SAAAA,EAAaW,iBAAiB,QAASF,EAAO,GAElD,CChDM,SAAUG,0BAA0BC,EAAa5O,GAQrD,OANMD,EAAAA,KAAK8O,KAAKD,GACV7O,EAAAA,KAAK+O,MAAM9O,GAIFD,KAAK+O,MAAM/O,KAAKgP,UAAY/O,EAAM4O,EAAM,IACvCA,CAClB,CCAM,SAAUI,QAAMC,EAAkB3b,GAClC4b,IAAAA,EACE,MAAEnB,YAAAA,EAAAA,cAAaC,GAA6B,GAClD,OAAOJ,wBACOM,IACFiB,EAAAA,WAAWjB,EAASe,EAAQ,GAEtC,CACEnB,mBAAoBA,IAAMsB,aAAaF,GACvCnB,YAAAA,EACAC,cAAeA,QAAAA,EAAiBqB,wBAGtC,CCrBM,SAAUC,SAASC,GACvB,QACmB,iBAAVA,GACG,OAAVA,GACC/a,MAAMgb,QAAQD,IACbA,aAAiB5S,QACjB4S,aAAiBnI,KAEvB,CCXM,SAAUqI,QAAQC,GAClBJ,QAAAA,SAASI,KACuB,iBAAXA,EAAEpF,MACe,iBAAdoF,EAAE3d,QAIhC,CAQM,SAAU4d,gBAAgBD,GAC1BD,GAAAA,QAAQC,GACV,OAAOA,EAAE3d,QACJ,CACD6d,IAAAA,EACA,IAEcpX,EADC,iBAANkX,GAAkBA,EACblX,KAAKqX,UAAUH,GAERA,EAAPtP,EAEjB,OAAQrP,GACO6e,EAAA,6BAChB,CACA,MAAO,iBAAiBA,CAC1B,CACF,CChBM,SAAUE,aACd,OAAOC,cACT,CCJM,SAAUC,mBAAmB7V,EAAe4Q,GACzCkF,OAAAA,OAAO3V,KAAKH,EAAO4Q,EAC5B,CCoBM,SAAUmF,UAAU5c,EAA4B,UAC9CsZ,MAAAA,EAAuB,QAAdlU,EAAApF,EAAQsZ,cAAMlU,IAAAA,EAAAA,EAAIyX,SAAW9C,KACtC+C,EAAY,IAAIC,UAAU,CAC9BC,6BAA8Bhd,EAAQgd,6BACtCC,iCAAkCjd,EAAQid,mCAErC,MAAA,CACLjG,KAAMkG,cACN,iBAAMC,CAAYC,EAA0B1H,GACtC,IAAC4D,EAAOlB,QACV,OAAO1C,EAAK0H,GAGd9D,EAAO,YAAYwD,EAAUO,SAASD,IAEhC7e,MAAAA,QAAiBmX,EAAK0H,GAKrB7e,OAHP+a,EAAO,yBAAyB/a,EAAS+e,QACzChE,EAAO,YAAYwD,EAAUO,SAAS9e,EAASlC,UAExCkC,CACT,EAEJ,CClCM,SAAUgf,eAAevd,EAAiC,IACxD,MAAAwd,WAAEA,EAAa,IAAOxd,EACrB,MAAA,CACLgX,KAAMyG,mBACN,iBAAMN,CAAYC,EAA0B1H,GACpCnX,MAAAA,QAAiBmX,EAAK0H,GACrBM,OAAAA,eAAehI,EAAMnX,EAAUif,EACxC,EAEJ,CAEAG,eAAeD,eACbhI,EACAnX,EACAif,EACAI,EAAyB,GAEnB,MAAAR,QAAEA,EAAAA,OAASE,EAAAA,QAAQjhB,GAAYkC,EAC/Bsf,EAAiBxhB,EAAQmC,IAAI,YAEjCqf,GAAAA,IACY,MAAXP,GACa,MAAXA,GAAkBQ,gBAAgB7c,SAASmc,EAAQW,SACxC,MAAXT,GAAkBQ,gBAAgB7c,SAASmc,EAAQW,SACxC,MAAXT,GAAqC,SAAnBF,EAAQW,QAChB,MAAXT,IACeE,EAAjBI,EACA,CACA,MAAM1hB,EAAM,IAAIjB,IAAI4iB,EAAgBT,EAAQlhB,KACpCA,EAAAA,IAAMA,KAIC,MAAXohB,IACFF,EAAQW,OAAS,MACT1hB,EAAAA,QAAQ2hB,OAAO,yBAChBZ,EAAQvT,MAGTxN,EAAAA,QAAQ2hB,OAAO,iBAEjBC,MAAAA,QAAYvI,EAAK0H,GACvB,OAAOM,eAAehI,EAAMuI,EAAKT,EAAYI,EAAiB,EAChE,CAEOrf,OAAAA,CACT,CC9DM,SAAU2f,gBACP,MAAA,YACT,CAKOP,eAAeQ,wBAAwBviB,GACxCb,GAAAA,oBAAWA,mBAAQkJ,SAAU,CAC/B,MAAMA,EAAWlJ,mBAAQkJ,SACrBA,EAASma,IACP5Q,EAAAA,IAAI,MAAOvJ,EAASma,KACfna,EAASoa,KACd7Q,EAAAA,IAAI,OAAQvJ,EAASoa,MAChBpa,EAASsP,MACd/F,EAAAA,IAAI,OAAQvJ,EAASsP,KAE7B,CAEA3X,EAAI4R,IAAI,KAAM,IAAIhL,cAAGH,UAAUG,cAAGqO,UAAUrO,cAAG8b,aACjD,CC/BA,SAASC,mBAAmBC,GAC1B,MAAMpT,EAAkB,GACxB,IAAA,MAAYzE,EAAKE,KAAU2X,EAEzBpT,EAAM3P,KADQoL,EAAQ,GAAGF,KAAOE,IAAUF,GAGrCyE,OAAAA,EAAM7O,KAAK,IACpB,CAKM,SAAUkiB,yBACd,OAAOP,eACT,CAKOP,eAAee,kBAAkBC,GAChCC,MAAAA,MAAkBC,IACZrR,EAAAA,IAAI,qBAAsBsR,qBAChCX,wBAAwBS,GACxBG,MAAAA,EAAeR,mBAAmBK,GAEjCI,OADgBL,EAAS,GAAGA,KAAUI,IAAiBA,CAEhE,CCFM,SAAUE,gBAAgBjf,EAAkC,IAC1Dgf,MAAAA,EAAiBN,kBAAkB1e,EAAQkf,iBAC1C,MAAA,CACLlI,KAAMmI,oBACNxB,YAAkBP,MAAAA,EAA0B1H,KACrC0H,EAAQ/gB,QAAQ+iB,IAAIC,sBACvBjC,EAAQ/gB,QAAQmR,IAAI6R,0BAA2BL,GAE1CtJ,EAAK0H,IAGlB,CCCO,SAASkC,OAAOvc,EAAGqZ,GACxB,IAAIxO,EAAI,CAAA,EACR,IAAA,IAASrG,KAAKxE,GAAO8K,CAAO0R,GAAUC,eAAeC,KAAK1c,EAAGwE,IAAqB,EAAf6U,EAAE9R,QAAQ/C,KACvEqG,EAAArG,GAAKxE,EAAEwE,IACb,GAAS,MAALxE,GAAqD,mBAAjC8K,OAAO6R,sBAClB,KAAAxZ,EAAI,EAAJ,IAAOqB,EAAIsG,OAAO6R,sBAAsB3c,GAAQwE,EAAEtB,OAANC,EAAcA,IACzC,EAAlBkW,EAAE9R,QAAQ/C,EAAErB,KAAW2H,CAAO0R,EAAUI,qBAAqBF,KAAK1c,EAAGwE,EAAErB,MACvE0H,EAAErG,EAAErB,IAAMnD,EAAEwE,EAAErB,IAF4B,CAI/C,OAAA0H,CACT,CAoHO,SAASgS,WAASC,GACnB,IAAA9c,EAAsB,mBAAX+c,QAAyBA,OAAOC,SAAU/V,EAAIjH,GAAK8c,EAAE9c,GAAImD,EAAI,EAC5E,GAAI8D,EAAG,OAAOA,EAAEyV,KAAKI,GACrB,GAAIA,GAAyB,iBAAbA,EAAE5Z,OAA4B,MAAA,CAC1CyP,KAAM,WAEK,OADHmK,GAAK3Z,GAAK2Z,EAAE5Z,SAAY4Z,OAAA,GACrB,CAAEhZ,MAAOgZ,GAAKA,EAAE3Z,KAAMyP,MAAOkK,EACvC,GAEL,MAAM,IAAIG,UAAUjd,EAAI,0BAA4B,kCACtD,CA6CO,SAASkd,QAAQC,GACf,OAAA3iB,gBAAgB0iB,SAAW1iB,KAAK2iB,EAAIA,EAAG3iB,MAAQ,IAAI0iB,QAAQC,EACpE,CAEO,SAASC,iBAAiBC,EAASC,EAAYC,GAK3C,SAAAC,EAAKrU,EAAGsU,GAASC,EAAEvU,KAAQhG,EAAAgG,GAAK,SAAUgU,GAAK,OAAO,IAAIvF,SAAQ,SAAUvU,EAAGC,GAAOqa,EAAAjlB,KAAK,CAACyQ,EAAGgU,EAAG9Z,EAAGC,IAAM,GAAKsa,EAAOzU,EAAGgU,KAAS,EAAMM,IAAKta,EAAAgG,GAAKsU,EAAEta,EAAEgG,KAAQ,CAC/JyU,SAAAA,EAAOzU,EAAGgU,GAAS,KACd3W,EADqBkX,EAAEvU,GAAGgU,IACnBrZ,iBAAiBoZ,QAAUtF,QAAQC,QAAQrR,EAAE1C,MAAMqZ,GAAGU,KAAKC,EAAShG,GAAUiG,EAAOJ,EAAE,GAAG,GAAInX,EADvE,OAAU6S,GAAK0E,EAAOJ,EAAE,GAAG,GAAItE,GAC3E,IAAc7S,CADoE,CAElF,SAASsX,EAAQha,GAAS8Z,EAAO,OAAQ9Z,EAAS,CAClD,SAASgU,EAAOhU,GAAS8Z,EAAO,QAAS9Z,EAAS,CACzC,SAAAia,EAAON,EAAGN,GAASM,EAAEN,GAAIQ,EAAEpV,QAASoV,EAAEza,QAAQ0a,EAAOD,EAAE,GAAG,GAAIA,EAAE,GAAG,GAAM,CATlF,IAAKZ,OAAOiB,cAAqB,MAAA,IAAIf,UAAU,wCAC3C,IAAgD9Z,EAAhDua,EAAIH,EAAU/U,MAAM6U,EAASC,GAAc,IAAQK,EAAI,GACpD,OAAAxa,EAAI2H,OAAOoF,QAAiC,mBAAlB+N,cAA+BA,cAAgBnT,QAAQ0R,WAAYgB,EAAK,QAASA,EAAK,SAAUA,EAAK,UACtI,SAAqBC,GAAK,OAAO,SAAUN,GAAK,OAAOvF,QAAQC,QAAQsF,GAAGU,KAAKJ,EAAG3F,EAAU,CAAG,IAD+D3U,EAAE4Z,OAAOiB,eAAiB,WAAqB,OAAAxjB,IAAK,EAAI2I,CAQxN,CAEO,SAAS+a,iBAAiBpB,GAGtB,SAAAU,EAAKrU,EAAGsU,GAAKta,EAAEgG,GAAK2T,EAAE3T,GAAK,SAAUgU,GAAK,OAAQ3Y,GAAKA,GAAK,CAAEV,MAAOoZ,QAAQJ,EAAE3T,GAAGgU,IAAKvK,MAAM,GAAU6K,EAAIA,EAAEN,GAAKA,CAAE,EAAKM,CAAI,CAFtI,IAAIta,EAAGqB,EACA,OAAArB,EAAI,CAAA,EAAIqa,EAAK,QAASA,EAAK,SAAS,SAAUnE,GAAW,MAAAA,CAAE,IAAKmE,EAAK,UAAWra,EAAE4Z,OAAOC,UAAY,WAAqB,OAAAxiB,IAAO,EAAE2I,CAE5I,CAEO,SAASsP,cAAcqK,GAI5B,SAASU,EAAKrU,GAAKhG,EAAEgG,GAAK2T,EAAE3T,IAAM,SAAUgU,GAAK,OAAO,IAAIvF,SAAQ,SAAUC,EAASC,IACvF,SAAgBD,EAASC,EAAQqG,EAAGhB,GAAKvF,QAAQC,QAAQsF,GAAGU,MAAK,SAASV,GAAKtF,EAAQ,CAAE/T,MAAOqZ,EAAGvK,KAAMuL,GAAK,GAAIrG,EAAU,CADdiG,CAAOlG,EAASC,GAAzBqF,EAAAL,EAAE3T,GAAGgU,IAA8BvK,KAAMuK,EAAErZ,MAAO,GAAM,CAAG,CAHhK,IAAKiZ,OAAOiB,cAAqB,MAAA,IAAIf,UAAU,wCAC/C,IAAiC9Z,EAA7B8D,EAAI6V,EAAEC,OAAOiB,eACjB,OAAO/W,EAAIA,EAAEyV,KAAKI,IAAMA,EAAwB,mBAAbD,WAA0BA,WAASC,GAAKA,EAAEC,OAAOC,YAAa7Z,EAAI,CAAE,EAAEqa,EAAK,QAASA,EAAK,SAAUA,EAAK,UAAWra,EAAE4Z,OAAOiB,eAAiB,WAAqB,OAAAxjB,IAAK,EAAI2I,EAGhN,CCzOM,SAAUib,OAAOtlB,GACd,MAA8B,mBAAtBA,EAAWkD,MAC5B,CCsDA,SAASqiB,cAAcvlB,GACd,MAAyC,mBAAjCA,EAAiBwlB,WAClC,CASM,SAAUC,cACdC,GAEIH,OAAAA,cAAcG,GACTA,EAAKF,cAELE,EAAKxiB,QAEhB,CCtFA,SAAgByiB,0EAGRC,MAAAA,EAASlkB,KAAKmkB,YAChB,IACF,OAAa,CACL,MAAA/L,KAAEA,EAAAA,MAAM9O,SAAUoZ,QAAMwB,EAAOE,QACrC,GAAIhM,EACF,aAAAsK,aAAA,eAGFA,QAAMpZ,EACR,CACF,CAAU,QACR4a,EAAOG,aACT,KAGF,SAASC,kBAAqBC,GACvBA,EAAUhC,OAAOiB,iBACpBe,EAAUhC,OAAOiB,eAAiBS,oBAAoBO,KAAKD,IAGxDA,EAAU/a,SACHA,EAAAA,OAASya,oBAAoBO,KAAKD,GAEhD,CAEA,SAASE,iBACPjjB,GAEA,OAAIA,aAAkBkjB,gBACpBJ,kBAA8B9iB,GACvBmjB,SAAQA,SAACC,QAAQpjB,IAEjBA,CAEX,CAEA,SAASqjB,SACPC,GAEA,OAAIA,aAAkBC,WACbJ,SAAAA,SAASlb,KAAK2V,OAAO3V,KAAKqb,IACxBlB,OAAOkB,GACTD,SAASd,cAAce,IAEvBL,iBAAiBK,EAE5B,CAkBO1E,eAAe4E,OACpBC,GAEA,OAAO,WACL,MAAMC,EAAUD,EAAQ5mB,KAAKC,GAAoB,mBAANA,EAAmBA,IAAMA,IAAID,IAAIwmB,UAErEF,OAAAA,SAAAA,SAASlb,KACb,yEACC,IAAA,MAAWjI,KAAU0jB,MACOvN,IAAAA,IAAMwN,EAANxN,GAAAyN,EAAAA,GAAAC,OAAApN,EAAAA,cAAAzW,MAAMqG,GAAAsd,QAAAzC,QAAA0C,EAAAjN,SAAAC,MAAAT,GAAE,EAAA,CAARA,GAAA,EAAf,MAAM2N,EAASH,EAAA7b,kBACxBoZ,QAAM4C,EACR,kHAEH,CANA,IASP,CClFA,SAASC,mBACA,MAAA,wBAAwBtG,YACjC,CAEA,SAASuG,cAAc1mB,GACrB,IAAIuI,EAAS,GACb,IAAA,MAAY+B,EAAKE,KAAUxK,EACfuI,GAAA,GAAG+B,MAAQE,QAEhBjC,OAAAA,CACT,CAEA,SAASoe,UACPX,GAQA,OAAIA,aAAkBC,WACbD,EAAOY,WACL9B,OAAOkB,IAEYhkB,IAArBgkB,EAAOvN,UAAczW,EAAYgkB,EAAOvN,UAExCzW,CAEX,CAEA,SAAS6kB,eACPV,GASA,IAAIW,EAAQ,EACZ,IAAA,MAAWd,KAAUG,EAAS,CACtBY,MAAAA,EAAaJ,UAAUX,GAC7B,QAAmBhkB,IAAf+kB,EACK/kB,OAEE+kB,GAAAA,CAEb,CACOD,OAAAA,CACT,CAEAxF,eAAe0F,iBACbjG,EACAhS,EACAkY,GAEA,MAAMd,EAAU,CACd9F,mBAAmB,KAAK4G,EAAY,YACjClY,EAAMmY,SAASC,GAAS,CACzB9G,mBAAmB,OAAQ,SAC3BA,mBAAmBqG,cAAcS,EAAKnnB,SAAU,SAChDqgB,mBAAmB,OAAQ,SAC3B8G,EAAK3Z,KACL6S,mBAAmB,SAAS4G,EAAY,YAE1C5G,mBAAmB,aAAc,UAG7B+G,EAAgBP,eAAeV,GACjCiB,GACMpnB,EAAAA,QAAQmR,IAAI,iBAAkBiW,GAGhC5Z,EAAAA,WAAa0Y,OAAOC,EAC9B,CAYA,SAASkB,oBAAoBJ,GACvBA,GAAAA,EAASrd,OAAS0d,kBACpB,MAAU7lB,MAAM,uBAAuBwlB,8CAGrCpiB,GAAAA,MAAM8F,KAAKsc,GAAUtnB,MAAYH,IAAC+nB,wBAAwBxE,IAAIvjB,KAChE,MAAUiC,MAAM,uBAAuBwlB,iCAE3C,CAKM,SAAUO,kBACP,MAAA,CACL7M,KAAM8M,oBACN,iBAAM3G,CAAYC,EAAS1H,SACrB,IAAC0H,EAAQ2G,cACX,OAAOrO,EAAK0H,GAGd,GAAIA,EAAQvT,KACJ,MAAI/L,MAAM,iEAGdwlB,IAAAA,EAAWlG,EAAQ2G,cAAcT,SAE/BU,MAAAA,EAAuD,QAAnC5e,EAAAgY,EAAQ/gB,QAAQmC,IAAI,uBAAe4G,IAAAA,EAAAA,EAAI,kBAC3D6e,EAAeD,EAAkBrgB,MAAM,8CAC7C,IAAKsgB,EACH,MAAUnmB,MACR,0EAA0EkmB,GAI9E,OAASE,EAAaC,GAAkBF,EACpCE,GAAAA,GAAkBb,GAAYa,IAAmBb,EACnD,MAAUxlB,MACR,uCAAuCqmB,4BAAyCb,yBAepF,OAXAA,UAAAA,EAAaa,GACTb,EACFI,oBAAoBJ,GAEpBA,EAAWR,mBAEb1F,EAAQ/gB,QAAQmR,IAAI,eAAgB,GAAG0W,eAAyBZ,WAC1DD,iBAAiBjG,EAASA,EAAQ2G,cAAc3Y,MAAOkY,GAE7DlG,EAAQ2G,mBAAgB1lB,EAEjBqX,EAAK0H,EACd,EAEJ,CC1IM,SAAUgH,2BACP,MAAA,CACLpN,KAAMqN,6BACN1G,YAAkBP,MAAAA,EAA0B1H,KAEnB,SAAnB0H,EAAQW,QACF1hB,EAAAA,QAAQmR,IAAI,kBAAmB,gBAElCkI,EAAK0H,IAGlB,CCTM,SAAU1B,QACd4I,EACAzd,EACA7G,GAKA,OAAO,IAAI2a,SAAQ,CAACC,EAASC,KAC3B,IAAI0J,EACAC,EAEJ,MAAM1J,EAAgBA,IACbD,EACL,IAAIE,cAAW/a,aAAO,EAAPA,EAAS0a,eAAgB1a,aAAAA,EAAAA,EAAS0a,cAAgBqB,uBAI/Df,EAAkBA,MAClBhb,aAAO,EAAPA,EAASya,cAAe+J,GAC1BxkB,EAAQya,YAAYQ,oBAAoB,QAASuJ,EACnD,EAWExkB,GARJwkB,EAAYA,KACND,GACFzI,aAAayI,OAGRzJ,MAGL9a,eAAAA,EAASya,cAAeza,EAAQya,YAAYU,QAC9C,OAAOL,IAGTyJ,EAAQ1I,YAAW,SAEjBjB,EAAQ/T,EAAK,GACZyd,IAECtkB,eAAAA,EAASya,cACXza,EAAQya,YAAYW,iBAAiB,QAASoJ,EAChD,GAEJ,CAMM,SAAUC,yBACdlmB,EACAmmB,GAEA,MAAM7d,EAAQtI,EAASlC,QAAQmC,IAAIkmB,GACnC,IAAK7d,EAAO,OACN8d,MAAAA,GAAoB9d,EACtBvL,OAAAA,OAAOspB,MAAMD,QAAbrpB,EACGqpB,CACT,CC/CA,SAASE,kBAAkBtmB,GACrB,GAAEA,GAAY,CAAC,IAAK,KAAK0C,SAAS1C,EAAS+e,QAC3C,IAEF,IAAA,MAAWwH,KAAUC,qBAAsB,CACnCC,MAAAA,EAAkBP,yBAAyBlmB,EAAUumB,GACvDE,GAAoB,IAApBA,GAAyBA,EAI3B,OAAOA,GADmBF,IAAWG,iBAAmB,IAAO,EAGnE,CAGA,MAAMC,EAAmB3mB,EAASlC,QAAQmC,IAAIymB,kBAC9C,IAAKC,EAAkB,OAEjBC,MACAC,EADOtR,KAAK3O,MAAM+f,GACJpR,KAAKuR,MAElB/pB,OAAAA,OAAOgqB,SAASF,GAAQ3Y,KAAKC,IAAI,EAAG0Y,QAAQ/mB,CACpD,OAAC+G,GACO/G,MACT,CACF,CAMM,SAAUknB,0BAA0BhnB,GACxC,OAAOjD,OAAOgqB,SAAST,kBAAkBtmB,GAC3C,CAEM,SAAUinB,0BACP,MAAA,CACLxO,KAAM,0BACNyO,KAAAA,EAAMlnB,SAAEA,IACAmnB,MAAAA,EAAiBb,kBAAkBtmB,GACzC,OAAKjD,OAAOgqB,SAASI,GAGd,CACLA,kBAHO,CAAEC,cAAc,EAK3B,EAEJ,CC5DM,SAAUC,yBACd5lB,EAuBI,YAEJ,MAAM6lB,EAAsCzgB,QAAtBA,EAAApF,EAAQ8lB,sBAAc1gB,IAAAA,EAAAA,EAAI2gB,8BAC1CC,EAA4CC,QAAzBA,EAAAjmB,EAAQkmB,yBAAiBD,IAAAA,EAAAA,EAAIE,kCAEtD,IAAIT,EAAiBG,EAEd,MAAA,CACL7O,KAAM,2BACNyO,KAAAA,EAAMW,WAAEA,EAAAA,SAAY7nB,EAAAA,cAAU8nB,IACtBC,MAAAA,EAAqBC,cAAcF,GACnCG,EAAqBF,GAAsBtmB,EAAQwmB,mBAEnDC,EAAgBC,2BAA2BnoB,GAC3CooB,EAA4BF,GAAiBzmB,EAAQ4mB,sBAGvDC,GAFoBtoB,IAAagnB,0BAA0BhnB,KAAckoB,IAEtDE,GAA6BH,EAC3C,MAAA,CAAEb,cAAc,GAGzB,GAAIU,IAAkBC,IAAuBG,EACpC,MAAA,CAAEK,aAAcT,GAIzB,MAEMU,EAA0Bta,KAAK6O,IAAI0K,EAFhBN,EAAiBjZ,KAAKua,IAAI,EAAGZ,IAO/C,OAFPV,EACEqB,EAA0B,EAAI1L,0BAA0B,EAAG0L,EAA0B,GAChF,CAAErB,iBACX,EAEJ,CAOM,SAAUgB,2BAA2BnoB,GACzC,SACEA,QACsBF,IAApBE,EAAS+e,QACW,IAAnB/e,EAAS+e,QAAqC,MAApB/e,EAAS+e,QAChB,MAApB/e,EAAS+e,QACW,MAApB/e,EAAS+e,OAEf,CAKM,SAAUiJ,cAAc9oB,GAC5B,QAAKA,IAIU,cAAbA,EAAIwpB,MACS,oBAAbxpB,EAAIwpB,MACS,iBAAbxpB,EAAIwpB,MACS,eAAbxpB,EAAIwpB,MACS,WAAbxpB,EAAIwpB,MACS,cAAbxpB,EAAIwpB,KAER,CC1EM,SAAUC,YACdC,EACAnnB,EAA8B,CAAEwd,WAAY4J,6BAEtC9N,MAAAA,EAAStZ,EAAQsZ,QAAU+N,kBAC1B,MAAA,CACLrQ,KAAMsQ,gBACN,iBAAMnK,CAAYC,EAA0B1H,WACtCnX,IAAAA,EACA8nB,EACAD,GAAa,EAGjBmB,SAA2B,CACXnB,GAAA,EACH/nB,OAAAA,EACKA,OAAAA,EAEZ,IACFib,EAAOS,KAAK,SAASqM,gCAA0ChJ,EAAQoK,WAC5DjpB,QAAMmX,EAAK0H,GACtB9D,EAAOS,KAAK,SAASqM,sCAAgDhJ,EAAQoK,UAC9E,OAAQpL,GAOP,GANA9C,EAAOzK,MAAM,SAASuX,oCAA8ChJ,EAAQoK,WAK5DpL,EAAAA,GACXA,GAA4B,cAAvBiK,EAAcrP,KAChBoF,MAAAA,EAGR7d,EAAW8nB,EAAc9nB,QAC3B,CAEI6G,GAAmBA,QAAnBA,EAAAgY,EAAQ3C,mBAAWrV,IAAAA,OAAAA,EAAAA,EAAE+V,QAGjBsM,MAFNnO,EAAOzK,MAAM,SAASuX,uBACH,IAAIrL,aAIrBqL,GAAAA,IAAiC,QAAlBH,EAAAjmB,EAAQwd,kBAAUyI,IAAAA,EAAAA,EAAImB,4BAA6B,CAIpE,GAHA9N,EAAOS,KACL,SAASqM,0GAEPC,EACIA,MAAAA,KACG9nB,EACFA,OAAAA,EAED,MAAIT,MAAM,6DAEpB,CAEAwb,EAAOS,KAAK,SAASqM,iBAA0Be,EAAWlhB,4BAE1CyhB,EAAA,IAAA,MAAWC,KAAYR,EAAY,CAC3CS,MAAAA,EAAiBD,EAASrO,QAAU+N,kBAC1CO,EAAe7N,KAAK,SAASqM,gCAAyCuB,EAAS3Q,SAEzE6Q,MAAAA,EAAYF,EAASlC,MAAM,CAC/BW,aACA7nB,WACA8nB,kBAGF,GAAIwB,EAAUlC,aAAc,CACX5L,EAAAA,KAAK,SAASqM,eACpBsB,SAAAA,CACX,CAEM,MAAAZ,aAAEA,EAAAA,eAAcpB,EAAAA,WAAgBoC,GAAeD,EAErD,GAAIf,EAKIA,MAJNc,EAAe/Y,MACb,SAASuX,qBAA8BuB,EAAS3Q,qBAChD8P,GAEIA,EAGJpB,GAAAA,GAAqC,IAAnBA,EAAsB,CAC3B3L,EAAAA,KACb,SAASqM,qBAA8BuB,EAAS3Q,sBAAsB0O,WAElEhK,QAAMgK,OAAgBrnB,EAAW,CAAEoc,YAAa2C,EAAQ3C,cACrD8M,SAAAA,CACX,CAEA,GAAIO,EAAY,CACC/N,EAAAA,KACb,SAASqM,qBAA8BuB,EAAS3Q,qBAAqB8Q,KAEvE1K,EAAQlhB,IAAM4rB,EACLP,SAAAA,CACX,CACF,CAEA,GAAIlB,EAIIA,MAHN/M,EAAOS,KACL,iFAEIsM,EAER,GAAI9nB,EAIKA,OAHP+a,EAAOS,KACL,qFAEKxb,CAMX,CACF,EAEJ,CChIM,SAAUwpB,mBAAmB/nB,EAAqC,UAC/D,MAAA,CACLgX,KAAMgR,uBACN7K,YAAa+J,YAAY,CAAC1B,0BAA2BI,yBAAyB5lB,IAAW,CACvFwd,WAA8BpY,QAAlBA,EAAApF,EAAQwd,kBAAUpY,IAAAA,EAAAA,EAAIgiB,6BACjCjK,YAEP,CCvBA,SAAS8K,cAAcjR,GACrB,OAAOA,EAAKF,aACd,CAEA,SAAUoR,eAAetsB,GACZusB,IAAAA,MAAAA,KAASvsB,EAAImL,cAChB,CAACohB,EAAMnR,KAAMmR,EAAMthB,MAE7B,CAsFM,SAAUuhB,kBAAkBC,GACzB,OAAA,IAAIC,gBAAgBD,EAC7B,CCtFA,SAASE,sBAAsBC,SAC7B,MAAMC,EAA2B,CAAA,EACjC,IAAA,MAAY9hB,EAAKE,KAAU2hB,EAASE,UACnBtjB,QAAfA,EAAAqjB,EAAY9hB,UAAGvB,IAAAA,IAAfqjB,EAAY9hB,GAAS,IACRA,EAAAA,GAAyBlL,KAAKoL,GAEtC4hB,OAAAA,CACT,CAKM,SAAUE,iBACP,MAAA,CACL3R,KAAM4R,mBACN,iBAAMzL,CAAYC,EAA0B1H,GAM1C,GALImT,YAAkC,oBAAbC,UAA4B1L,EAAQvT,gBAAgBif,WACnEN,EAAAA,SAAWD,sBAAsBnL,EAAQvT,MACjDuT,EAAQvT,UAAOxL,GAGb+e,EAAQoL,SAAU,CACpB,MAAMtE,EAAc9G,EAAQ/gB,QAAQmC,IAAI,gBACpC0lB,IAAgF,IAAjEA,EAAY5Z,QAAQ,qCAC7BT,EAAAA,KAAOkf,iBAAiB3L,EAAQoL,gBAElCQ,gBAAgB5L,EAAQoL,SAAUpL,GAG1CA,EAAQoL,cAAWnqB,CACrB,CACA,OAAOqX,EAAK0H,EACd,EAEJ,CAEA,SAAS2L,iBAAiBP,GAClBS,MAAAA,EAAkB,IAAIC,gBAC5B,IAAA,MAAYviB,EAAKE,KAAUgH,OAAO6a,QAAQF,GACpCtnB,GAAAA,MAAMgb,QAAQrV,GAChB,IAAA,MAAWsiB,KAAYtiB,EACrBoiB,EAAgBG,OAAOziB,EAAKwiB,WAG9BF,EAAgBG,OAAOziB,EAAKE,MAGhC,MAAOoiB,IACT,CAEAtL,eAAeqL,gBAAgBR,EAAuBpL,GAEpD,MAAM8G,EAAc9G,EAAQ/gB,QAAQmC,IAAI,gBACxC,GAAI0lB,IAAgBA,EAAY/b,WAAW,uBAEzC,OAGM9L,EAAAA,QAAQmR,IAAI,eAAgB0W,QAAAA,EAAe,uBAGnD,MAAM9Y,EAAoB,GAE1B,IAAA,MAAYie,EAAWtiB,KAAW8G,OAAO6a,QAAQF,GACpC3hB,IAAAA,MAAAA,KAAS3F,MAAMgb,QAAQnV,GAAUA,EAAS,CAACA,GAChD,GAAiB,iBAAVF,EACTuE,EAAM3P,KAAK,CACTY,QAAS+rB,kBAAkB,CACzB,sBAAuB,oBAAoBiB,OAE7Cxf,KAAM6S,mBAAmB7V,EAAO,mBAEzBA,SAA0D,iBAAVA,EACzD,MAAU/I,MACR,4BAA4BurB,MAAcxiB,kDAEvC,CAECyiB,MAAAA,EAAYziB,EAAemQ,MAAQ,OACnC3a,EAAU+rB,oBAChB/rB,EAAQmR,IACN,sBACA,oBAAoB6b,iBAAyBC,MAI/CjtB,EAAQmR,IAAI,eAAgB3G,EAAMgK,MAAQ,4BAE1CzF,EAAM3P,KAAK,CACTY,UACAwN,KAAMhD,GAEV,EAGJuW,EAAQ2G,cAAgB,CAAE3Y,QAC5B,sBC0CA,SAASme,EAAOC,EAAIC,EAAOvd,EAAG8K,GACxB0S,IAAAA,EAAWD,GAAa,IAAJvd,EACjBO,OAAAA,KAAKkd,MAAMH,EAAKtd,GAAK,IAAM8K,GAAQ0S,EAAW,IAAM,GAC7D,4CA7JA,IAAI3mB,EAAI,IACJiH,EAAQ,GAAJjH,EACJ6mB,EAAQ,GAAJ5f,EACJkX,EAAQ,GAAJ0I,EACJC,EAAQ,EAAJ3I,SAiBSsI,GAAA,SAAUM,EAAK9pB,GAC9BA,EAAUA,GAAW,GACrB,IA8GewpB,EACXC,EA/GA5Y,SAAciZ,EAClB,GAAa,WAATjZ,GAAqBiZ,EAAI7jB,OAAS,EACpC,OAkBJ,SAAemD,GAETA,GAAa,MADjBA,GAAM0D,IACE7G,OAAJmD,CAGAzF,IAAAA,EAAQ,mIAAmIxD,KAC7IiJ,GAEF,GAAKzF,EAAL,CAGA,IAAIuI,EAAI6d,WAAWpmB,EAAM,IAEzB,QADYA,EAAM,IAAM,MAAMmT,eAE5B,IAAK,QACL,IAAK,OACL,IAAK,MACL,IAAK,KACL,IAAK,IACH,OAzDEoK,SAyDKhV,EACT,IAAK,QACL,IAAK,OACL,IAAK,IACH,OAAOA,EAAI2d,EACb,IAAK,OACL,IAAK,MACL,IAAK,IACH,OAAO3d,EAAIgV,EACb,IAAK,QACL,IAAK,OACL,IAAK,MACL,IAAK,KACL,IAAK,IACH,OAAOhV,EAAI0d,EACb,IAAK,UACL,IAAK,SACL,IAAK,OACL,IAAK,MACL,IAAK,IACH,OAAO1d,EAAIlC,EACb,IAAK,UACL,IAAK,SACL,IAAK,OACL,IAAK,MACL,IAAK,IACH,OAAOkC,EAAInJ,EACb,IAAK,eACL,IAAK,cACL,IAAK,QACL,IAAK,OACL,IAAK,KACImJ,OAAAA,EACT,QACS7N,OA3CX,CANA,CAmDF,CAzEW8G,CAAM2kB,GACJjZ,GAAS,WAATA,GAAqByU,SAASwE,GACvC,OAAO9pB,EAAQgqB,KA4GJ9I,GADTuI,EAAQhd,KAAKG,IADF4c,EA1GiBM,IA+GnBF,EAATH,EAGSzf,EAATyf,EAGS1mB,EAAT0mB,EAGGD,EAAK,MAFHD,EAAOC,EAAIC,EAAO1mB,EAAG,UAHrBwmB,EAAOC,EAAIC,EAAOzf,EAAG,UAHrBuf,EAAOC,EAAIC,EAAOG,EAAG,QAHrBL,EAAOC,EAAIC,EAAOvI,EAAG,OA5BhC,SAAkBsI,GACZC,IAAAA,EAAQhd,KAAKG,IAAI4c,GACrB,OAAatI,EAATuI,EAGSG,EAATH,EAGSzf,EAATyf,EAGS1mB,EAAT0mB,EAGGD,EAAK,KAFH/c,KAAKkd,MAAMH,EAAKzmB,GAAK,IAHrB0J,KAAKkd,MAAMH,EAAKxf,GAAK,IAHrByC,KAAKkd,MAAMH,EAAKI,GAAK,IAHrBnd,KAAKkd,MAAMH,EAAKtI,GAAK,GAYhC,CAhGyC+I,CAASH,GAEhD,MAAUhsB,MACR,wDACEoH,KAAKqX,UAAUuN,GAErB,gFC4OiBI,OA3QjB,SAAelvB,GAqDd,SAASmvB,EAAY9R,GAMpB,SAASvb,KAASgD,GAEb,IAAChD,EAAMsb,QACV,OAGD,MAAMtI,EAAOhT,EAGPstB,GAAkBtW,IAAAA,KAExBhE,EAAKsV,KADMgF,GAAQC,GAAYD,GAE/Bta,EAAKwa,KAAOD,EACZva,EAAKsa,KAAOA,EACDA,EAAAA,EAEXtqB,EAAK,GAAKqqB,EAAYI,OAAOzqB,EAAK,IAEX,iBAAZA,EAAK,IAEfA,EAAKkC,QAAQ,MAId,IAAIgX,EAAQ,EACPlZ,EAAA,GAAKA,EAAK,GAAGO,QAAQ,iBAAiB,CAACsD,EAAO8T,KAElD,GAAc,OAAV9T,EACI,MAAA,IAERqV,IACMwR,MAAAA,EAAYL,EAAYM,WAAWhT,GASlC9T,MARkB,mBAAd6mB,IAEV7mB,EAAQ6mB,EAAU/K,KAAK3P,EADXhQ,EAAKkZ,IAIZC,EAAAA,OAAOD,EAAO,GACnBA,KAEMrV,CAAAA,IAII+mB,EAAAA,WAAWjL,KAAK3P,EAAMhQ,IAEpBgQ,EAAKyH,KAAO4S,EAAY5S,KAChChM,MAAMuE,EAAMhQ,EACnB,CArDIuqB,IAAAA,EAEAM,EACAC,EAFAC,EAAiB,KAoFd/tB,OA9BPA,EAAMub,UAAYA,EAClBvb,EAAMguB,UAAYX,EAAYW,YAC9BhuB,EAAMiuB,MAAQZ,EAAYa,YAAY3S,GACtCvb,EAAMic,OAASA,EACfjc,EAAM+b,QAAUsR,EAAYtR,QAErBoS,OAAAA,eAAenuB,EAAO,UAAW,CACvCouB,YAAY,EACZC,cAAc,EACd3sB,IAAKA,IACmB,OAAnBqsB,EACIA,GAEJF,IAAoBR,EAAYvS,aACnC+S,EAAkBR,EAAYvS,WACfuS,EAAAA,EAAY/R,QAAQC,IAG7BuS,GAERpd,IAAU0S,IACQA,EAAAA,CAAAA,IAKa,mBAArBiK,EAAYiB,MACtBjB,EAAYiB,KAAKtuB,GAGXA,CACR,CAESic,SAAAA,EAAOV,EAAWgT,GACpBC,MAAAA,EAAWnB,EAAY5sB,KAAK8a,gBAAkC,IAAdgT,EAA4B,IAAMA,GAAahT,GAE9FiT,OADPA,EAAS/T,IAAMha,KAAKga,IACb+T,CACR,CAwFA,SAASC,EAAYld,GACpB,OAAOA,MACLgD,UAAU,GAAGhD,MAAkBpI,OAAS,GACxC5F,QAAQ,UAAW,IACtB,CA0BO8pB,OAvQPA,EAAYrtB,MAAQqtB,EACpBA,EAAYztB,QAAUytB,EACtBA,EAAYI,OAoPZ,SAAgBT,GACf,OAAIA,aAAehsB,MACXgsB,EAAI0B,OAAS1B,EAAIrrB,QAElBqrB,CACR,EAxPAK,EAAY3R,QAwLZ,WACOZ,MAAAA,EAAa,IACfuS,EAAYsB,MAAM7vB,IAAI2vB,MACtBpB,EAAYuB,MAAM9vB,IAAI2vB,GAAa3vB,KAAIyc,GAAa,IAAMA,KAC5D9b,KAAK,KAEAqb,OADPuS,EAAYxS,OAAO,IACZC,CACR,EA9LAuS,EAAYxS,OAsJZ,SAAgBC,GAOX1R,IAAAA,EANJikB,EAAYwB,KAAK/T,GACjBuS,EAAYvS,WAAaA,EAEzBuS,EAAYsB,MAAQ,GACpBtB,EAAYuB,MAAQ,GAGpB,MAAM/vB,GAA+B,iBAAfic,EAA0BA,EAAa,IAAIjc,MAAM,UACjE+U,EAAM/U,EAAMsK,OAElB,IAAKC,EAAI,EAAOwK,EAAJxK,EAASA,IACfvK,EAAMuK,KAOW,OAFtB0R,EAAajc,EAAMuK,GAAG7F,QAAQ,MAAO,QAEtB,GACFqrB,EAAAA,MAAMjwB,KAAS4N,OAAO,IAAMuO,EAAWhO,MAAM,GAAK,MAE9DugB,EAAYsB,MAAMhwB,KAAS4N,OAAO,IAAMuO,EAAa,MAGxD,EA9KAuS,EAAY/R,QAsMZ,SAAiBpB,GAChB,GAA8B,MAA1BA,EAAKA,EAAK/Q,OAAS,GACf,OAAA,EAGJC,IAAAA,EACAwK,EAECxK,IAAAA,EAAI,EAAGwK,EAAMyZ,EAAYuB,MAAMzlB,OAAYyK,EAAJxK,EAASA,IACpD,GAAIikB,EAAYuB,MAAMxlB,GAAGuB,KAAKuP,GACtB,OAAA,EAIJ9Q,IAAAA,EAAI,EAAGwK,EAAMyZ,EAAYsB,MAAMxlB,OAAYyK,EAAJxK,EAASA,IACpD,GAAIikB,EAAYsB,MAAMvlB,GAAGuB,KAAKuP,GACtB,OAAA,EAIF,OAAA,CACR,EA1NAmT,EAAYyB,SAAWC,YACvB1B,EAAYtR,QA0PZ,WACC/J,QAAQgd,KAAK,wIACd,EA1PAje,OAAOC,KAAK9S,GAAK+S,SAAepH,IACnBA,EAAAA,GAAO3L,EAAI2L,EAAG,IAO3BwjB,EAAYsB,MAAQ,GACpBtB,EAAYuB,MAAQ,GAOpBvB,EAAYM,WAAa,GAkBzBN,EAAYa,YAVZ,SAAqB3S,GACpB,IAAI0T,EAAO,EAEX,IAAA,IAAS7lB,EAAI,EAAOmS,EAAUpS,OAAdC,EAAsBA,IACrC6lB,GAASA,GAAQ,GAAKA,EAAQ1T,EAAU1N,WAAWzE,GAC3C6lB,GAAA,EAGF5B,OAAAA,EAAY6B,OAAOvf,KAAKG,IAAImf,GAAQ5B,EAAY6B,OAAO/lB,OAC/D,EA2NY0R,EAAAA,OAAOwS,EAAY8B,QAExB9B,CACR,4FCzQA+B,EAAAA,WA6IA,SAAoBpsB,GAQf,GAPCA,EAAA,IAAMvC,KAAKutB,UAAY,KAAO,IAClCvtB,KAAK8a,WACJ9a,KAAKutB,UAAY,MAAQ,KAC1BhrB,EAAK,IACJvC,KAAKutB,UAAY,MAAQ,KAC1B,IAAMqB,EAAOD,QAAQN,SAASruB,KAAK6nB,OAE/B7nB,KAAKutB,UACT,OAGK/kB,MAAAA,EAAI,UAAYxI,KAAKwtB,MAC3BjrB,EAAKmZ,OAAO,EAAG,EAAGlT,EAAG,kBAKrB,IAAIiT,EAAQ,EACRoT,EAAQ,EACZtsB,EAAK,GAAGO,QAAQ,eAAesD,IAChB,OAAVA,IAGJqV,IACc,OAAVrV,IAGKqV,EAAAA,GACT,IAGIC,EAAAA,OAAOmT,EAAO,EAAGrmB,EACvB,EA7KAmmB,EAAAA,KA+LA,SAActU,GACT,IACCA,EACHsU,EAAQG,QAAQC,QAAQ,QAAS1U,GAEjCsU,EAAQG,QAAQE,WAAW,QAE5B,OAAQ1d,GAER,CAEF,EAzMAqd,EAAAA,KAiNA,WACK3iB,IAAAA,EACA,IACC2iB,EAAAA,EAAQG,QAAQG,QAAQ,QAC5B,OAAQ3d,GAER,CAQMtF,OAJFA,GAAwB,oBAAZxO,SAA2B,QAASA,UACpDwO,EAAIxO,QAAQC,IAAIyxB,OAGVljB,CACR,EA/NA2iB,EAAAA,UAyGA,WAIK,GAAkB,oBAAXQ,QAA0BA,OAAO3xB,UAAoC,aAAxB2xB,OAAO3xB,QAAQ8V,MAAuB6b,OAAO3xB,QAAQ4xB,QACrG,OAAA,EAIJ,GAAqB,oBAAdC,WAA6BA,UAAU1uB,WAAa0uB,UAAU1uB,UAAU4Y,cAAcnT,MAAM,yBAC/F,OAAA,EAGJqG,IAAAA,EAII,MAAoB,oBAAb6iB,UAA4BA,SAASC,iBAAmBD,SAASC,gBAAgBC,OAASF,SAASC,gBAAgBC,MAAMC,kBAEpH,oBAAXN,QAA0BA,OAAO5d,UAAY4d,OAAO5d,QAAQme,SAAYP,OAAO5d,QAAQoe,WAAaR,OAAO5d,QAAQqe,QAGrG,oBAAdP,WAA6BA,UAAU1uB,YAAc8L,EAAI4iB,UAAU1uB,UAAU4Y,cAAcnT,MAAM,oBAAsB+G,SAASV,EAAE,GAAI,KAAO,IAE/H,oBAAd4iB,WAA6BA,UAAU1uB,WAAa0uB,UAAU1uB,UAAU4Y,cAAcnT,MAAM,qBACtG,EAjIAuoB,EAAkBkB,QA2OlB,WACK,IAGIC,OAAAA,YACP,OAAQxe,GAER,CAEF,CApPkBue,GAClBlB,EAAAA,QAAyB,MACxB,IAAIoB,GAAS,EAEb,MAAO,KACDA,IACKA,GAAA,EACTxe,QAAQgd,KAAK,yIACd,GAPuB,GAezBI,EAAAA,OAAiB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAwFDA,EAAcpd,IAAAA,QAAQhS,OAASgS,QAAQyI,WAAc,GAkErD4U,EAAAA,QAAiBN,gBAAoBK,GAE/B,MAAAzB,WAACA,GAAc0B,EAAOD,QAMjB/e,EAAAA,EAAI,SAAU+S,GACpB,IACIhb,OAAAA,KAAKqX,UAAU2D,EACtB,OAAQrR,GACR,MAAO,+BAAiCA,EAAMpQ,OAC/C,gIC3Qa8uB,QAAG,CAACC,EAAMC,EAAO1yB,QAAQ0yB,QAChC9O,MAAAA,EAAS6O,EAAKrlB,WAAW,KAAO,GAAsB,IAAhBqlB,EAAKvnB,OAAe,IAAM,KAChEynB,EAAWD,EAAKnjB,QAAQqU,EAAS6O,GACjCG,EAAqBF,EAAKnjB,QAAQ,MACxC,OAAoB,IAAbojB,KAA2C,IAAvBC,GAAwCA,EAAXD,EAAWC,mCCwBpE,SAASC,EAAezU,GACvB,OAAc,IAAVA,GAIG,CACNA,QACA0U,UAAU,EACVC,OAAQ3U,GAAS,EACjB4U,OAAQ5U,GAAS,EAEnB,CAES6U,SAAAA,EAAcC,EAAYC,GAClC,GAAmB,IAAfC,EACI,OAAA,EAGJZ,GAAAA,EAAQ,cACXA,EAAQ,eACRA,EAAQ,mBACD,OAAA,EAGJA,GAAAA,EAAQ,aACJ,OAAA,EAGR,GAAIU,IAAeC,QAA8B7vB,IAAf8vB,EAC1B,OAAA,EAGR,MAAM7S,EAAM6S,GAAc,EAEtBnzB,GAAa,SAAbA,EAAIozB,KACA9S,OAAAA,EAGJvgB,GAAqB,UAArBA,QAAQyZ,SAAsB,CAGjC,MAAM6Z,EAAY7rB,EAAG8b,UAAU3iB,MAAM,KAEpCL,OAAwB,IAAjB+yB,EAAU,IACO,OAAjBA,EAAU,GAKX,EAHyB,OAAjBA,EAAU,GAAmB,EAAJ,CAIzC,CAEA,GAAI,OAAQrzB,EACX,MAAI,CAAC,SAAU,WAAY,WAAY,YAAa,iBAAkB,aAAagB,SAAasyB,KAAQtzB,KAAwB,aAAhBA,EAAIuzB,QAC5G,EAGDjT,EAGR,GAAI,qBAAsBtgB,EACzB,MAAO,gCAAgCyM,KAAKzM,EAAIwzB,kBAAoB,EAAI,EAGrExzB,GAAkB,cAAlBA,EAAIyzB,UACA,OAAA,EAGR,GAAI,iBAAkBzzB,EAAK,CACpBoH,MAAAA,EAAUsI,UAAU1P,EAAI0zB,sBAAwB,IAAI/yB,MAAM,KAAK,GAAI,IAEzE,OAAQX,EAAI2zB,cACX,IAAK,YACGvsB,OAAW,EAAXA,EAAmB,EAAJ,EACvB,IAAK,iBACG,OAAA,EAGV,CAEA,MAAI,iBAAiBqF,KAAKzM,EAAIozB,MACtB,EAGJ,8DAA8D3mB,KAAKzM,EAAIozB,OAIvE,cAAepzB,EAHX,EAODsgB,CACR,+EA1HA,MAAM9Y,EAAKqpB,KACL+C,EAAM/C,IACN0B,EAAU1B,kBAEV7wB,IAACA,GAAOD,QAEVozB,IAAAA,SACAZ,EAAQ,aACXA,EAAQ,cACRA,EAAQ,gBACRA,EAAQ,eACKY,EAAA,GACHZ,EAAQ,UAClBA,EAAQ,WACRA,EAAQ,eACRA,EAAQ,mBACKY,EAAA,GAGV,gBAAiBnzB,IAENmzB,EADU,SAApBnzB,EAAI6zB,YACM,EACiB,UAApB7zB,EAAI6zB,YACD,EAE2B,IAA3B7zB,EAAI6zB,YAAY5oB,OAAe,EAAIwG,KAAK6O,IAAI5Q,SAAS1P,EAAI6zB,YAAa,IAAK,IAwGzEC,gBAAA,CAChBd,cAND,SAAyBjvB,GAExB,OAAO6uB,EADOI,EAAcjvB,EAAQA,GAAUA,EAAOgwB,OAEtD,EAICluB,OAAQ+sB,EAAeI,GAAc,EAAMY,EAAII,OAAO,KACtDjuB,OAAQ6sB,EAAeI,GAAc,EAAMY,EAAII,OAAO,sFCjIvD,MAAMJ,EAAM/C,IACNhtB,EAAOgtB,WAMbK,EAAAA,KA2NA,SAAcpvB,GACbA,EAAMmyB,YAAc,GAEpB,MAAMnhB,EAAOD,OAAOC,KAAKoe,EAAQ+C,aACjC,IAAA,IAAS/oB,EAAI,EAAO4H,EAAK7H,OAATC,EAAiBA,IAChCpJ,EAAMmyB,YAAYnhB,EAAK5H,IAAMgmB,EAAQ+C,YAAYnhB,EAAK5H,GAExD,EAjOAgmB,EAAAA,IAoLA,YAAgBpsB,GACR/E,OAAAA,QAAQgG,OAAOyW,MAAM3Y,EAAKqwB,kBAAkBhD,EAAQ+C,eAAgBnvB,GAAQ,KACpF,EArLAosB,EAAAA,WAyJA,SAAoBpsB,GACb,MAACuY,UAAWrB,EAAM8T,UAAAA,GAAavtB,KAErC,GAAIutB,EAAW,CACd,MAAM/kB,EAAIxI,KAAKwtB,MACToE,EAAY,OAAkB,EAAJppB,EAAQA,EAAI,OAASA,GAC/C4Y,EAAS,KAAKwQ,OAAenY,SAE9BlX,EAAA,GAAK6e,EAAS7e,EAAK,GAAGnE,MAAM,MAAMY,KAAK,KAAOoiB,GAC9CljB,EAAAA,KAAK0zB,EAAY,KAAOhD,EAAOD,QAAQN,SAASruB,KAAK6nB,MAAQ,OACnE,MACCtlB,EAAK,IAKFosB,EAAQ+C,YAAYG,SAChB,IAER,IAAWtb,MAAOub,cAAgB,KARXrY,EAAO,IAAMlX,EAAK,EAE1C,EArKAosB,EAAAA,KA4LA,SAActU,GACTA,EACH7c,QAAQC,IAAIyxB,MAAQ7U,SAIb7c,QAAQC,IAAIyxB,KAErB,EAnMAP,EAAAA,KA4MA,WACC,OAAOnxB,QAAQC,IAAIyxB,KACpB,EA7MAP,EAAAA,UA0IA,WACC,MAAO,WAAYA,EAAQ+C,cAClB/C,EAAQ+C,YAAYjD,OAC5B4C,EAAII,OAAOj0B,QAAQgG,OAAOuuB,GAC5B,EA7IApD,EAAkBrtB,QAAAA,EAAK0wB,WACtB,QACA,yIAODrD,EAAAA,OAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAE7B,IAGH,MAAM8B,EAAgBnC,uBAElBmC,IAAkBA,EAAcjtB,QAAUitB,GAAe7U,OAAS,IACrE+S,EAAiBF,OAAA,CAChB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGF,OAAQnd,GACR,CASDqd,EAAAA,YAAsBre,OAAOC,KAAK/S,QAAQC,KAAKe,QAAc4K,GACrD,WAAWc,KAAKd,KACrB4G,QAAO,CAACiiB,EAAK7oB,KAET8oB,MAAAA,EAAO9oB,EACX0K,UAAU,GACVyF,cACAzW,QAAQ,aAAa,CAACqR,EAAGtE,IAClBA,EAAE5R,gBAIPsuB,IAAAA,EAAM/uB,QAAQC,IAAI2L,GAYf6oB,OAVN1F,IADG,2BAA2BriB,KAAKqiB,KAEzB,6BAA6BriB,KAAKqiB,KAE1B,SAARA,EACJ,MAEOA,GAGd0F,EAAIC,GAAQ3F,EACL0F,CAAAA,GACL,CAAE,GA2FLrD,EAAAA,QAAiBN,gBAAoBK,GAE/B,MAAAzB,WAACA,GAAc0B,EAAOD,QAMjBrM,EAAAA,EAAI,SAAUK,GAExB,OADK+O,KAAAA,YAAYjD,OAASzuB,KAAKutB,UACxBjsB,EAAK6wB,QAAQxP,EAAG3iB,KAAK0xB,aAC1BtzB,MAAM,MACNC,QAAWwN,EAAItN,SACfS,KAAK,IACR,EAMWozB,EAAAA,EAAI,SAAUzP,GAExB,OADK+O,KAAAA,YAAYjD,OAASzuB,KAAKutB,UACxBjsB,EAAK6wB,QAAQxP,EAAG3iB,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A,gBACA,SACA,OACA,qBACA,mBACA,4BACA,eACA,qBACA,mBACA,+BACA,sBACA,mBACA,oBACA,aACA,gCACA,wBACA,gBACA,oBACA,WACA,oBACA,gBACA,sBACA,mBACA,+BACA,4BACA,oBACA,sBACA,0BACA,0BACA,kCACA,gCACA,8BACA,gCACA,6BACA,6BACA,2BACA,wBACA,yBACA,0BACA,4BACA,iBACA,iCACA,qBACA,gCACA,wBACA,6BACA,sCACA,4BACA,6BACA,6BACA,6BACA,wBACA,oBACA,0BACA,sBACA,gBACA,kBACA,kBACA,yBACA,6BACA,0BACA,8BACA,gBACA,0BACA,uBACA,gCACA,4BACA,kCACA,iBACA,6BACA,8BACA,+BACA,eACA,uBAGWC,yCAA2C,CACtD,OACA,aACA,OACA,OACA,OACA,OACA,OACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,UACA,SACA,SACA,SACA,UACA,UACA,gBACA,YACA,eACA,MACA,QACA,MACA,MACA,QACA,MACA,YAGWgsC,uCAAyC,sCACzCC,0CACX,4CAIWv2C,eAAiB,CAC5B,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SC1MF,IAAYsF,yBAAAA,gDAAAA,2BAAAA,yBAAsB,CAAA,GAIhCA,wBAAAA,wBAAW,YAAA,GAAA,cAIXA,wBAAAA,wBAAK,MAAA,GAAA,QAIP,MAAMG,wBAA6C,CACjDviC,kBAAmB,KACnB8hC,SAAU,EACVliC,eAAgB,IAChBuiC,gBAAiBC,yBAAuBC,YACxCG,cAAe,GACfC,oBAAgBtqD,GAGZ6qD,oBAAoB,IAAInuC,WAAW,8BAKnC,MAAOy+E,2BAA2BlC,kBAatCvpC,WAAAA,CACE0rC,EACAz5F,EACAu4B,EAAoCkwB,yBAEpCy1B,MAAMub,EAAYz5F,GAGlBzC,KAAKg7B,aAAe,CAClB8vB,gBAAiB9vB,EAAa8vB,gBAC1B9vB,EAAa8vB,gBACbI,wBAAsBJ,gBAE1BL,SACEz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ACAA,eACAA,WACAA,SACAA,kBACAA,oBAEFnoB,OAAO,EACP4B,WAAYuzE,iBAER6D,yBAAqD,CACzD97G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CACT,IAAK,CACHY,cAAeyrE,4BAEjB/3G,QAAS,CACP8hC,WAAYi2E,aACZzrE,cAAeyrE,sCAGnB1pE,YAAawc,MACb3Z,gBAAiB,CAAC2Z,iBAA6BA,QAC/Cta,cAAe,CAACsa,KAChB/c,iBAAkB,CAChB+c,QACAA,UACAA,cACAA,QACAA,gBACAA,kBACAA,MACAA,cACAA,oBACAA,oBACAA,QACAA,YACAA,OACAA,gBACAA,wBACAA,0BACAA,aACAA,QACAA,UACAA,kCACAA,yBACAA,yBAEFnoB,OAAO,EACPlb,YAAa,iCACbknB,UAAW,SACXpK,WAAYuzE,iBAER+D,wBAAoD,CACxDh8G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CACT,IAAK,CACHY,cAAeyrE,2BAEjB/3G,QAAS,CACP8hC,WAAYi2E,aACZzrE,cAAeyrE,qCAGnB7mE,gBAAiB,CAAC2Z,iBAA6BA,QAC/Cta,cAAe,CAACsa,KAChB/c,iBAAkB,CAChB+c,QACAA,UACAA,QACAA,cACAA,QACAA,gBACAA,kBACAA,MACAA,cACAA,oBACAA,oBACAA,QACAA,YACAA,OACAA,gBACAA,kCACAA,yBACAA,wBACAA,YAEFnoB,OAAO,EACP4B,WAAYuzE,iBAERiE,gCAA4D,CAChEl8G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CACT,IAAK,CACHY,cAAeyrE,mCAEjB/3G,QAAS,CACP8hC,WAAYi2E,aACZzrE,cAAeyrE,6CAGnB7mE,gBAAiB,CAAC2Z,iBAA6BA,QAC/Cta,cAAe,CAACsa,KAChB/c,iBAAkB,CAChB+c,QACAA,UACAA,QACAA,cACAA,QACAA,gBACAA,kBACAA,cACAA,oBACAA,oBACAA,QACAA,YACAA,OACAA,gBACAA,sBACAA,wBACAA,cACAA,kBACAA,iBACAA,wBACAA,UACAA,kCACAA,yBACAA,wBACAA,UACAA,YACAA,mBACAA,QAEFnoB,OAAO,EACP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UAAW,SACXpK,WAAYuzE,eAERuF,4BAAwD,CAC5Dx9G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CACT,IAAK,CACHY,cAAeyrE,gCAEjB/3G,QAAS,CACP8hC,WAAYi2E,aACZzrE,cAAeyrE,0CAGnB7mE,gBAAiB,CAAC2Z,kBAClBta,cAAe,CAACsa,KAChB/c,iBAAkB,CAChB+c,QACAA,UACAA,QACAA,cACAA,SACAA,QACAA,gBACAA,kBACAA,cACAA,oBACAA,oBACAA,QACAA,YACAA,OACAA,iBACAA,gBACAA,eACAA,oBACAA,oBACAA,uBACAA,gBACAA,KACAA,sBACAA,wBACAA,cACAA,kBACAA,aACAA,WACAA,eACAA,iBACAA,wBACAA,eACAA,wBACAA,UACAA,0BAEFnoB,OAAO,EACP4B,WAAYuzE,eAERyF,wBAAoD,CACxD19G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CACT,IAAK,CACHY,cAAeyrE,4BAEjB/3G,QAAS,CACP8hC,WAAYi2E,aACZzrE,cAAeyrE,sCAGnB1pE,YAAawc,MACb3Z,gBAAiB,CACf2Z,iBACAA,OACAA,SAEFta,cAAe,CAACsa,KAChB/c,iBAAkB,CAChB+c,QACAA,UACAA,cACAA,QACAA,cACAA,oBACAA,oBACAA,gBACAA,wBACAA,0BACAA,aACAA,SAEFnoB,OAAO,EACPlb,YAAa,iCACbknB,UAAW,SACXpK,WAAYuzE,eAER2F,+BAA2D,CAC/D59G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CACT,IAAK,CACHY,cAAeyrE,mCAEjB/3G,QAAS,CACP8hC,WAAYi2E,aACZzrE,cAAeyrE,6CAGnB7mE,gBAAiB,CACf2Z,iBACAA,OACAA,SAEFta,cAAe,CAACsa,KAChB/c,iBAAkB,CAChB+c,QACAA,UACAA,QACAA,cACAA,QACAA,cACAA,oBACAA,oBACAA,gBACAA,sBACAA,wBACAA,cACAA,kBACAA,iBACAA,wBACAA,UACAA,mBACAA,cAEFnoB,OAAO,EACP4B,WAAYuzE,eAER6F,6BAAyD,CAC7D99G,KAAM,0BACNysC,WAAY,MACZX,UAAW,CA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222]}